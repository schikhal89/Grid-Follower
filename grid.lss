
grid.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001cc  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  00000220  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 000000be  00000000  00000000  00000240  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   00000390  00000000  00000000  000002fe  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 000000f6  00000000  00000000  0000068e  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   0000033c  00000000  00000000  00000784  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  000000b0  00000000  00000000  00000ac0  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    00000167  00000000  00000000  00000b70  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 98 00 	call	0x130	; 0x130 <main>
  64:	0c 94 e4 00 	jmp	0x1c8	; 0x1c8 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <halfspeed_fwd>:


void halfspeed_fwd(void);
void halfspeed_fwd(void)
{
DDRD|=(1<<4)|(1<<5)|(1<<6)|(1<<7);
  6c:	81 b3       	in	r24, 0x11	; 17
  6e:	80 6f       	ori	r24, 0xF0	; 240
  70:	81 bb       	out	0x11, r24	; 17
PORTD=0x50;
  72:	80 e5       	ldi	r24, 0x50	; 80
  74:	82 bb       	out	0x12, r24	; 18
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  76:	80 e4       	ldi	r24, 0x40	; 64
  78:	9c e9       	ldi	r25, 0x9C	; 156
  7a:	fc 01       	movw	r30, r24
  7c:	31 97       	sbiw	r30, 0x01	; 1
  7e:	f1 f7       	brne	.-4      	; 0x7c <halfspeed_fwd+0x10>
_delay_ms(10);
PORTD=0x00;
  80:	12 ba       	out	0x12, r1	; 18
  82:	01 97       	sbiw	r24, 0x01	; 1
  84:	f1 f7       	brne	.-4      	; 0x82 <halfspeed_fwd+0x16>
_delay_ms(10);

}
  86:	08 95       	ret

00000088 <fullspeed_fwd>:


void fullspeed_fwd(void);
void fullspeed_fwd(void)
{
DDRD|=(1<<4)|(1<<5)|(1<<6)|(1<<7);
  88:	81 b3       	in	r24, 0x11	; 17
  8a:	80 6f       	ori	r24, 0xF0	; 240
  8c:	81 bb       	out	0x11, r24	; 17
PORTD|=(1<<4)|(1<<6);
  8e:	82 b3       	in	r24, 0x12	; 18
  90:	80 65       	ori	r24, 0x50	; 80
  92:	82 bb       	out	0x12, r24	; 18
PORTD&=~((1<<5)|(1<<7));
  94:	82 b3       	in	r24, 0x12	; 18
  96:	8f 75       	andi	r24, 0x5F	; 95
  98:	82 bb       	out	0x12, r24	; 18
}
  9a:	08 95       	ret

0000009c <halfspeed_bck>:


void halfspeed_bck(void);
void halfspeed_bck(void)
{
DDRD|=(1<<4)|(1<<5)|(1<<6)|(1<<7);
  9c:	81 b3       	in	r24, 0x11	; 17
  9e:	80 6f       	ori	r24, 0xF0	; 240
  a0:	81 bb       	out	0x11, r24	; 17
PORTD|=(1<<5)|(1<<7);
  a2:	82 b3       	in	r24, 0x12	; 18
  a4:	80 6a       	ori	r24, 0xA0	; 160
  a6:	82 bb       	out	0x12, r24	; 18
  a8:	80 e4       	ldi	r24, 0x40	; 64
  aa:	9c e9       	ldi	r25, 0x9C	; 156
  ac:	fc 01       	movw	r30, r24
  ae:	31 97       	sbiw	r30, 0x01	; 1
  b0:	f1 f7       	brne	.-4      	; 0xae <halfspeed_bck+0x12>
_delay_ms(10);
PORTD=0x00;
  b2:	12 ba       	out	0x12, r1	; 18
  b4:	01 97       	sbiw	r24, 0x01	; 1
  b6:	f1 f7       	brne	.-4      	; 0xb4 <halfspeed_bck+0x18>
_delay_ms(10);

}
  b8:	08 95       	ret

000000ba <fullspeed_bck>:

void fullspeed_bck(void);
void fullspeed_bck(void)
{
DDRD|=(1<<4)|(1<<5)|(1<<6)|(1<<7);
  ba:	81 b3       	in	r24, 0x11	; 17
  bc:	80 6f       	ori	r24, 0xF0	; 240
  be:	81 bb       	out	0x11, r24	; 17
PORTD|=(1<<5)|(1<<7);
  c0:	82 b3       	in	r24, 0x12	; 18
  c2:	80 6a       	ori	r24, 0xA0	; 160
  c4:	82 bb       	out	0x12, r24	; 18
PORTD&=~((1<<4)|(1<<6));
  c6:	82 b3       	in	r24, 0x12	; 18
  c8:	8f 7a       	andi	r24, 0xAF	; 175
  ca:	82 bb       	out	0x12, r24	; 18
}
  cc:	08 95       	ret

000000ce <halfspeed_right>:

void halfspeed_right(void);
void halfspeed_right(void)
{
DDRD|=(1<<4)|(1<<5)|(1<<6)|(1<<7);
  ce:	81 b3       	in	r24, 0x11	; 17
  d0:	80 6f       	ori	r24, 0xF0	; 240
  d2:	81 bb       	out	0x11, r24	; 17
PORTD|=(1<<4);
  d4:	94 9a       	sbi	0x12, 4	; 18
PORTD&=~((1<<5)|(1<<6)|(1<<7));
  d6:	82 b3       	in	r24, 0x12	; 18
  d8:	8f 71       	andi	r24, 0x1F	; 31
  da:	82 bb       	out	0x12, r24	; 18
  dc:	80 e4       	ldi	r24, 0x40	; 64
  de:	9c e9       	ldi	r25, 0x9C	; 156
  e0:	fc 01       	movw	r30, r24
  e2:	31 97       	sbiw	r30, 0x01	; 1
  e4:	f1 f7       	brne	.-4      	; 0xe2 <halfspeed_right+0x14>
_delay_ms(10);
PORTD=0x00;
  e6:	12 ba       	out	0x12, r1	; 18
  e8:	01 97       	sbiw	r24, 0x01	; 1
  ea:	f1 f7       	brne	.-4      	; 0xe8 <halfspeed_right+0x1a>
_delay_ms(10);

}
  ec:	08 95       	ret

000000ee <fullspeed_right>:

void fullspeed_right(void);
void fullspeed_right(void)
{
DDRD|=(1<<4)|(1<<5)|(1<<6)|(1<<7);
  ee:	81 b3       	in	r24, 0x11	; 17
  f0:	80 6f       	ori	r24, 0xF0	; 240
  f2:	81 bb       	out	0x11, r24	; 17
PORTD|=(1<<4);
  f4:	94 9a       	sbi	0x12, 4	; 18
PORTD&=~((1<<5)|(1<<6)|(1<<7));
  f6:	82 b3       	in	r24, 0x12	; 18
  f8:	8f 71       	andi	r24, 0x1F	; 31
  fa:	82 bb       	out	0x12, r24	; 18

}
  fc:	08 95       	ret

000000fe <halfspeed_left>:

void halfspeed_left(void);
void halfspeed_left(void)
{
DDRD|=(1<<4)|(1<<5)|(1<<6)|(1<<7);
  fe:	81 b3       	in	r24, 0x11	; 17
 100:	80 6f       	ori	r24, 0xF0	; 240
 102:	81 bb       	out	0x11, r24	; 17
PORTD|=(1<<6);
 104:	96 9a       	sbi	0x12, 6	; 18
PORTD&=~((1<<5)|(1<<4)|(1<<7));
 106:	82 b3       	in	r24, 0x12	; 18
 108:	8f 74       	andi	r24, 0x4F	; 79
 10a:	82 bb       	out	0x12, r24	; 18
 10c:	80 e4       	ldi	r24, 0x40	; 64
 10e:	9c e9       	ldi	r25, 0x9C	; 156
 110:	fc 01       	movw	r30, r24
 112:	31 97       	sbiw	r30, 0x01	; 1
 114:	f1 f7       	brne	.-4      	; 0x112 <halfspeed_left+0x14>
_delay_ms(10);
PORTD=0x00;
 116:	12 ba       	out	0x12, r1	; 18
 118:	01 97       	sbiw	r24, 0x01	; 1
 11a:	f1 f7       	brne	.-4      	; 0x118 <halfspeed_left+0x1a>
_delay_ms(10);

}
 11c:	08 95       	ret

0000011e <fullspeed_left>:

void fullspeed_left(void);
void fullspeed_left(void)
{
DDRD|=(1<<4)|(1<<5)|(1<<6)|(1<<7);
 11e:	81 b3       	in	r24, 0x11	; 17
 120:	80 6f       	ori	r24, 0xF0	; 240
 122:	81 bb       	out	0x11, r24	; 17
PORTD|=(1<<6);
 124:	96 9a       	sbi	0x12, 6	; 18
PORTD&=~((1<<5)|(1<<4)|(1<<7));
 126:	82 b3       	in	r24, 0x12	; 18
 128:	8f 74       	andi	r24, 0x4F	; 79
 12a:	82 bb       	out	0x12, r24	; 18
}
 12c:	08 95       	ret

0000012e <checkpin>:
void checkpin(unsigned int pin);
void checkpin(unsigned int pin)
{


}
 12e:	08 95       	ret

00000130 <main>:
int main()

{
int i=0;
DDRA&=~((1<<7)|(1<<6)|(1<<2)|(1<<1)|(1<<0));
 130:	8a b3       	in	r24, 0x1a	; 26
 132:	88 73       	andi	r24, 0x38	; 56
 134:	8a bb       	out	0x1a, r24	; 26
DDRB|=(1<<4);
 136:	bc 9a       	sbi	0x17, 4	; 23
DDRD|=(1<<4)|(1<<5)|(1<<6)|(1<<7);
 138:	81 b3       	in	r24, 0x11	; 17
 13a:	80 6f       	ori	r24, 0xF0	; 240
 13c:	81 bb       	out	0x11, r24	; 17
//PORTD^=(1<<4)|(1<<6);
int xaxis=0,yaxis=0;
while(1)
{

if(s1&&s2&&s3&&s4&&s5)
 13e:	c8 99       	sbic	0x19, 0	; 25
 140:	0a c0       	rjmp	.+20     	; 0x156 <main+0x26>
 142:	cf 99       	sbic	0x19, 7	; 25
 144:	08 c0       	rjmp	.+16     	; 0x156 <main+0x26>
 146:	ce 99       	sbic	0x19, 6	; 25
 148:	06 c0       	rjmp	.+12     	; 0x156 <main+0x26>
 14a:	ca 99       	sbic	0x19, 2	; 25
 14c:	04 c0       	rjmp	.+8      	; 0x156 <main+0x26>
 14e:	c9 99       	sbic	0x19, 1	; 25
 150:	02 c0       	rjmp	.+4      	; 0x156 <main+0x26>
{
xaxis++;
halfspeed_fwd();
 152:	0e 94 36 00 	call	0x6c	; 0x6c <halfspeed_fwd>
}				


if(s3&&(!(s2))&&(!s1))
 156:	ce 99       	sbic	0x19, 6	; 25
 158:	06 c0       	rjmp	.+12     	; 0x166 <main+0x36>
 15a:	cf 9b       	sbis	0x19, 7	; 25
 15c:	04 c0       	rjmp	.+8      	; 0x166 <main+0x36>
 15e:	c8 9b       	sbis	0x19, 0	; 25
 160:	02 c0       	rjmp	.+4      	; 0x166 <main+0x36>
{
fullspeed_fwd();
 162:	0e 94 44 00 	call	0x88	; 0x88 <fullspeed_fwd>
}
if((!(s3))&&(!(s2))&&(!s1))
 166:	ce 9b       	sbis	0x19, 6	; 25
 168:	ea cf       	rjmp	.-44     	; 0x13e <main+0xe>
 16a:	cf 9b       	sbis	0x19, 7	; 25
 16c:	e8 cf       	rjmp	.-48     	; 0x13e <main+0xe>
 16e:	c8 9b       	sbis	0x19, 0	; 25
 170:	e6 cf       	rjmp	.-52     	; 0x13e <main+0xe>
{
halfspeed_right();
 172:	0e 94 67 00 	call	0xce	; 0xce <halfspeed_right>
		if(s3&&(!(s2))&&(!s1))
 176:	ce 99       	sbic	0x19, 6	; 25
 178:	e2 cf       	rjmp	.-60     	; 0x13e <main+0xe>
 17a:	cf 9b       	sbis	0x19, 7	; 25
 17c:	e0 cf       	rjmp	.-64     	; 0x13e <main+0xe>
 17e:	c8 9b       	sbis	0x19, 0	; 25
 180:	de cf       	rjmp	.-68     	; 0x13e <main+0xe>
			{
			halfspeed_fwd();
 182:	0e 94 36 00 	call	0x6c	; 0x6c <halfspeed_fwd>
				if(s1&&s2&&s3&&s4&&s5)
 186:	c8 99       	sbic	0x19, 0	; 25
 188:	da cf       	rjmp	.-76     	; 0x13e <main+0xe>
 18a:	cf 99       	sbic	0x19, 7	; 25
 18c:	d8 cf       	rjmp	.-80     	; 0x13e <main+0xe>
 18e:	ce 99       	sbic	0x19, 6	; 25
 190:	d6 cf       	rjmp	.-84     	; 0x13e <main+0xe>
 192:	ca 99       	sbic	0x19, 2	; 25
 194:	d4 cf       	rjmp	.-88     	; 0x13e <main+0xe>
 196:	c9 99       	sbic	0x19, 1	; 25
 198:	d2 cf       	rjmp	.-92     	; 0x13e <main+0xe>
					{
						halfspeed_left();
 19a:	0e 94 7f 00 	call	0xfe	; 0xfe <halfspeed_left>
							if(s3&&(!(s2))&&(!s1))
 19e:	ce 99       	sbic	0x19, 6	; 25
 1a0:	ce cf       	rjmp	.-100    	; 0x13e <main+0xe>
 1a2:	cf 9b       	sbis	0x19, 7	; 25
 1a4:	cc cf       	rjmp	.-104    	; 0x13e <main+0xe>
 1a6:	c8 9b       	sbis	0x19, 0	; 25
 1a8:	ca cf       	rjmp	.-108    	; 0x13e <main+0xe>
							{
							fullspeed_fwd();
 1aa:	0e 94 44 00 	call	0x88	; 0x88 <fullspeed_fwd>
								if(s1&&s2&&s3&&s4&&s5)
 1ae:	c8 99       	sbic	0x19, 0	; 25
 1b0:	c6 cf       	rjmp	.-116    	; 0x13e <main+0xe>
 1b2:	cf 99       	sbic	0x19, 7	; 25
 1b4:	c4 cf       	rjmp	.-120    	; 0x13e <main+0xe>
 1b6:	ce 99       	sbic	0x19, 6	; 25
 1b8:	c2 cf       	rjmp	.-124    	; 0x13e <main+0xe>
 1ba:	ca 99       	sbic	0x19, 2	; 25
 1bc:	c0 cf       	rjmp	.-128    	; 0x13e <main+0xe>
 1be:	c9 99       	sbic	0x19, 1	; 25
 1c0:	be cf       	rjmp	.-132    	; 0x13e <main+0xe>
									{
									yaxis++;
									halfspeed_fwd();
 1c2:	0e 94 36 00 	call	0x6c	; 0x6c <halfspeed_fwd>
 1c6:	bb cf       	rjmp	.-138    	; 0x13e <main+0xe>

000001c8 <_exit>:
 1c8:	f8 94       	cli

000001ca <__stop_program>:
 1ca:	ff cf       	rjmp	.-2      	; 0x1ca <__stop_program>
