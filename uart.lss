
uart.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000dc4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000002e  00800060  00000dc4  00000e58  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000009  0080008e  0080008e  00000e86  2**0
                  ALLOC
  3 .debug_aranges 00000020  00000000  00000000  00000e86  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000236  00000000  00000000  00000ea6  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000d6a  00000000  00000000  000010dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000023d  00000000  00000000  00001e46  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000c83  00000000  00000000  00002083  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000240  00000000  00000000  00002d08  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000027d  00000000  00000000  00002f48  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000074a  00000000  00000000  000031c5  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  0000390f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 ca 04 	jmp	0x994	; 0x994 <__vector_11>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 ec       	ldi	r30, 0xC4	; 196
  68:	fd e0       	ldi	r31, 0x0D	; 13
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	ae 38       	cpi	r26, 0x8E	; 142
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	ae e8       	ldi	r26, 0x8E	; 142
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a7 39       	cpi	r26, 0x97	; 151
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 2e 05 	call	0xa5c	; 0xa5c <main>
  8a:	0c 94 e0 06 	jmp	0xdc0	; 0xdc0 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <fwd>:



void fwd(unsigned int speed);
void fwd(unsigned int speed)
{
  92:	af 92       	push	r10
  94:	bf 92       	push	r11
  96:	cf 92       	push	r12
  98:	df 92       	push	r13
  9a:	ef 92       	push	r14
  9c:	ff 92       	push	r15
  9e:	0f 93       	push	r16
  a0:	1f 93       	push	r17
DDRD|=(1<<4)|(1<<5)|(1<<6)|(1<<7);
  a2:	21 b3       	in	r18, 0x11	; 17
  a4:	20 6f       	ori	r18, 0xF0	; 240
  a6:	21 bb       	out	0x11, r18	; 17
PORTD|=(1<<4)|(1<<6);
  a8:	22 b3       	in	r18, 0x12	; 18
  aa:	20 65       	ori	r18, 0x50	; 80
  ac:	22 bb       	out	0x12, r18	; 18
_delay_ms(speed);
  ae:	a0 e0       	ldi	r26, 0x00	; 0
  b0:	b0 e0       	ldi	r27, 0x00	; 0
  b2:	bc 01       	movw	r22, r24
  b4:	cd 01       	movw	r24, r26
  b6:	0e 94 94 05 	call	0xb28	; 0xb28 <__floatunsisf>
  ba:	5b 01       	movw	r10, r22
  bc:	6c 01       	movw	r12, r24
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
  be:	20 e0       	ldi	r18, 0x00	; 0
  c0:	30 e0       	ldi	r19, 0x00	; 0
  c2:	4a e7       	ldi	r20, 0x7A	; 122
  c4:	55 e4       	ldi	r21, 0x45	; 69
  c6:	0e 94 22 06 	call	0xc44	; 0xc44 <__mulsf3>
  ca:	7b 01       	movw	r14, r22
  cc:	8c 01       	movw	r16, r24
	if (__tmp < 1.0)
  ce:	20 e0       	ldi	r18, 0x00	; 0
  d0:	30 e0       	ldi	r19, 0x00	; 0
  d2:	40 e8       	ldi	r20, 0x80	; 128
  d4:	5f e3       	ldi	r21, 0x3F	; 63
  d6:	0e 94 64 05 	call	0xac8	; 0xac8 <__cmpsf2>
  da:	88 23       	and	r24, r24
  dc:	1c f4       	brge	.+6      	; 0xe4 <fwd+0x52>
  de:	61 e0       	ldi	r22, 0x01	; 1
  e0:	70 e0       	ldi	r23, 0x00	; 0
  e2:	24 c0       	rjmp	.+72     	; 0x12c <fwd+0x9a>
		__ticks = 1;
	else if (__tmp > 65535)
  e4:	c8 01       	movw	r24, r16
  e6:	b7 01       	movw	r22, r14
  e8:	20 e0       	ldi	r18, 0x00	; 0
  ea:	3f ef       	ldi	r19, 0xFF	; 255
  ec:	4f e7       	ldi	r20, 0x7F	; 127
  ee:	57 e4       	ldi	r21, 0x47	; 71
  f0:	0e 94 1e 06 	call	0xc3c	; 0xc3c <__gesf2>
  f4:	18 16       	cp	r1, r24
  f6:	b4 f4       	brge	.+44     	; 0x124 <fwd+0x92>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
  f8:	c6 01       	movw	r24, r12
  fa:	b5 01       	movw	r22, r10
  fc:	20 e0       	ldi	r18, 0x00	; 0
  fe:	30 e0       	ldi	r19, 0x00	; 0
 100:	40 e2       	ldi	r20, 0x20	; 32
 102:	51 e4       	ldi	r21, 0x41	; 65
 104:	0e 94 22 06 	call	0xc44	; 0xc44 <__mulsf3>
 108:	0e 94 68 05 	call	0xad0	; 0xad0 <__fixunssfsi>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 10c:	80 e9       	ldi	r24, 0x90	; 144
 10e:	91 e0       	ldi	r25, 0x01	; 1
 110:	05 c0       	rjmp	.+10     	; 0x11c <fwd+0x8a>
 112:	fc 01       	movw	r30, r24
 114:	31 97       	sbiw	r30, 0x01	; 1
 116:	f1 f7       	brne	.-4      	; 0x114 <fwd+0x82>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 118:	61 50       	subi	r22, 0x01	; 1
 11a:	70 40       	sbci	r23, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 11c:	61 15       	cp	r22, r1
 11e:	71 05       	cpc	r23, r1
 120:	c1 f7       	brne	.-16     	; 0x112 <fwd+0x80>
 122:	07 c0       	rjmp	.+14     	; 0x132 <fwd+0xa0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 124:	c8 01       	movw	r24, r16
 126:	b7 01       	movw	r22, r14
 128:	0e 94 68 05 	call	0xad0	; 0xad0 <__fixunssfsi>
 12c:	cb 01       	movw	r24, r22
 12e:	01 97       	sbiw	r24, 0x01	; 1
 130:	f1 f7       	brne	.-4      	; 0x12e <fwd+0x9c>
PORTD&=~((1<<4)|(1<<6));
 132:	82 b3       	in	r24, 0x12	; 18
 134:	8f 7a       	andi	r24, 0xAF	; 175
 136:	82 bb       	out	0x12, r24	; 18
 138:	80 e2       	ldi	r24, 0x20	; 32
 13a:	9e e4       	ldi	r25, 0x4E	; 78
 13c:	01 97       	sbiw	r24, 0x01	; 1
 13e:	f1 f7       	brne	.-4      	; 0x13c <fwd+0xaa>
_delay_ms(5);

}
 140:	1f 91       	pop	r17
 142:	0f 91       	pop	r16
 144:	ff 90       	pop	r15
 146:	ef 90       	pop	r14
 148:	df 90       	pop	r13
 14a:	cf 90       	pop	r12
 14c:	bf 90       	pop	r11
 14e:	af 90       	pop	r10
 150:	08 95       	ret

00000152 <bck>:



void bck(unsigned int speed);
void bck(unsigned int speed)
{
 152:	af 92       	push	r10
 154:	bf 92       	push	r11
 156:	cf 92       	push	r12
 158:	df 92       	push	r13
 15a:	ef 92       	push	r14
 15c:	ff 92       	push	r15
 15e:	0f 93       	push	r16
 160:	1f 93       	push	r17
DDRD|=(1<<4)|(1<<5)|(1<<6)|(1<<7);
 162:	21 b3       	in	r18, 0x11	; 17
 164:	20 6f       	ori	r18, 0xF0	; 240
 166:	21 bb       	out	0x11, r18	; 17
PORTD|=(1<<5)|(1<<7);
 168:	22 b3       	in	r18, 0x12	; 18
 16a:	20 6a       	ori	r18, 0xA0	; 160
 16c:	22 bb       	out	0x12, r18	; 18
_delay_ms(speed);
 16e:	a0 e0       	ldi	r26, 0x00	; 0
 170:	b0 e0       	ldi	r27, 0x00	; 0
 172:	bc 01       	movw	r22, r24
 174:	cd 01       	movw	r24, r26
 176:	0e 94 94 05 	call	0xb28	; 0xb28 <__floatunsisf>
 17a:	5b 01       	movw	r10, r22
 17c:	6c 01       	movw	r12, r24
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
 17e:	20 e0       	ldi	r18, 0x00	; 0
 180:	30 e0       	ldi	r19, 0x00	; 0
 182:	4a e7       	ldi	r20, 0x7A	; 122
 184:	55 e4       	ldi	r21, 0x45	; 69
 186:	0e 94 22 06 	call	0xc44	; 0xc44 <__mulsf3>
 18a:	7b 01       	movw	r14, r22
 18c:	8c 01       	movw	r16, r24
	if (__tmp < 1.0)
 18e:	20 e0       	ldi	r18, 0x00	; 0
 190:	30 e0       	ldi	r19, 0x00	; 0
 192:	40 e8       	ldi	r20, 0x80	; 128
 194:	5f e3       	ldi	r21, 0x3F	; 63
 196:	0e 94 64 05 	call	0xac8	; 0xac8 <__cmpsf2>
 19a:	88 23       	and	r24, r24
 19c:	1c f4       	brge	.+6      	; 0x1a4 <bck+0x52>
 19e:	61 e0       	ldi	r22, 0x01	; 1
 1a0:	70 e0       	ldi	r23, 0x00	; 0
 1a2:	24 c0       	rjmp	.+72     	; 0x1ec <bck+0x9a>
		__ticks = 1;
	else if (__tmp > 65535)
 1a4:	c8 01       	movw	r24, r16
 1a6:	b7 01       	movw	r22, r14
 1a8:	20 e0       	ldi	r18, 0x00	; 0
 1aa:	3f ef       	ldi	r19, 0xFF	; 255
 1ac:	4f e7       	ldi	r20, 0x7F	; 127
 1ae:	57 e4       	ldi	r21, 0x47	; 71
 1b0:	0e 94 1e 06 	call	0xc3c	; 0xc3c <__gesf2>
 1b4:	18 16       	cp	r1, r24
 1b6:	b4 f4       	brge	.+44     	; 0x1e4 <bck+0x92>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 1b8:	c6 01       	movw	r24, r12
 1ba:	b5 01       	movw	r22, r10
 1bc:	20 e0       	ldi	r18, 0x00	; 0
 1be:	30 e0       	ldi	r19, 0x00	; 0
 1c0:	40 e2       	ldi	r20, 0x20	; 32
 1c2:	51 e4       	ldi	r21, 0x41	; 65
 1c4:	0e 94 22 06 	call	0xc44	; 0xc44 <__mulsf3>
 1c8:	0e 94 68 05 	call	0xad0	; 0xad0 <__fixunssfsi>
 1cc:	80 e9       	ldi	r24, 0x90	; 144
 1ce:	91 e0       	ldi	r25, 0x01	; 1
 1d0:	05 c0       	rjmp	.+10     	; 0x1dc <bck+0x8a>
 1d2:	fc 01       	movw	r30, r24
 1d4:	31 97       	sbiw	r30, 0x01	; 1
 1d6:	f1 f7       	brne	.-4      	; 0x1d4 <bck+0x82>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 1d8:	61 50       	subi	r22, 0x01	; 1
 1da:	70 40       	sbci	r23, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 1dc:	61 15       	cp	r22, r1
 1de:	71 05       	cpc	r23, r1
 1e0:	c1 f7       	brne	.-16     	; 0x1d2 <bck+0x80>
 1e2:	07 c0       	rjmp	.+14     	; 0x1f2 <bck+0xa0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 1e4:	c8 01       	movw	r24, r16
 1e6:	b7 01       	movw	r22, r14
 1e8:	0e 94 68 05 	call	0xad0	; 0xad0 <__fixunssfsi>
 1ec:	cb 01       	movw	r24, r22
 1ee:	01 97       	sbiw	r24, 0x01	; 1
 1f0:	f1 f7       	brne	.-4      	; 0x1ee <bck+0x9c>
PORTD=0x00;
 1f2:	12 ba       	out	0x12, r1	; 18
 1f4:	80 e2       	ldi	r24, 0x20	; 32
 1f6:	9e e4       	ldi	r25, 0x4E	; 78
 1f8:	01 97       	sbiw	r24, 0x01	; 1
 1fa:	f1 f7       	brne	.-4      	; 0x1f8 <bck+0xa6>
_delay_ms(5);

}
 1fc:	1f 91       	pop	r17
 1fe:	0f 91       	pop	r16
 200:	ff 90       	pop	r15
 202:	ef 90       	pop	r14
 204:	df 90       	pop	r13
 206:	cf 90       	pop	r12
 208:	bf 90       	pop	r11
 20a:	af 90       	pop	r10
 20c:	08 95       	ret

0000020e <right_fwd>:



void right_fwd(unsigned int speed);
void right_fwd(unsigned int speed)
{
 20e:	af 92       	push	r10
 210:	bf 92       	push	r11
 212:	cf 92       	push	r12
 214:	df 92       	push	r13
 216:	ef 92       	push	r14
 218:	ff 92       	push	r15
 21a:	0f 93       	push	r16
 21c:	1f 93       	push	r17
DDRD|=(1<<4)|(1<<5)|(1<<6)|(1<<7);
 21e:	21 b3       	in	r18, 0x11	; 17
 220:	20 6f       	ori	r18, 0xF0	; 240
 222:	21 bb       	out	0x11, r18	; 17
PORTD|=(1<<4);
 224:	94 9a       	sbi	0x12, 4	; 18
PORTD&=~((1<<5)|(1<<6)|(1<<7));
 226:	22 b3       	in	r18, 0x12	; 18
 228:	2f 71       	andi	r18, 0x1F	; 31
 22a:	22 bb       	out	0x12, r18	; 18
_delay_ms(speed);
 22c:	a0 e0       	ldi	r26, 0x00	; 0
 22e:	b0 e0       	ldi	r27, 0x00	; 0
 230:	bc 01       	movw	r22, r24
 232:	cd 01       	movw	r24, r26
 234:	0e 94 94 05 	call	0xb28	; 0xb28 <__floatunsisf>
 238:	5b 01       	movw	r10, r22
 23a:	6c 01       	movw	r12, r24
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
 23c:	20 e0       	ldi	r18, 0x00	; 0
 23e:	30 e0       	ldi	r19, 0x00	; 0
 240:	4a e7       	ldi	r20, 0x7A	; 122
 242:	55 e4       	ldi	r21, 0x45	; 69
 244:	0e 94 22 06 	call	0xc44	; 0xc44 <__mulsf3>
 248:	7b 01       	movw	r14, r22
 24a:	8c 01       	movw	r16, r24
	if (__tmp < 1.0)
 24c:	20 e0       	ldi	r18, 0x00	; 0
 24e:	30 e0       	ldi	r19, 0x00	; 0
 250:	40 e8       	ldi	r20, 0x80	; 128
 252:	5f e3       	ldi	r21, 0x3F	; 63
 254:	0e 94 64 05 	call	0xac8	; 0xac8 <__cmpsf2>
 258:	88 23       	and	r24, r24
 25a:	1c f4       	brge	.+6      	; 0x262 <right_fwd+0x54>
 25c:	61 e0       	ldi	r22, 0x01	; 1
 25e:	70 e0       	ldi	r23, 0x00	; 0
 260:	24 c0       	rjmp	.+72     	; 0x2aa <right_fwd+0x9c>
		__ticks = 1;
	else if (__tmp > 65535)
 262:	c8 01       	movw	r24, r16
 264:	b7 01       	movw	r22, r14
 266:	20 e0       	ldi	r18, 0x00	; 0
 268:	3f ef       	ldi	r19, 0xFF	; 255
 26a:	4f e7       	ldi	r20, 0x7F	; 127
 26c:	57 e4       	ldi	r21, 0x47	; 71
 26e:	0e 94 1e 06 	call	0xc3c	; 0xc3c <__gesf2>
 272:	18 16       	cp	r1, r24
 274:	b4 f4       	brge	.+44     	; 0x2a2 <right_fwd+0x94>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 276:	c6 01       	movw	r24, r12
 278:	b5 01       	movw	r22, r10
 27a:	20 e0       	ldi	r18, 0x00	; 0
 27c:	30 e0       	ldi	r19, 0x00	; 0
 27e:	40 e2       	ldi	r20, 0x20	; 32
 280:	51 e4       	ldi	r21, 0x41	; 65
 282:	0e 94 22 06 	call	0xc44	; 0xc44 <__mulsf3>
 286:	0e 94 68 05 	call	0xad0	; 0xad0 <__fixunssfsi>
 28a:	80 e9       	ldi	r24, 0x90	; 144
 28c:	91 e0       	ldi	r25, 0x01	; 1
 28e:	05 c0       	rjmp	.+10     	; 0x29a <right_fwd+0x8c>
 290:	fc 01       	movw	r30, r24
 292:	31 97       	sbiw	r30, 0x01	; 1
 294:	f1 f7       	brne	.-4      	; 0x292 <right_fwd+0x84>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 296:	61 50       	subi	r22, 0x01	; 1
 298:	70 40       	sbci	r23, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 29a:	61 15       	cp	r22, r1
 29c:	71 05       	cpc	r23, r1
 29e:	c1 f7       	brne	.-16     	; 0x290 <right_fwd+0x82>
 2a0:	07 c0       	rjmp	.+14     	; 0x2b0 <right_fwd+0xa2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 2a2:	c8 01       	movw	r24, r16
 2a4:	b7 01       	movw	r22, r14
 2a6:	0e 94 68 05 	call	0xad0	; 0xad0 <__fixunssfsi>
 2aa:	cb 01       	movw	r24, r22
 2ac:	01 97       	sbiw	r24, 0x01	; 1
 2ae:	f1 f7       	brne	.-4      	; 0x2ac <right_fwd+0x9e>
PORTD=0x00;
 2b0:	12 ba       	out	0x12, r1	; 18
 2b2:	80 e2       	ldi	r24, 0x20	; 32
 2b4:	9e e4       	ldi	r25, 0x4E	; 78
 2b6:	01 97       	sbiw	r24, 0x01	; 1
 2b8:	f1 f7       	brne	.-4      	; 0x2b6 <right_fwd+0xa8>
_delay_ms(5);

}
 2ba:	1f 91       	pop	r17
 2bc:	0f 91       	pop	r16
 2be:	ff 90       	pop	r15
 2c0:	ef 90       	pop	r14
 2c2:	df 90       	pop	r13
 2c4:	cf 90       	pop	r12
 2c6:	bf 90       	pop	r11
 2c8:	af 90       	pop	r10
 2ca:	08 95       	ret

000002cc <right_bck>:

void right_bck(unsigned int speed);
void right_bck(unsigned int speed)
{
 2cc:	af 92       	push	r10
 2ce:	bf 92       	push	r11
 2d0:	cf 92       	push	r12
 2d2:	df 92       	push	r13
 2d4:	ef 92       	push	r14
 2d6:	ff 92       	push	r15
 2d8:	0f 93       	push	r16
 2da:	1f 93       	push	r17
DDRD|=(1<<4)|(1<<5)|(1<<6)|(1<<7);
 2dc:	21 b3       	in	r18, 0x11	; 17
 2de:	20 6f       	ori	r18, 0xF0	; 240
 2e0:	21 bb       	out	0x11, r18	; 17
PORTD|=(1<<5);
 2e2:	95 9a       	sbi	0x12, 5	; 18
PORTD&=~((1<<4)|(1<<6)|(1<<7));
 2e4:	22 b3       	in	r18, 0x12	; 18
 2e6:	2f 72       	andi	r18, 0x2F	; 47
 2e8:	22 bb       	out	0x12, r18	; 18
_delay_ms(speed);
 2ea:	a0 e0       	ldi	r26, 0x00	; 0
 2ec:	b0 e0       	ldi	r27, 0x00	; 0
 2ee:	bc 01       	movw	r22, r24
 2f0:	cd 01       	movw	r24, r26
 2f2:	0e 94 94 05 	call	0xb28	; 0xb28 <__floatunsisf>
 2f6:	5b 01       	movw	r10, r22
 2f8:	6c 01       	movw	r12, r24
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
 2fa:	20 e0       	ldi	r18, 0x00	; 0
 2fc:	30 e0       	ldi	r19, 0x00	; 0
 2fe:	4a e7       	ldi	r20, 0x7A	; 122
 300:	55 e4       	ldi	r21, 0x45	; 69
 302:	0e 94 22 06 	call	0xc44	; 0xc44 <__mulsf3>
 306:	7b 01       	movw	r14, r22
 308:	8c 01       	movw	r16, r24
	if (__tmp < 1.0)
 30a:	20 e0       	ldi	r18, 0x00	; 0
 30c:	30 e0       	ldi	r19, 0x00	; 0
 30e:	40 e8       	ldi	r20, 0x80	; 128
 310:	5f e3       	ldi	r21, 0x3F	; 63
 312:	0e 94 64 05 	call	0xac8	; 0xac8 <__cmpsf2>
 316:	88 23       	and	r24, r24
 318:	1c f4       	brge	.+6      	; 0x320 <right_bck+0x54>
 31a:	61 e0       	ldi	r22, 0x01	; 1
 31c:	70 e0       	ldi	r23, 0x00	; 0
 31e:	24 c0       	rjmp	.+72     	; 0x368 <right_bck+0x9c>
		__ticks = 1;
	else if (__tmp > 65535)
 320:	c8 01       	movw	r24, r16
 322:	b7 01       	movw	r22, r14
 324:	20 e0       	ldi	r18, 0x00	; 0
 326:	3f ef       	ldi	r19, 0xFF	; 255
 328:	4f e7       	ldi	r20, 0x7F	; 127
 32a:	57 e4       	ldi	r21, 0x47	; 71
 32c:	0e 94 1e 06 	call	0xc3c	; 0xc3c <__gesf2>
 330:	18 16       	cp	r1, r24
 332:	b4 f4       	brge	.+44     	; 0x360 <right_bck+0x94>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 334:	c6 01       	movw	r24, r12
 336:	b5 01       	movw	r22, r10
 338:	20 e0       	ldi	r18, 0x00	; 0
 33a:	30 e0       	ldi	r19, 0x00	; 0
 33c:	40 e2       	ldi	r20, 0x20	; 32
 33e:	51 e4       	ldi	r21, 0x41	; 65
 340:	0e 94 22 06 	call	0xc44	; 0xc44 <__mulsf3>
 344:	0e 94 68 05 	call	0xad0	; 0xad0 <__fixunssfsi>
 348:	80 e9       	ldi	r24, 0x90	; 144
 34a:	91 e0       	ldi	r25, 0x01	; 1
 34c:	05 c0       	rjmp	.+10     	; 0x358 <right_bck+0x8c>
 34e:	fc 01       	movw	r30, r24
 350:	31 97       	sbiw	r30, 0x01	; 1
 352:	f1 f7       	brne	.-4      	; 0x350 <right_bck+0x84>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 354:	61 50       	subi	r22, 0x01	; 1
 356:	70 40       	sbci	r23, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 358:	61 15       	cp	r22, r1
 35a:	71 05       	cpc	r23, r1
 35c:	c1 f7       	brne	.-16     	; 0x34e <right_bck+0x82>
 35e:	07 c0       	rjmp	.+14     	; 0x36e <right_bck+0xa2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 360:	c8 01       	movw	r24, r16
 362:	b7 01       	movw	r22, r14
 364:	0e 94 68 05 	call	0xad0	; 0xad0 <__fixunssfsi>
 368:	cb 01       	movw	r24, r22
 36a:	01 97       	sbiw	r24, 0x01	; 1
 36c:	f1 f7       	brne	.-4      	; 0x36a <right_bck+0x9e>
PORTD=0x00;
 36e:	12 ba       	out	0x12, r1	; 18
 370:	80 e2       	ldi	r24, 0x20	; 32
 372:	9e e4       	ldi	r25, 0x4E	; 78
 374:	01 97       	sbiw	r24, 0x01	; 1
 376:	f1 f7       	brne	.-4      	; 0x374 <right_bck+0xa8>
_delay_ms(5);

}
 378:	1f 91       	pop	r17
 37a:	0f 91       	pop	r16
 37c:	ff 90       	pop	r15
 37e:	ef 90       	pop	r14
 380:	df 90       	pop	r13
 382:	cf 90       	pop	r12
 384:	bf 90       	pop	r11
 386:	af 90       	pop	r10
 388:	08 95       	ret

0000038a <left_fwd>:

void left_fwd(unsigned int speed);
void left_fwd(unsigned int speed)
{
 38a:	af 92       	push	r10
 38c:	bf 92       	push	r11
 38e:	cf 92       	push	r12
 390:	df 92       	push	r13
 392:	ef 92       	push	r14
 394:	ff 92       	push	r15
 396:	0f 93       	push	r16
 398:	1f 93       	push	r17
DDRD|=(1<<4)|(1<<5)|(1<<6)|(1<<7);
 39a:	21 b3       	in	r18, 0x11	; 17
 39c:	20 6f       	ori	r18, 0xF0	; 240
 39e:	21 bb       	out	0x11, r18	; 17
PORTD|=(1<<6);
 3a0:	96 9a       	sbi	0x12, 6	; 18
PORTD&=~((1<<5)|(1<<4)|(1<<7));
 3a2:	22 b3       	in	r18, 0x12	; 18
 3a4:	2f 74       	andi	r18, 0x4F	; 79
 3a6:	22 bb       	out	0x12, r18	; 18
_delay_ms(speed);
 3a8:	a0 e0       	ldi	r26, 0x00	; 0
 3aa:	b0 e0       	ldi	r27, 0x00	; 0
 3ac:	bc 01       	movw	r22, r24
 3ae:	cd 01       	movw	r24, r26
 3b0:	0e 94 94 05 	call	0xb28	; 0xb28 <__floatunsisf>
 3b4:	5b 01       	movw	r10, r22
 3b6:	6c 01       	movw	r12, r24
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
 3b8:	20 e0       	ldi	r18, 0x00	; 0
 3ba:	30 e0       	ldi	r19, 0x00	; 0
 3bc:	4a e7       	ldi	r20, 0x7A	; 122
 3be:	55 e4       	ldi	r21, 0x45	; 69
 3c0:	0e 94 22 06 	call	0xc44	; 0xc44 <__mulsf3>
 3c4:	7b 01       	movw	r14, r22
 3c6:	8c 01       	movw	r16, r24
	if (__tmp < 1.0)
 3c8:	20 e0       	ldi	r18, 0x00	; 0
 3ca:	30 e0       	ldi	r19, 0x00	; 0
 3cc:	40 e8       	ldi	r20, 0x80	; 128
 3ce:	5f e3       	ldi	r21, 0x3F	; 63
 3d0:	0e 94 64 05 	call	0xac8	; 0xac8 <__cmpsf2>
 3d4:	88 23       	and	r24, r24
 3d6:	1c f4       	brge	.+6      	; 0x3de <left_fwd+0x54>
 3d8:	61 e0       	ldi	r22, 0x01	; 1
 3da:	70 e0       	ldi	r23, 0x00	; 0
 3dc:	24 c0       	rjmp	.+72     	; 0x426 <left_fwd+0x9c>
		__ticks = 1;
	else if (__tmp > 65535)
 3de:	c8 01       	movw	r24, r16
 3e0:	b7 01       	movw	r22, r14
 3e2:	20 e0       	ldi	r18, 0x00	; 0
 3e4:	3f ef       	ldi	r19, 0xFF	; 255
 3e6:	4f e7       	ldi	r20, 0x7F	; 127
 3e8:	57 e4       	ldi	r21, 0x47	; 71
 3ea:	0e 94 1e 06 	call	0xc3c	; 0xc3c <__gesf2>
 3ee:	18 16       	cp	r1, r24
 3f0:	b4 f4       	brge	.+44     	; 0x41e <left_fwd+0x94>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 3f2:	c6 01       	movw	r24, r12
 3f4:	b5 01       	movw	r22, r10
 3f6:	20 e0       	ldi	r18, 0x00	; 0
 3f8:	30 e0       	ldi	r19, 0x00	; 0
 3fa:	40 e2       	ldi	r20, 0x20	; 32
 3fc:	51 e4       	ldi	r21, 0x41	; 65
 3fe:	0e 94 22 06 	call	0xc44	; 0xc44 <__mulsf3>
 402:	0e 94 68 05 	call	0xad0	; 0xad0 <__fixunssfsi>
 406:	80 e9       	ldi	r24, 0x90	; 144
 408:	91 e0       	ldi	r25, 0x01	; 1
 40a:	05 c0       	rjmp	.+10     	; 0x416 <left_fwd+0x8c>
 40c:	fc 01       	movw	r30, r24
 40e:	31 97       	sbiw	r30, 0x01	; 1
 410:	f1 f7       	brne	.-4      	; 0x40e <left_fwd+0x84>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 412:	61 50       	subi	r22, 0x01	; 1
 414:	70 40       	sbci	r23, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 416:	61 15       	cp	r22, r1
 418:	71 05       	cpc	r23, r1
 41a:	c1 f7       	brne	.-16     	; 0x40c <left_fwd+0x82>
 41c:	07 c0       	rjmp	.+14     	; 0x42c <left_fwd+0xa2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 41e:	c8 01       	movw	r24, r16
 420:	b7 01       	movw	r22, r14
 422:	0e 94 68 05 	call	0xad0	; 0xad0 <__fixunssfsi>
 426:	cb 01       	movw	r24, r22
 428:	01 97       	sbiw	r24, 0x01	; 1
 42a:	f1 f7       	brne	.-4      	; 0x428 <left_fwd+0x9e>
PORTD=0x00;
 42c:	12 ba       	out	0x12, r1	; 18
 42e:	80 e2       	ldi	r24, 0x20	; 32
 430:	9e e4       	ldi	r25, 0x4E	; 78
 432:	01 97       	sbiw	r24, 0x01	; 1
 434:	f1 f7       	brne	.-4      	; 0x432 <left_fwd+0xa8>
_delay_ms(5);

}
 436:	1f 91       	pop	r17
 438:	0f 91       	pop	r16
 43a:	ff 90       	pop	r15
 43c:	ef 90       	pop	r14
 43e:	df 90       	pop	r13
 440:	cf 90       	pop	r12
 442:	bf 90       	pop	r11
 444:	af 90       	pop	r10
 446:	08 95       	ret

00000448 <left_bck>:

void left_bck(unsigned int speed);
void left_bck(unsigned int speed)
{
 448:	af 92       	push	r10
 44a:	bf 92       	push	r11
 44c:	cf 92       	push	r12
 44e:	df 92       	push	r13
 450:	ef 92       	push	r14
 452:	ff 92       	push	r15
 454:	0f 93       	push	r16
 456:	1f 93       	push	r17
DDRD|=(1<<4)|(1<<5)|(1<<6)|(1<<7);
 458:	21 b3       	in	r18, 0x11	; 17
 45a:	20 6f       	ori	r18, 0xF0	; 240
 45c:	21 bb       	out	0x11, r18	; 17
PORTD|=(1<<7);
 45e:	97 9a       	sbi	0x12, 7	; 18
PORTD&=~((1<<5)|(1<<4)|(1<<6));
 460:	22 b3       	in	r18, 0x12	; 18
 462:	2f 78       	andi	r18, 0x8F	; 143
 464:	22 bb       	out	0x12, r18	; 18
_delay_ms(speed);
 466:	a0 e0       	ldi	r26, 0x00	; 0
 468:	b0 e0       	ldi	r27, 0x00	; 0
 46a:	bc 01       	movw	r22, r24
 46c:	cd 01       	movw	r24, r26
 46e:	0e 94 94 05 	call	0xb28	; 0xb28 <__floatunsisf>
 472:	5b 01       	movw	r10, r22
 474:	6c 01       	movw	r12, r24
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
 476:	20 e0       	ldi	r18, 0x00	; 0
 478:	30 e0       	ldi	r19, 0x00	; 0
 47a:	4a e7       	ldi	r20, 0x7A	; 122
 47c:	55 e4       	ldi	r21, 0x45	; 69
 47e:	0e 94 22 06 	call	0xc44	; 0xc44 <__mulsf3>
 482:	7b 01       	movw	r14, r22
 484:	8c 01       	movw	r16, r24
	if (__tmp < 1.0)
 486:	20 e0       	ldi	r18, 0x00	; 0
 488:	30 e0       	ldi	r19, 0x00	; 0
 48a:	40 e8       	ldi	r20, 0x80	; 128
 48c:	5f e3       	ldi	r21, 0x3F	; 63
 48e:	0e 94 64 05 	call	0xac8	; 0xac8 <__cmpsf2>
 492:	88 23       	and	r24, r24
 494:	1c f4       	brge	.+6      	; 0x49c <__stack+0x3d>
 496:	61 e0       	ldi	r22, 0x01	; 1
 498:	70 e0       	ldi	r23, 0x00	; 0
 49a:	24 c0       	rjmp	.+72     	; 0x4e4 <__stack+0x85>
		__ticks = 1;
	else if (__tmp > 65535)
 49c:	c8 01       	movw	r24, r16
 49e:	b7 01       	movw	r22, r14
 4a0:	20 e0       	ldi	r18, 0x00	; 0
 4a2:	3f ef       	ldi	r19, 0xFF	; 255
 4a4:	4f e7       	ldi	r20, 0x7F	; 127
 4a6:	57 e4       	ldi	r21, 0x47	; 71
 4a8:	0e 94 1e 06 	call	0xc3c	; 0xc3c <__gesf2>
 4ac:	18 16       	cp	r1, r24
 4ae:	b4 f4       	brge	.+44     	; 0x4dc <__stack+0x7d>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 4b0:	c6 01       	movw	r24, r12
 4b2:	b5 01       	movw	r22, r10
 4b4:	20 e0       	ldi	r18, 0x00	; 0
 4b6:	30 e0       	ldi	r19, 0x00	; 0
 4b8:	40 e2       	ldi	r20, 0x20	; 32
 4ba:	51 e4       	ldi	r21, 0x41	; 65
 4bc:	0e 94 22 06 	call	0xc44	; 0xc44 <__mulsf3>
 4c0:	0e 94 68 05 	call	0xad0	; 0xad0 <__fixunssfsi>
 4c4:	80 e9       	ldi	r24, 0x90	; 144
 4c6:	91 e0       	ldi	r25, 0x01	; 1
 4c8:	05 c0       	rjmp	.+10     	; 0x4d4 <__stack+0x75>
 4ca:	fc 01       	movw	r30, r24
 4cc:	31 97       	sbiw	r30, 0x01	; 1
 4ce:	f1 f7       	brne	.-4      	; 0x4cc <__stack+0x6d>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 4d0:	61 50       	subi	r22, 0x01	; 1
 4d2:	70 40       	sbci	r23, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 4d4:	61 15       	cp	r22, r1
 4d6:	71 05       	cpc	r23, r1
 4d8:	c1 f7       	brne	.-16     	; 0x4ca <__stack+0x6b>
 4da:	07 c0       	rjmp	.+14     	; 0x4ea <__stack+0x8b>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 4dc:	c8 01       	movw	r24, r16
 4de:	b7 01       	movw	r22, r14
 4e0:	0e 94 68 05 	call	0xad0	; 0xad0 <__fixunssfsi>
 4e4:	cb 01       	movw	r24, r22
 4e6:	01 97       	sbiw	r24, 0x01	; 1
 4e8:	f1 f7       	brne	.-4      	; 0x4e6 <__stack+0x87>
PORTD=0x00;
 4ea:	12 ba       	out	0x12, r1	; 18
 4ec:	80 e2       	ldi	r24, 0x20	; 32
 4ee:	9e e4       	ldi	r25, 0x4E	; 78
 4f0:	01 97       	sbiw	r24, 0x01	; 1
 4f2:	f1 f7       	brne	.-4      	; 0x4f0 <__stack+0x91>
_delay_ms(5);

}
 4f4:	1f 91       	pop	r17
 4f6:	0f 91       	pop	r16
 4f8:	ff 90       	pop	r15
 4fa:	ef 90       	pop	r14
 4fc:	df 90       	pop	r13
 4fe:	cf 90       	pop	r12
 500:	bf 90       	pop	r11
 502:	af 90       	pop	r10
 504:	08 95       	ret

00000506 <halt>:

void halt(void);
void halt(void)
{
DDRD|=(1<<4)|(1<<5)|(1<<6)|(1<<7);
 506:	81 b3       	in	r24, 0x11	; 17
 508:	80 6f       	ori	r24, 0xF0	; 240
 50a:	81 bb       	out	0x11, r24	; 17
PORTD=0x00;
 50c:	12 ba       	out	0x12, r1	; 18
}
 50e:	08 95       	ret

00000510 <right_align>:

void right_align(void);
void right_align(void)
{
right_fwd(1);
 510:	81 e0       	ldi	r24, 0x01	; 1
 512:	90 e0       	ldi	r25, 0x00	; 0
 514:	0e 94 07 01 	call	0x20e	; 0x20e <right_fwd>
if((s2&&(s4==1)))
 518:	cf 99       	sbic	0x19, 7	; 25
 51a:	06 c0       	rjmp	.+12     	; 0x528 <right_align+0x18>
 51c:	ca 99       	sbic	0x19, 2	; 25
 51e:	04 c0       	rjmp	.+8      	; 0x528 <right_align+0x18>
}

void halt(void);
void halt(void)
{
DDRD|=(1<<4)|(1<<5)|(1<<6)|(1<<7);
 520:	81 b3       	in	r24, 0x11	; 17
 522:	80 6f       	ori	r24, 0xF0	; 240
 524:	81 bb       	out	0x11, r24	; 17
PORTD=0x00;
 526:	12 ba       	out	0x12, r1	; 18
 528:	08 95       	ret

0000052a <left_align>:

void left_align(void);
void left_align(void)
{

if(!((s1))&&((s2))&&(!(s3))&&((s4))&&((s5)))
 52a:	c8 9b       	sbis	0x19, 0	; 25
 52c:	0c c0       	rjmp	.+24     	; 0x546 <left_align+0x1c>
 52e:	cf 99       	sbic	0x19, 7	; 25
 530:	0a c0       	rjmp	.+20     	; 0x546 <left_align+0x1c>
 532:	ce 9b       	sbis	0x19, 6	; 25
 534:	08 c0       	rjmp	.+16     	; 0x546 <left_align+0x1c>
 536:	ca 99       	sbic	0x19, 2	; 25
 538:	06 c0       	rjmp	.+12     	; 0x546 <left_align+0x1c>
 53a:	c9 99       	sbic	0x19, 1	; 25
 53c:	04 c0       	rjmp	.+8      	; 0x546 <left_align+0x1c>
{
left_fwd(50);
 53e:	82 e3       	ldi	r24, 0x32	; 50
 540:	90 e0       	ldi	r25, 0x00	; 0
 542:	0e 94 c5 01 	call	0x38a	; 0x38a <left_fwd>
}

void halt(void);
void halt(void)
{
DDRD|=(1<<4)|(1<<5)|(1<<6)|(1<<7);
 546:	81 b3       	in	r24, 0x11	; 17
 548:	80 6f       	ori	r24, 0xF0	; 240
 54a:	81 bb       	out	0x11, r24	; 17
PORTD=0x00;
 54c:	12 ba       	out	0x12, r1	; 18
if(!((s1))&&((s2))&&(!(s3))&&((s4))&&((s5)))
{
left_fwd(50);
}
halt();
}
 54e:	08 95       	ret

00000550 <uturn>:


void uturn(void);
void uturn(void)
{
DDRD|=(1<<4)|(1<<5)|(1<<6)|(1<<7);
 550:	81 b3       	in	r24, 0x11	; 17
 552:	80 6f       	ori	r24, 0xF0	; 240
 554:	81 bb       	out	0x11, r24	; 17

PORTD|=((1<<7)|(1<<4));
 556:	82 b3       	in	r24, 0x12	; 18
 558:	80 69       	ori	r24, 0x90	; 144
 55a:	82 bb       	out	0x12, r24	; 18
PORTD&=~((1<<6)|(1<<5));
 55c:	82 b3       	in	r24, 0x12	; 18
 55e:	8f 79       	andi	r24, 0x9F	; 159
 560:	82 bb       	out	0x12, r24	; 18

}
 562:	08 95       	ret

00000564 <delay_us>:
void lcd_gotoxy1(unsigned char pos);
void lcd_gotoxy2(unsigned char pos);
void WaitMs(unsigned int ms);

void delay_us(unsigned int time)
{
 564:	ac 01       	movw	r20, r24
 566:	30 91 8e 00 	lds	r19, 0x008E
 56a:	20 e0       	ldi	r18, 0x00	; 0
 56c:	02 c0       	rjmp	.+4      	; 0x572 <delay_us+0xe>
	for(j=0;j<time;j++)
 56e:	2f 5f       	subi	r18, 0xFF	; 255
 570:	3a e0       	ldi	r19, 0x0A	; 10
 572:	82 2f       	mov	r24, r18
 574:	90 e0       	ldi	r25, 0x00	; 0
 576:	84 17       	cp	r24, r20
 578:	95 07       	cpc	r25, r21
 57a:	c8 f3       	brcs	.-14     	; 0x56e <delay_us+0xa>
 57c:	30 93 8e 00 	sts	0x008E, r19
 580:	20 93 8f 00 	sts	0x008F, r18
	{
		for(k=0;k<10;k++)
		{};
	}
}
 584:	08 95       	ret

00000586 <toggleE>:

void toggleE(void)
{
delay_us(100);
 586:	84 e6       	ldi	r24, 0x64	; 100
 588:	90 e0       	ldi	r25, 0x00	; 0
 58a:	0e 94 b2 02 	call	0x564	; 0x564 <delay_us>
SETBIT(PORTC,2);
 58e:	aa 9a       	sbi	0x15, 2	; 21
delay_us(100);
 590:	84 e6       	ldi	r24, 0x64	; 100
 592:	90 e0       	ldi	r25, 0x00	; 0
 594:	0e 94 b2 02 	call	0x564	; 0x564 <delay_us>
CLEARBIT(PORTC,2);
 598:	aa 98       	cbi	0x15, 2	; 21
}
 59a:	08 95       	ret

0000059c <lcd_cmd>:

void lcd_cmd(unsigned char cmd)
{
 59c:	1f 93       	push	r17
 59e:	18 2f       	mov	r17, r24
	CLEARBIT(PORTC,0+2);    // RS to 0 means select COmmand register, E to 0 ..
 5a0:	aa 98       	cbi	0x15, 2	; 21
	PORTC=(cmd&0xF0)|(PORTC&(1<<3))|(PORTC&(1<<1));			
 5a2:	95 b3       	in	r25, 0x15	; 21
 5a4:	85 b3       	in	r24, 0x15	; 21
 5a6:	82 70       	andi	r24, 0x02	; 2
 5a8:	98 70       	andi	r25, 0x08	; 8
 5aa:	89 2b       	or	r24, r25
 5ac:	91 2f       	mov	r25, r17
 5ae:	90 7f       	andi	r25, 0xF0	; 240
 5b0:	89 2b       	or	r24, r25
 5b2:	85 bb       	out	0x15, r24	; 21
	toggleE();
 5b4:	0e 94 c3 02 	call	0x586	; 0x586 <toggleE>
	PORTC=((cmd&(0x0F))*16)|(PORTC&(1<<3))|(PORTC&(1<<1));	
 5b8:	95 b3       	in	r25, 0x15	; 21
 5ba:	85 b3       	in	r24, 0x15	; 21
 5bc:	82 70       	andi	r24, 0x02	; 2
 5be:	98 70       	andi	r25, 0x08	; 8
 5c0:	89 2b       	or	r24, r25
 5c2:	12 95       	swap	r17
 5c4:	10 7f       	andi	r17, 0xF0	; 240
 5c6:	81 2b       	or	r24, r17
 5c8:	85 bb       	out	0x15, r24	; 21
	toggleE();
 5ca:	0e 94 c3 02 	call	0x586	; 0x586 <toggleE>
}
 5ce:	1f 91       	pop	r17
 5d0:	08 95       	ret

000005d2 <lcd_putchar>:
	lcd_cmd(LINE1);
	WaitMs(15);
}

void lcd_putchar(unsigned char sig)
{
 5d2:	1f 93       	push	r17
 5d4:	18 2f       	mov	r17, r24
	PORTC=(sig&0xF0)|(PORTC&(1<<3))|(PORTC&(1<<1));						
 5d6:	95 b3       	in	r25, 0x15	; 21
 5d8:	85 b3       	in	r24, 0x15	; 21
 5da:	82 70       	andi	r24, 0x02	; 2
 5dc:	98 70       	andi	r25, 0x08	; 8
 5de:	89 2b       	or	r24, r25
 5e0:	91 2f       	mov	r25, r17
 5e2:	90 7f       	andi	r25, 0xF0	; 240
 5e4:	89 2b       	or	r24, r25
 5e6:	85 bb       	out	0x15, r24	; 21
	SETBIT(PORTC,0);		// selects data register RS=1
 5e8:	a8 9a       	sbi	0x15, 0	; 21
	toggleE();
 5ea:	0e 94 c3 02 	call	0x586	; 0x586 <toggleE>
	PORTC=((sig&(0x0F))*16)|(PORTC&(1<<3))|(PORTC&(1<<1));
 5ee:	95 b3       	in	r25, 0x15	; 21
 5f0:	85 b3       	in	r24, 0x15	; 21
 5f2:	82 70       	andi	r24, 0x02	; 2
 5f4:	98 70       	andi	r25, 0x08	; 8
 5f6:	89 2b       	or	r24, r25
 5f8:	12 95       	swap	r17
 5fa:	10 7f       	andi	r17, 0xF0	; 240
 5fc:	81 2b       	or	r24, r17
 5fe:	85 bb       	out	0x15, r24	; 21
	SETBIT(PORTC,0);		// selects data register RS=1
 600:	a8 9a       	sbi	0x15, 0	; 21
	toggleE();
 602:	0e 94 c3 02 	call	0x586	; 0x586 <toggleE>
}
 606:	1f 91       	pop	r17
 608:	08 95       	ret

0000060a <lcd_string>:
		lcd_putchar(single);
	}
}

void lcd_string(unsigned char str[32])
{
 60a:	ef 92       	push	r14
 60c:	ff 92       	push	r15
 60e:	1f 93       	push	r17
 610:	cf 93       	push	r28
 612:	df 93       	push	r29
 614:	7c 01       	movw	r14, r24
	unsigned char k=0;
	CLEARBIT(PORTC,2);      // Disable the LCD
 616:	aa 98       	cbi	0x15, 2	; 21
 618:	10 e0       	ldi	r17, 0x00	; 0
 61a:	1f c0       	rjmp	.+62     	; 0x65a <lcd_string+0x50>
	while(str[k]!='\0')	//Till null character is encountered
		{
			if(k==16)
 61c:	10 31       	cpi	r17, 0x10	; 16
 61e:	19 f4       	brne	.+6      	; 0x626 <lcd_string+0x1c>
			{
			lcd_cmd(LINE2);
 620:	80 ec       	ldi	r24, 0xC0	; 192
 622:	0e 94 ce 02 	call	0x59c	; 0x59c <lcd_cmd>
			}
			PORTC=((str[k])&0xF0)|(PORTC&(1<<3))|(PORTC&(1<<1));
 626:	85 b3       	in	r24, 0x15	; 21
 628:	95 b3       	in	r25, 0x15	; 21
 62a:	92 70       	andi	r25, 0x02	; 2
 62c:	88 70       	andi	r24, 0x08	; 8
 62e:	98 2b       	or	r25, r24
 630:	88 81       	ld	r24, Y
 632:	80 7f       	andi	r24, 0xF0	; 240
 634:	98 2b       	or	r25, r24
 636:	95 bb       	out	0x15, r25	; 21
			SETBIT(PORTC,0);			// selects data register RS=1
 638:	a8 9a       	sbi	0x15, 0	; 21
			toggleE();
 63a:	0e 94 c3 02 	call	0x586	; 0x586 <toggleE>
			PORTC=((str[k]&(0x0F))*16)|(PORTC&(1<<3))|(PORTC&(1<<1));
 63e:	85 b3       	in	r24, 0x15	; 21
 640:	95 b3       	in	r25, 0x15	; 21
 642:	92 70       	andi	r25, 0x02	; 2
 644:	88 70       	andi	r24, 0x08	; 8
 646:	98 2b       	or	r25, r24
 648:	88 81       	ld	r24, Y
 64a:	82 95       	swap	r24
 64c:	80 7f       	andi	r24, 0xF0	; 240
 64e:	89 2b       	or	r24, r25
 650:	85 bb       	out	0x15, r24	; 21
			SETBIT(PORTC,0);			// selects data register RS=1
 652:	a8 9a       	sbi	0x15, 0	; 21
			toggleE();
 654:	0e 94 c3 02 	call	0x586	; 0x586 <toggleE>
			k++;
 658:	1f 5f       	subi	r17, 0xFF	; 255

void lcd_string(unsigned char str[32])
{
	unsigned char k=0;
	CLEARBIT(PORTC,2);      // Disable the LCD
	while(str[k]!='\0')	//Till null character is encountered
 65a:	e7 01       	movw	r28, r14
 65c:	c1 0f       	add	r28, r17
 65e:	d1 1d       	adc	r29, r1
 660:	88 81       	ld	r24, Y
 662:	88 23       	and	r24, r24
 664:	d9 f6       	brne	.-74     	; 0x61c <lcd_string+0x12>
			PORTC=((str[k]&(0x0F))*16)|(PORTC&(1<<3))|(PORTC&(1<<1));
			SETBIT(PORTC,0);			// selects data register RS=1
			toggleE();
			k++;
		}
}
 666:	df 91       	pop	r29
 668:	cf 91       	pop	r28
 66a:	1f 91       	pop	r17
 66c:	ff 90       	pop	r15
 66e:	ef 90       	pop	r14
 670:	08 95       	ret

00000672 <lcd_gotoxy1>:
	lcd_char(O+0x30);
}

void lcd_gotoxy1(unsigned char pos)
{
	lcd_cmd(LINE1+pos);     // write pos=0 if u want to select 1st location
 672:	80 58       	subi	r24, 0x80	; 128
 674:	0e 94 ce 02 	call	0x59c	; 0x59c <lcd_cmd>
}
 678:	08 95       	ret

0000067a <lcd_gotoxy2>:

void lcd_gotoxy2(unsigned char pos)
{
	lcd_cmd(LINE2+pos);		 // write pos=0 if u want to select 1st location
 67a:	80 54       	subi	r24, 0x40	; 64
 67c:	0e 94 ce 02 	call	0x59c	; 0x59c <lcd_cmd>
}
 680:	08 95       	ret

00000682 <lcd_char>:
}

void lcd_char(unsigned char single)
{
	int i;
	if(single =='\t')
 682:	89 30       	cpi	r24, 0x09	; 9
 684:	29 f4       	brne	.+10     	; 0x690 <lcd_char+0xe>
	{
		for(i =0 ; i<2 ; i++)
		{	
		lcd_putchar(' ');
 686:	80 e2       	ldi	r24, 0x20	; 32
 688:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <lcd_putchar>
 68c:	80 e2       	ldi	r24, 0x20	; 32
 68e:	06 c0       	rjmp	.+12     	; 0x69c <lcd_char+0x1a>
		}
	}
	else if(single=='\n')
 690:	8a 30       	cpi	r24, 0x0A	; 10
 692:	21 f4       	brne	.+8      	; 0x69c <lcd_char+0x1a>
	{
		lcd_gotoxy2(0);	
 694:	80 e0       	ldi	r24, 0x00	; 0
 696:	0e 94 3d 03 	call	0x67a	; 0x67a <lcd_gotoxy2>
 69a:	08 95       	ret
	}
	else 
	{
		lcd_putchar(single);
 69c:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <lcd_putchar>
 6a0:	08 95       	ret

000006a2 <lcd_showvalue>:
			k++;
		}
}

void lcd_showvalue(unsigned char num)	//prints the decimal 3digit value of num
{
 6a2:	ef 92       	push	r14
 6a4:	ff 92       	push	r15
 6a6:	0f 93       	push	r16
 6a8:	1f 93       	push	r17
 6aa:	18 2f       	mov	r17, r24
	unsigned char H=0,T=0,O=0;
	H=num/100;
 6ac:	64 e6       	ldi	r22, 0x64	; 100
 6ae:	0e 94 ad 06 	call	0xd5a	; 0xd5a <__udivmodqi4>
 6b2:	48 2f       	mov	r20, r24
	T=(num - (H*100))/10;
 6b4:	28 2f       	mov	r18, r24
 6b6:	30 e0       	ldi	r19, 0x00	; 0
 6b8:	8c e9       	ldi	r24, 0x9C	; 156
 6ba:	9f ef       	ldi	r25, 0xFF	; 255
 6bc:	28 9f       	mul	r18, r24
 6be:	70 01       	movw	r14, r0
 6c0:	29 9f       	mul	r18, r25
 6c2:	f0 0c       	add	r15, r0
 6c4:	38 9f       	mul	r19, r24
 6c6:	f0 0c       	add	r15, r0
 6c8:	11 24       	eor	r1, r1
 6ca:	c7 01       	movw	r24, r14
 6cc:	81 0f       	add	r24, r17
 6ce:	91 1d       	adc	r25, r1
 6d0:	6a e0       	ldi	r22, 0x0A	; 10
 6d2:	70 e0       	ldi	r23, 0x00	; 0
 6d4:	0e 94 b9 06 	call	0xd72	; 0xd72 <__divmodhi4>
 6d8:	06 2f       	mov	r16, r22
	O=(num - (H*100) - (T*10));
	
	lcd_char(H+0x30);
 6da:	84 2f       	mov	r24, r20
 6dc:	80 5d       	subi	r24, 0xD0	; 208
 6de:	0e 94 41 03 	call	0x682	; 0x682 <lcd_char>
	lcd_char(T+0x30);
 6e2:	80 2f       	mov	r24, r16
 6e4:	80 5d       	subi	r24, 0xD0	; 208
 6e6:	0e 94 41 03 	call	0x682	; 0x682 <lcd_char>
	lcd_char(O+0x30);
 6ea:	10 5d       	subi	r17, 0xD0	; 208
 6ec:	1e 0d       	add	r17, r14
 6ee:	86 ef       	ldi	r24, 0xF6	; 246
 6f0:	9f ef       	ldi	r25, 0xFF	; 255
 6f2:	08 9f       	mul	r16, r24
 6f4:	00 2d       	mov	r16, r0
 6f6:	11 24       	eor	r1, r1
 6f8:	80 2f       	mov	r24, r16
 6fa:	81 0f       	add	r24, r17
 6fc:	0e 94 41 03 	call	0x682	; 0x682 <lcd_char>
}
 700:	1f 91       	pop	r17
 702:	0f 91       	pop	r16
 704:	ff 90       	pop	r15
 706:	ef 90       	pop	r14
 708:	08 95       	ret

0000070a <WaitMs>:
	lcd_cmd(LINE2+pos);		 // write pos=0 if u want to select 1st location
}

/* waits (pauses) for ms milliseconds (assumes clock at 16MHz) */
void WaitMs(unsigned int ms)
{
 70a:	0a c0       	rjmp	.+20     	; 0x720 <WaitMs+0x16>
	int i;

	while (ms-- > 0)
 70c:	20 e0       	ldi	r18, 0x00	; 0
 70e:	30 e0       	ldi	r19, 0x00	; 0
	{
		/* 16384 (16k) clock cycles for 1ms; each time through loop
		   is 5 cycles (for loop control + nop) */
		for (i = 0; i < 3276; ++i)
			asm("nop");
 710:	00 00       	nop

	while (ms-- > 0)
	{
		/* 16384 (16k) clock cycles for 1ms; each time through loop
		   is 5 cycles (for loop control + nop) */
		for (i = 0; i < 3276; ++i)
 712:	2f 5f       	subi	r18, 0xFF	; 255
 714:	3f 4f       	sbci	r19, 0xFF	; 255
 716:	4c e0       	ldi	r20, 0x0C	; 12
 718:	2c 3c       	cpi	r18, 0xCC	; 204
 71a:	34 07       	cpc	r19, r20
 71c:	c9 f7       	brne	.-14     	; 0x710 <WaitMs+0x6>
 71e:	01 97       	sbiw	r24, 0x01	; 1
/* waits (pauses) for ms milliseconds (assumes clock at 16MHz) */
void WaitMs(unsigned int ms)
{
	int i;

	while (ms-- > 0)
 720:	00 97       	sbiw	r24, 0x00	; 0
 722:	a1 f7       	brne	.-24     	; 0x70c <WaitMs+0x2>
		/* 16384 (16k) clock cycles for 1ms; each time through loop
		   is 5 cycles (for loop control + nop) */
		for (i = 0; i < 3276; ++i)
			asm("nop");
	}
}
 724:	08 95       	ret

00000726 <lcd_init>:
	toggleE();
}

void lcd_init(void)	//init the lcd 
{	
	DDRC=0xFF;		// declare it as an o/p port
 726:	8f ef       	ldi	r24, 0xFF	; 255
 728:	84 bb       	out	0x14, r24	; 20
	WaitMs(15);		// Given in datasheet ( Cmd for selecting 4 bit mode )
 72a:	8f e0       	ldi	r24, 0x0F	; 15
 72c:	90 e0       	ldi	r25, 0x00	; 0
 72e:	0e 94 85 03 	call	0x70a	; 0x70a <WaitMs>
	lcd_cmd(0x03);
 732:	83 e0       	ldi	r24, 0x03	; 3
 734:	0e 94 ce 02 	call	0x59c	; 0x59c <lcd_cmd>
	WaitMs(45);
 738:	8d e2       	ldi	r24, 0x2D	; 45
 73a:	90 e0       	ldi	r25, 0x00	; 0
 73c:	0e 94 85 03 	call	0x70a	; 0x70a <WaitMs>
	lcd_cmd(0x02);
 740:	82 e0       	ldi	r24, 0x02	; 2
 742:	0e 94 ce 02 	call	0x59c	; 0x59c <lcd_cmd>
	WaitMs(15);
 746:	8f e0       	ldi	r24, 0x0F	; 15
 748:	90 e0       	ldi	r25, 0x00	; 0
 74a:	0e 94 85 03 	call	0x70a	; 0x70a <WaitMs>
	CLEARBIT(PORTC,0+2);   // RS to 0 means select COmmand register, E to 0 ..
 74e:	aa 98       	cbi	0x15, 2	; 21
	lcd_cmd(0x01);     // Cmd for clear display
 750:	81 e0       	ldi	r24, 0x01	; 1
 752:	0e 94 ce 02 	call	0x59c	; 0x59c <lcd_cmd>
	lcd_cmd(0x0F);		// Cmd for display ON and cursor blinking
 756:	8f e0       	ldi	r24, 0x0F	; 15
 758:	0e 94 ce 02 	call	0x59c	; 0x59c <lcd_cmd>
	lcd_cmd(0x02);		// Cmd for returning home
 75c:	82 e0       	ldi	r24, 0x02	; 2
 75e:	0e 94 ce 02 	call	0x59c	; 0x59c <lcd_cmd>
	lcd_cmd(LINE1);
 762:	80 e8       	ldi	r24, 0x80	; 128
 764:	0e 94 ce 02 	call	0x59c	; 0x59c <lcd_cmd>
	WaitMs(15);
 768:	8f e0       	ldi	r24, 0x0F	; 15
 76a:	90 e0       	ldi	r25, 0x00	; 0
 76c:	0e 94 85 03 	call	0x70a	; 0x70a <WaitMs>
}
 770:	08 95       	ret

00000772 <buzzer>:
usart_transmit(channel);
_delay_ms(400);
}
void buzzer(unsigned int time);
void buzzer(unsigned int time)
{
 772:	af 92       	push	r10
 774:	bf 92       	push	r11
 776:	cf 92       	push	r12
 778:	df 92       	push	r13
 77a:	ef 92       	push	r14
 77c:	ff 92       	push	r15
 77e:	0f 93       	push	r16
 780:	1f 93       	push	r17
DDRC|=(1<<3);
 782:	a3 9a       	sbi	0x14, 3	; 20
PORTC|=(1<<3);
 784:	ab 9a       	sbi	0x15, 3	; 21
_delay_ms(time);
 786:	a0 e0       	ldi	r26, 0x00	; 0
 788:	b0 e0       	ldi	r27, 0x00	; 0
 78a:	bc 01       	movw	r22, r24
 78c:	cd 01       	movw	r24, r26
 78e:	0e 94 94 05 	call	0xb28	; 0xb28 <__floatunsisf>
 792:	5b 01       	movw	r10, r22
 794:	6c 01       	movw	r12, r24
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
 796:	20 e0       	ldi	r18, 0x00	; 0
 798:	30 e0       	ldi	r19, 0x00	; 0
 79a:	4a e7       	ldi	r20, 0x7A	; 122
 79c:	55 e4       	ldi	r21, 0x45	; 69
 79e:	0e 94 22 06 	call	0xc44	; 0xc44 <__mulsf3>
 7a2:	7b 01       	movw	r14, r22
 7a4:	8c 01       	movw	r16, r24
	if (__tmp < 1.0)
 7a6:	20 e0       	ldi	r18, 0x00	; 0
 7a8:	30 e0       	ldi	r19, 0x00	; 0
 7aa:	40 e8       	ldi	r20, 0x80	; 128
 7ac:	5f e3       	ldi	r21, 0x3F	; 63
 7ae:	0e 94 64 05 	call	0xac8	; 0xac8 <__cmpsf2>
 7b2:	88 23       	and	r24, r24
 7b4:	1c f4       	brge	.+6      	; 0x7bc <buzzer+0x4a>
 7b6:	61 e0       	ldi	r22, 0x01	; 1
 7b8:	70 e0       	ldi	r23, 0x00	; 0
 7ba:	24 c0       	rjmp	.+72     	; 0x804 <buzzer+0x92>
		__ticks = 1;
	else if (__tmp > 65535)
 7bc:	c8 01       	movw	r24, r16
 7be:	b7 01       	movw	r22, r14
 7c0:	20 e0       	ldi	r18, 0x00	; 0
 7c2:	3f ef       	ldi	r19, 0xFF	; 255
 7c4:	4f e7       	ldi	r20, 0x7F	; 127
 7c6:	57 e4       	ldi	r21, 0x47	; 71
 7c8:	0e 94 1e 06 	call	0xc3c	; 0xc3c <__gesf2>
 7cc:	18 16       	cp	r1, r24
 7ce:	b4 f4       	brge	.+44     	; 0x7fc <buzzer+0x8a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 7d0:	c6 01       	movw	r24, r12
 7d2:	b5 01       	movw	r22, r10
 7d4:	20 e0       	ldi	r18, 0x00	; 0
 7d6:	30 e0       	ldi	r19, 0x00	; 0
 7d8:	40 e2       	ldi	r20, 0x20	; 32
 7da:	51 e4       	ldi	r21, 0x41	; 65
 7dc:	0e 94 22 06 	call	0xc44	; 0xc44 <__mulsf3>
 7e0:	0e 94 68 05 	call	0xad0	; 0xad0 <__fixunssfsi>
 7e4:	80 e9       	ldi	r24, 0x90	; 144
 7e6:	91 e0       	ldi	r25, 0x01	; 1
 7e8:	05 c0       	rjmp	.+10     	; 0x7f4 <buzzer+0x82>
 7ea:	fc 01       	movw	r30, r24
 7ec:	31 97       	sbiw	r30, 0x01	; 1
 7ee:	f1 f7       	brne	.-4      	; 0x7ec <buzzer+0x7a>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 7f0:	61 50       	subi	r22, 0x01	; 1
 7f2:	70 40       	sbci	r23, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 7f4:	61 15       	cp	r22, r1
 7f6:	71 05       	cpc	r23, r1
 7f8:	c1 f7       	brne	.-16     	; 0x7ea <buzzer+0x78>
 7fa:	07 c0       	rjmp	.+14     	; 0x80a <buzzer+0x98>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 7fc:	c8 01       	movw	r24, r16
 7fe:	b7 01       	movw	r22, r14
 800:	0e 94 68 05 	call	0xad0	; 0xad0 <__fixunssfsi>
 804:	cb 01       	movw	r24, r22
 806:	01 97       	sbiw	r24, 0x01	; 1
 808:	f1 f7       	brne	.-4      	; 0x806 <buzzer+0x94>
PORTC&=~(1<<3);
 80a:	ab 98       	cbi	0x15, 3	; 21
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
 80c:	c8 01       	movw	r24, r16
 80e:	b7 01       	movw	r22, r14
 810:	20 e0       	ldi	r18, 0x00	; 0
 812:	30 e0       	ldi	r19, 0x00	; 0
 814:	40 e8       	ldi	r20, 0x80	; 128
 816:	5f e3       	ldi	r21, 0x3F	; 63
 818:	0e 94 64 05 	call	0xac8	; 0xac8 <__cmpsf2>
 81c:	88 23       	and	r24, r24
 81e:	1c f4       	brge	.+6      	; 0x826 <buzzer+0xb4>
 820:	61 e0       	ldi	r22, 0x01	; 1
 822:	70 e0       	ldi	r23, 0x00	; 0
 824:	24 c0       	rjmp	.+72     	; 0x86e <buzzer+0xfc>
		__ticks = 1;
	else if (__tmp > 65535)
 826:	c8 01       	movw	r24, r16
 828:	b7 01       	movw	r22, r14
 82a:	20 e0       	ldi	r18, 0x00	; 0
 82c:	3f ef       	ldi	r19, 0xFF	; 255
 82e:	4f e7       	ldi	r20, 0x7F	; 127
 830:	57 e4       	ldi	r21, 0x47	; 71
 832:	0e 94 1e 06 	call	0xc3c	; 0xc3c <__gesf2>
 836:	18 16       	cp	r1, r24
 838:	b4 f4       	brge	.+44     	; 0x866 <buzzer+0xf4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 83a:	c6 01       	movw	r24, r12
 83c:	b5 01       	movw	r22, r10
 83e:	20 e0       	ldi	r18, 0x00	; 0
 840:	30 e0       	ldi	r19, 0x00	; 0
 842:	40 e2       	ldi	r20, 0x20	; 32
 844:	51 e4       	ldi	r21, 0x41	; 65
 846:	0e 94 22 06 	call	0xc44	; 0xc44 <__mulsf3>
 84a:	0e 94 68 05 	call	0xad0	; 0xad0 <__fixunssfsi>
 84e:	80 e9       	ldi	r24, 0x90	; 144
 850:	91 e0       	ldi	r25, 0x01	; 1
 852:	05 c0       	rjmp	.+10     	; 0x85e <buzzer+0xec>
 854:	fc 01       	movw	r30, r24
 856:	31 97       	sbiw	r30, 0x01	; 1
 858:	f1 f7       	brne	.-4      	; 0x856 <buzzer+0xe4>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 85a:	61 50       	subi	r22, 0x01	; 1
 85c:	70 40       	sbci	r23, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 85e:	61 15       	cp	r22, r1
 860:	71 05       	cpc	r23, r1
 862:	c1 f7       	brne	.-16     	; 0x854 <buzzer+0xe2>
 864:	07 c0       	rjmp	.+14     	; 0x874 <buzzer+0x102>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 866:	c8 01       	movw	r24, r16
 868:	b7 01       	movw	r22, r14
 86a:	0e 94 68 05 	call	0xad0	; 0xad0 <__fixunssfsi>
 86e:	cb 01       	movw	r24, r22
 870:	01 97       	sbiw	r24, 0x01	; 1
 872:	f1 f7       	brne	.-4      	; 0x870 <buzzer+0xfe>
_delay_ms(time);
}
 874:	1f 91       	pop	r17
 876:	0f 91       	pop	r16
 878:	ff 90       	pop	r15
 87a:	ef 90       	pop	r14
 87c:	df 90       	pop	r13
 87e:	cf 90       	pop	r12
 880:	bf 90       	pop	r11
 882:	af 90       	pop	r10
 884:	08 95       	ret

00000886 <buzzer_off>:

void buzzer_off(void);
void buzzer_off(void)
{
PORTC=0x00;
 886:	15 ba       	out	0x15, r1	; 21
}
 888:	08 95       	ret

0000088a <eeprom_write>:

void eeprom_write(unsigned int address, unsigned int data);
void eeprom_write(unsigned int address, unsigned int data)
{
while(EECR&(1<<EEWE));
 88a:	e1 99       	sbic	0x1c, 1	; 28
 88c:	fe cf       	rjmp	.-4      	; 0x88a <eeprom_write>
EEAR=address;
 88e:	9f bb       	out	0x1f, r25	; 31
 890:	8e bb       	out	0x1e, r24	; 30
EEDR=data;
 892:	6d bb       	out	0x1d, r22	; 29
EECR|=(1<<EEMWE);
 894:	e2 9a       	sbi	0x1c, 2	; 28
EECR|=(1<<EEWE);
 896:	e1 9a       	sbi	0x1c, 1	; 28
}
 898:	08 95       	ret

0000089a <eeprom_read>:

unsigned char eeprom_read(unsigned int address);
unsigned char eeprom_read(unsigned int address)
{
while(EECR&(1<<EEWE));
 89a:	e1 99       	sbic	0x1c, 1	; 28
 89c:	fe cf       	rjmp	.-4      	; 0x89a <eeprom_read>
EEAR=address;
 89e:	9f bb       	out	0x1f, r25	; 31
 8a0:	8e bb       	out	0x1e, r24	; 30
EECR|=(1<<EERE);
 8a2:	e0 9a       	sbi	0x1c, 0	; 28
return EEDR;
 8a4:	8d b3       	in	r24, 0x1d	; 29

}
 8a6:	08 95       	ret

000008a8 <serial_init>:



void usart_init(unsigned char ubrr)
{
UBRRH=0;
 8a8:	10 bc       	out	0x20, r1	; 32
UBRRL=ubrr;
 8aa:	89 e1       	ldi	r24, 0x19	; 25
 8ac:	89 b9       	out	0x09, r24	; 9
UCSRB|=(1<<4)|(1<<3)|(1<<7);
 8ae:	8a b1       	in	r24, 0x0a	; 10
 8b0:	88 69       	ori	r24, 0x98	; 152
 8b2:	8a b9       	out	0x0a, r24	; 10
UCSRC|=(1<<1)|(1<<2)|(1<<7);
 8b4:	80 b5       	in	r24, 0x20	; 32
 8b6:	86 68       	ori	r24, 0x86	; 134
 8b8:	80 bd       	out	0x20, r24	; 32
void serial_init(void);

void serial_init(void)
{
usart_init(data1);
}
 8ba:	08 95       	ret

000008bc <usart_init>:



void usart_init(unsigned char ubrr)
{
UBRRH=0;
 8bc:	10 bc       	out	0x20, r1	; 32
UBRRL=ubrr;
 8be:	89 b9       	out	0x09, r24	; 9
UCSRB|=(1<<4)|(1<<3)|(1<<7);
 8c0:	8a b1       	in	r24, 0x0a	; 10
 8c2:	88 69       	ori	r24, 0x98	; 152
 8c4:	8a b9       	out	0x0a, r24	; 10
UCSRC|=(1<<1)|(1<<2)|(1<<7);
 8c6:	80 b5       	in	r24, 0x20	; 32
 8c8:	86 68       	ori	r24, 0x86	; 134
 8ca:	80 bd       	out	0x20, r24	; 32

}
 8cc:	08 95       	ret

000008ce <usart_transmit>:


void usart_transmit(unsigned char data);
void usart_transmit(unsigned char data)
{
while(!(UCSRA&(1<<UDRE)));
 8ce:	5d 9b       	sbis	0x0b, 5	; 11
 8d0:	fe cf       	rjmp	.-4      	; 0x8ce <usart_transmit>
UDR=data;
 8d2:	8c b9       	out	0x0c, r24	; 12
}
 8d4:	08 95       	ret

000008d6 <init_CC2500>:

unsigned int count=0;
void init_CC2500(void);
void init_CC2500(void)
{
usart_transmit(self_address);
 8d6:	80 e0       	ldi	r24, 0x00	; 0
 8d8:	90 e0       	ldi	r25, 0x00	; 0
 8da:	0e 94 67 04 	call	0x8ce	; 0x8ce <usart_transmit>
 8de:	80 ea       	ldi	r24, 0xA0	; 160
 8e0:	9f e0       	ldi	r25, 0x0F	; 15
 8e2:	20 e9       	ldi	r18, 0x90	; 144
 8e4:	31 e0       	ldi	r19, 0x01	; 1
 8e6:	f9 01       	movw	r30, r18
 8e8:	31 97       	sbiw	r30, 0x01	; 1
 8ea:	f1 f7       	brne	.-4      	; 0x8e8 <init_CC2500+0x12>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 8ec:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 8ee:	d9 f7       	brne	.-10     	; 0x8e6 <init_CC2500+0x10>
_delay_ms(400);
usart_transmit(remote_address);
 8f0:	80 e0       	ldi	r24, 0x00	; 0
 8f2:	90 e0       	ldi	r25, 0x00	; 0
 8f4:	0e 94 67 04 	call	0x8ce	; 0x8ce <usart_transmit>
 8f8:	80 ea       	ldi	r24, 0xA0	; 160
 8fa:	9f e0       	ldi	r25, 0x0F	; 15
 8fc:	20 e9       	ldi	r18, 0x90	; 144
 8fe:	31 e0       	ldi	r19, 0x01	; 1
 900:	f9 01       	movw	r30, r18
 902:	31 97       	sbiw	r30, 0x01	; 1
 904:	f1 f7       	brne	.-4      	; 0x902 <init_CC2500+0x2c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 906:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 908:	d9 f7       	brne	.-10     	; 0x900 <init_CC2500+0x2a>
_delay_ms(400);
usart_transmit(channel);
 90a:	80 e0       	ldi	r24, 0x00	; 0
 90c:	90 e0       	ldi	r25, 0x00	; 0
 90e:	0e 94 67 04 	call	0x8ce	; 0x8ce <usart_transmit>
 912:	80 ea       	ldi	r24, 0xA0	; 160
 914:	9f e0       	ldi	r25, 0x0F	; 15
 916:	20 e9       	ldi	r18, 0x90	; 144
 918:	31 e0       	ldi	r19, 0x01	; 1
 91a:	f9 01       	movw	r30, r18
 91c:	31 97       	sbiw	r30, 0x01	; 1
 91e:	f1 f7       	brne	.-4      	; 0x91c <init_CC2500+0x46>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 920:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 922:	d9 f7       	brne	.-10     	; 0x91a <init_CC2500+0x44>
_delay_ms(400);
}
 924:	08 95       	ret

00000926 <usart_receive>:


unsigned char usart_receive(void);
unsigned char usart_receive(void)
{
while(!(UCSRA &(1<<RXC)));
 926:	5f 9b       	sbis	0x0b, 7	; 11
 928:	fe cf       	rjmp	.-4      	; 0x926 <usart_receive>
 return UDR;
 92a:	8c b1       	in	r24, 0x0c	; 12
 }
 92c:	08 95       	ret

0000092e <print_string>:



void print_string(unsigned char *Mystr_ptr);
void print_string(unsigned char *Mystr_ptr)
	{
 92e:	fc 01       	movw	r30, r24
 930:	04 c0       	rjmp	.+8      	; 0x93a <print_string+0xc>


void usart_transmit(unsigned char data);
void usart_transmit(unsigned char data)
{
while(!(UCSRA&(1<<UDRE)));
 932:	5d 9b       	sbis	0x0b, 5	; 11
 934:	fe cf       	rjmp	.-4      	; 0x932 <print_string+0x4>

void print_string(unsigned char *Mystr_ptr);
void print_string(unsigned char *Mystr_ptr)
	{
		while((*Mystr_ptr) != '\0')	/* print char from str pointer and point to next location */
				usart_transmit((*Mystr_ptr++));
 936:	31 96       	adiw	r30, 0x01	; 1

void usart_transmit(unsigned char data);
void usart_transmit(unsigned char data)
{
while(!(UCSRA&(1<<UDRE)));
UDR=data;
 938:	8c b9       	out	0x0c, r24	; 12


void print_string(unsigned char *Mystr_ptr);
void print_string(unsigned char *Mystr_ptr)
	{
		while((*Mystr_ptr) != '\0')	/* print char from str pointer and point to next location */
 93a:	80 81       	ld	r24, Z
 93c:	88 23       	and	r24, r24
 93e:	c9 f7       	brne	.-14     	; 0x932 <print_string+0x4>
				usart_transmit((*Mystr_ptr++));
	}
 940:	08 95       	ret

00000942 <initialize>:


unsigned char usart_receive(void);
unsigned char usart_receive(void)
{
while(!(UCSRA &(1<<RXC)));
 942:	5f 9b       	sbis	0x0b, 7	; 11
 944:	fe cf       	rjmp	.-4      	; 0x942 <initialize>
 return UDR;
 946:	8c b1       	in	r24, 0x0c	; 12
int xaxis=0,yaxis=0;

void initialize(void);
void initialize(void)
{
readch=usart_receive();
 948:	80 93 96 00 	sts	0x0096, r24
if(readch=='a')
 94c:	81 36       	cpi	r24, 0x61	; 97
 94e:	e9 f4       	brne	.+58     	; 0x98a <initialize+0x48>
{
print_string("enter xaxis\r");
 950:	80 e6       	ldi	r24, 0x60	; 96
 952:	90 e0       	ldi	r25, 0x00	; 0
 954:	0e 94 97 04 	call	0x92e	; 0x92e <print_string>


unsigned char usart_receive(void);
unsigned char usart_receive(void)
{
while(!(UCSRA &(1<<RXC)));
 958:	5f 9b       	sbis	0x0b, 7	; 11
 95a:	fe cf       	rjmp	.-4      	; 0x958 <initialize+0x16>
 return UDR;
 95c:	8c b1       	in	r24, 0x0c	; 12
{
readch=usart_receive();
if(readch=='a')
{
print_string("enter xaxis\r");
xaxis=usart_receive();
 95e:	80 93 92 00 	sts	0x0092, r24
 962:	10 92 93 00 	sts	0x0093, r1


void usart_transmit(unsigned char data);
void usart_transmit(unsigned char data)
{
while(!(UCSRA&(1<<UDRE)));
 966:	5d 9b       	sbis	0x0b, 5	; 11
 968:	fe cf       	rjmp	.-4      	; 0x966 <initialize+0x24>
UDR=data;
 96a:	8c b9       	out	0x0c, r24	; 12
if(readch=='a')
{
print_string("enter xaxis\r");
xaxis=usart_receive();
usart_transmit(xaxis);
print_string("\nenter yaxis\n");
 96c:	8d e6       	ldi	r24, 0x6D	; 109
 96e:	90 e0       	ldi	r25, 0x00	; 0
 970:	0e 94 97 04 	call	0x92e	; 0x92e <print_string>


unsigned char usart_receive(void);
unsigned char usart_receive(void)
{
while(!(UCSRA &(1<<RXC)));
 974:	5f 9b       	sbis	0x0b, 7	; 11
 976:	fe cf       	rjmp	.-4      	; 0x974 <initialize+0x32>
 return UDR;
 978:	8c b1       	in	r24, 0x0c	; 12
{
print_string("enter xaxis\r");
xaxis=usart_receive();
usart_transmit(xaxis);
print_string("\nenter yaxis\n");
yaxis=usart_receive();
 97a:	80 93 94 00 	sts	0x0094, r24
 97e:	10 92 95 00 	sts	0x0095, r1


void usart_transmit(unsigned char data);
void usart_transmit(unsigned char data)
{
while(!(UCSRA&(1<<UDRE)));
 982:	5d 9b       	sbis	0x0b, 5	; 11
 984:	fe cf       	rjmp	.-4      	; 0x982 <initialize+0x40>
UDR=data;
 986:	8c b9       	out	0x0c, r24	; 12
 988:	08 95       	ret
yaxis=usart_receive();
usart_transmit(yaxis);
}	
else
{
print_string("enter codes\n");
 98a:	8b e7       	ldi	r24, 0x7B	; 123
 98c:	90 e0       	ldi	r25, 0x00	; 0
 98e:	0e 94 97 04 	call	0x92e	; 0x92e <print_string>
 992:	08 95       	ret

00000994 <__vector_11>:
}	

}
volatile unsigned char temp='0';
ISR(USART_RXC_vect)
{
 994:	1f 92       	push	r1
 996:	0f 92       	push	r0
 998:	0f b6       	in	r0, 0x3f	; 63
 99a:	0f 92       	push	r0
 99c:	11 24       	eor	r1, r1
 99e:	0f 93       	push	r16
 9a0:	1f 93       	push	r17
 9a2:	2f 93       	push	r18
 9a4:	3f 93       	push	r19
 9a6:	4f 93       	push	r20
 9a8:	5f 93       	push	r21
 9aa:	6f 93       	push	r22
 9ac:	7f 93       	push	r23
 9ae:	8f 93       	push	r24
 9b0:	9f 93       	push	r25
 9b2:	af 93       	push	r26
 9b4:	bf 93       	push	r27
 9b6:	ef 93       	push	r30
 9b8:	ff 93       	push	r31


temp=UDR;
 9ba:	8c b1       	in	r24, 0x0c	; 12
 9bc:	80 93 8d 00 	sts	0x008D, r24
UDR=temp;
 9c0:	80 91 8d 00 	lds	r24, 0x008D
 9c4:	8c b9       	out	0x0c, r24	; 12
 9c6:	00 e2       	ldi	r16, 0x20	; 32
 9c8:	1e e4       	ldi	r17, 0x4E	; 78
 9ca:	c8 01       	movw	r24, r16
 9cc:	01 97       	sbiw	r24, 0x01	; 1
 9ce:	f1 f7       	brne	.-4      	; 0x9cc <__vector_11+0x38>

_delay_ms(5);
lcd_char((temp));
 9d0:	80 91 8d 00 	lds	r24, 0x008D
 9d4:	0e 94 41 03 	call	0x682	; 0x682 <lcd_char>
 9d8:	c8 01       	movw	r24, r16
 9da:	01 97       	sbiw	r24, 0x01	; 1
 9dc:	f1 f7       	brne	.-4      	; 0x9da <__vector_11+0x46>
_delay_ms(5);

}
 9de:	ff 91       	pop	r31
 9e0:	ef 91       	pop	r30
 9e2:	bf 91       	pop	r27
 9e4:	af 91       	pop	r26
 9e6:	9f 91       	pop	r25
 9e8:	8f 91       	pop	r24
 9ea:	7f 91       	pop	r23
 9ec:	6f 91       	pop	r22
 9ee:	5f 91       	pop	r21
 9f0:	4f 91       	pop	r20
 9f2:	3f 91       	pop	r19
 9f4:	2f 91       	pop	r18
 9f6:	1f 91       	pop	r17
 9f8:	0f 91       	pop	r16
 9fa:	0f 90       	pop	r0
 9fc:	0f be       	out	0x3f, r0	; 63
 9fe:	0f 90       	pop	r0
 a00:	1f 90       	pop	r1
 a02:	18 95       	reti

00000a04 <lin_fl>:

void lin_fl(void)
{
if((!s2)&&(!s4))
 a04:	cf 9b       	sbis	0x19, 7	; 25
 a06:	06 c0       	rjmp	.+12     	; 0xa14 <lin_fl+0x10>
 a08:	ca 9b       	sbis	0x19, 2	; 25
 a0a:	04 c0       	rjmp	.+8      	; 0xa14 <lin_fl+0x10>
{
fwd(100);
 a0c:	84 e6       	ldi	r24, 0x64	; 100
 a0e:	90 e0       	ldi	r25, 0x00	; 0
 a10:	0e 94 49 00 	call	0x92	; 0x92 <fwd>
}
if(s4&&(!s2))
 a14:	ca 99       	sbic	0x19, 2	; 25
 a16:	06 c0       	rjmp	.+12     	; 0xa24 <lin_fl+0x20>
 a18:	cf 9b       	sbis	0x19, 7	; 25
 a1a:	04 c0       	rjmp	.+8      	; 0xa24 <lin_fl+0x20>
{
left_fwd(100);
 a1c:	84 e6       	ldi	r24, 0x64	; 100
 a1e:	90 e0       	ldi	r25, 0x00	; 0
 a20:	0e 94 c5 01 	call	0x38a	; 0x38a <left_fwd>
}
if((!s4)&&s2)
 a24:	ca 9b       	sbis	0x19, 2	; 25
 a26:	06 c0       	rjmp	.+12     	; 0xa34 <lin_fl+0x30>
 a28:	cf 99       	sbic	0x19, 7	; 25
 a2a:	04 c0       	rjmp	.+8      	; 0xa34 <lin_fl+0x30>
{
right_fwd(100);
 a2c:	84 e6       	ldi	r24, 0x64	; 100
 a2e:	90 e0       	ldi	r25, 0x00	; 0
 a30:	0e 94 07 01 	call	0x20e	; 0x20e <right_fwd>
}
if((!s4)&&(!s2)&&(!s3))
 a34:	ca 9b       	sbis	0x19, 2	; 25
 a36:	11 c0       	rjmp	.+34     	; 0xa5a <lin_fl+0x56>
 a38:	cf 9b       	sbis	0x19, 7	; 25
 a3a:	0f c0       	rjmp	.+30     	; 0xa5a <lin_fl+0x56>
 a3c:	ce 9b       	sbis	0x19, 6	; 25
 a3e:	0d c0       	rjmp	.+26     	; 0xa5a <lin_fl+0x56>
}

void halt(void);
void halt(void)
{
DDRD|=(1<<4)|(1<<5)|(1<<6)|(1<<7);
 a40:	81 b3       	in	r24, 0x11	; 17
 a42:	80 6f       	ori	r24, 0xF0	; 240
 a44:	81 bb       	out	0x11, r24	; 17
PORTD=0x00;
 a46:	12 ba       	out	0x12, r1	; 18
{

halt();
count++;
 a48:	80 91 90 00 	lds	r24, 0x0090
 a4c:	90 91 91 00 	lds	r25, 0x0091
 a50:	01 96       	adiw	r24, 0x01	; 1
 a52:	90 93 91 00 	sts	0x0091, r25
 a56:	80 93 90 00 	sts	0x0090, r24
 a5a:	08 95       	ret

00000a5c <main>:

}

int main()

{
 a5c:	1f 93       	push	r17
int i=0,data,read;
unsigned char read123;
DDRA&=~((1<<7)|(1<<6)|(1<<2)|(1<<1)|(1<<0));
 a5e:	8a b3       	in	r24, 0x1a	; 26
 a60:	88 73       	andi	r24, 0x38	; 56
 a62:	8a bb       	out	0x1a, r24	; 26
DDRB|=(1<<4)|(1<<6);
 a64:	87 b3       	in	r24, 0x17	; 23
 a66:	80 65       	ori	r24, 0x50	; 80
 a68:	87 bb       	out	0x17, r24	; 23
DDRC=0xff;
 a6a:	8f ef       	ldi	r24, 0xFF	; 255
 a6c:	84 bb       	out	0x14, r24	; 20
DDRD|=(1<<4)|(1<<5)|(1<<6)|(1<<7)|(1<<1);
 a6e:	81 b3       	in	r24, 0x11	; 17
 a70:	82 6f       	ori	r24, 0xF2	; 242
 a72:	81 bb       	out	0x11, r24	; 17
//PORTA=0xff;
DDRD&=~((1<<2)|(1<<3));
 a74:	81 b3       	in	r24, 0x11	; 17
 a76:	83 7f       	andi	r24, 0xF3	; 243
 a78:	81 bb       	out	0x11, r24	; 17
DDRB&=~(1<<5);
 a7a:	bd 98       	cbi	0x17, 5	; 23
lcd_init();                                                                                                                                                                                                                                                                               
 a7c:	0e 94 93 03 	call	0x726	; 0x726 <lcd_init>
//PORTD^=(1<<4)|(1<<6);
int xaxis=0,yaxis=0;
serial_init();
 a80:	0e 94 54 04 	call	0x8a8	; 0x8a8 <serial_init>
 a84:	80 ea       	ldi	r24, 0xA0	; 160
 a86:	9f e0       	ldi	r25, 0x0F	; 15
 a88:	20 e9       	ldi	r18, 0x90	; 144
 a8a:	31 e0       	ldi	r19, 0x01	; 1
 a8c:	f9 01       	movw	r30, r18
 a8e:	31 97       	sbiw	r30, 0x01	; 1
 a90:	f1 f7       	brne	.-4      	; 0xa8e <main+0x32>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 a92:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 a94:	d9 f7       	brne	.-10     	; 0xa8c <main+0x30>
_delay_ms(400);
init_CC2500();
 a96:	0e 94 6b 04 	call	0x8d6	; 0x8d6 <init_CC2500>
print_string("Test");
 a9a:	88 e8       	ldi	r24, 0x88	; 136
 a9c:	90 e0       	ldi	r25, 0x00	; 0
 a9e:	0e 94 97 04 	call	0x92e	; 0x92e <print_string>
PORTC|=(1<<1);
 aa2:	a9 9a       	sbi	0x15, 1	; 21
DDRD&=~(1<<2);
 aa4:	8a 98       	cbi	0x11, 2	; 17
PORTD|=(1<<2);
 aa6:	92 9a       	sbi	0x12, 2	; 18
sei();
 aa8:	78 94       	sei

void usart_transmit(unsigned char data);
void usart_transmit(unsigned char data)
{
while(!(UCSRA&(1<<UDRE)));
UDR=data;
 aaa:	11 e6       	ldi	r17, 0x61	; 97
while(1)
{

//lin_fl();

if(!sw1)
 aac:	82 9b       	sbis	0x10, 2	; 16
 aae:	03 c0       	rjmp	.+6      	; 0xab6 <main+0x5a>


void usart_transmit(unsigned char data);
void usart_transmit(unsigned char data)
{
while(!(UCSRA&(1<<UDRE)));
 ab0:	5d 9b       	sbis	0x0b, 5	; 11
 ab2:	fe cf       	rjmp	.-4      	; 0xab0 <main+0x54>
UDR=data;
 ab4:	1c b9       	out	0x0c, r17	; 12
if(!sw1)
{
usart_transmit('a');

}
if(temp=='a')
 ab6:	80 91 8d 00 	lds	r24, 0x008D
 aba:	81 36       	cpi	r24, 0x61	; 97
 abc:	b9 f7       	brne	.-18     	; 0xaac <main+0x50>
{
buzzer(1);
 abe:	81 e0       	ldi	r24, 0x01	; 1
 ac0:	90 e0       	ldi	r25, 0x00	; 0
 ac2:	0e 94 b9 03 	call	0x772	; 0x772 <buzzer>
 ac6:	f2 cf       	rjmp	.-28     	; 0xaac <main+0x50>

00000ac8 <__cmpsf2>:
 ac8:	6c d0       	rcall	.+216    	; 0xba2 <__fp_cmp>
 aca:	08 f4       	brcc	.+2      	; 0xace <__cmpsf2+0x6>
 acc:	81 e0       	ldi	r24, 0x01	; 1
 ace:	08 95       	ret

00000ad0 <__fixunssfsi>:
 ad0:	94 d0       	rcall	.+296    	; 0xbfa <__fp_splitA>
 ad2:	88 f0       	brcs	.+34     	; 0xaf6 <__fixunssfsi+0x26>
 ad4:	9f 57       	subi	r25, 0x7F	; 127
 ad6:	90 f0       	brcs	.+36     	; 0xafc <__fixunssfsi+0x2c>
 ad8:	b9 2f       	mov	r27, r25
 ada:	99 27       	eor	r25, r25
 adc:	b7 51       	subi	r27, 0x17	; 23
 ade:	a0 f0       	brcs	.+40     	; 0xb08 <__fixunssfsi+0x38>
 ae0:	d1 f0       	breq	.+52     	; 0xb16 <__fixunssfsi+0x46>
 ae2:	66 0f       	add	r22, r22
 ae4:	77 1f       	adc	r23, r23
 ae6:	88 1f       	adc	r24, r24
 ae8:	99 1f       	adc	r25, r25
 aea:	1a f0       	brmi	.+6      	; 0xaf2 <__fixunssfsi+0x22>
 aec:	ba 95       	dec	r27
 aee:	c9 f7       	brne	.-14     	; 0xae2 <__fixunssfsi+0x12>
 af0:	12 c0       	rjmp	.+36     	; 0xb16 <__fixunssfsi+0x46>
 af2:	b1 30       	cpi	r27, 0x01	; 1
 af4:	81 f0       	breq	.+32     	; 0xb16 <__fixunssfsi+0x46>
 af6:	9b d0       	rcall	.+310    	; 0xc2e <__fp_zero>
 af8:	b1 e0       	ldi	r27, 0x01	; 1
 afa:	08 95       	ret
 afc:	98 c0       	rjmp	.+304    	; 0xc2e <__fp_zero>
 afe:	67 2f       	mov	r22, r23
 b00:	78 2f       	mov	r23, r24
 b02:	88 27       	eor	r24, r24
 b04:	b8 5f       	subi	r27, 0xF8	; 248
 b06:	39 f0       	breq	.+14     	; 0xb16 <__fixunssfsi+0x46>
 b08:	b9 3f       	cpi	r27, 0xF9	; 249
 b0a:	cc f3       	brlt	.-14     	; 0xafe <__fixunssfsi+0x2e>
 b0c:	86 95       	lsr	r24
 b0e:	77 95       	ror	r23
 b10:	67 95       	ror	r22
 b12:	b3 95       	inc	r27
 b14:	d9 f7       	brne	.-10     	; 0xb0c <__fixunssfsi+0x3c>
 b16:	3e f4       	brtc	.+14     	; 0xb26 <__fixunssfsi+0x56>
 b18:	90 95       	com	r25
 b1a:	80 95       	com	r24
 b1c:	70 95       	com	r23
 b1e:	61 95       	neg	r22
 b20:	7f 4f       	sbci	r23, 0xFF	; 255
 b22:	8f 4f       	sbci	r24, 0xFF	; 255
 b24:	9f 4f       	sbci	r25, 0xFF	; 255
 b26:	08 95       	ret

00000b28 <__floatunsisf>:
 b28:	e8 94       	clt
 b2a:	09 c0       	rjmp	.+18     	; 0xb3e <__floatsisf+0x12>

00000b2c <__floatsisf>:
 b2c:	97 fb       	bst	r25, 7
 b2e:	3e f4       	brtc	.+14     	; 0xb3e <__floatsisf+0x12>
 b30:	90 95       	com	r25
 b32:	80 95       	com	r24
 b34:	70 95       	com	r23
 b36:	61 95       	neg	r22
 b38:	7f 4f       	sbci	r23, 0xFF	; 255
 b3a:	8f 4f       	sbci	r24, 0xFF	; 255
 b3c:	9f 4f       	sbci	r25, 0xFF	; 255
 b3e:	99 23       	and	r25, r25
 b40:	a9 f0       	breq	.+42     	; 0xb6c <__floatsisf+0x40>
 b42:	f9 2f       	mov	r31, r25
 b44:	96 e9       	ldi	r25, 0x96	; 150
 b46:	bb 27       	eor	r27, r27
 b48:	93 95       	inc	r25
 b4a:	f6 95       	lsr	r31
 b4c:	87 95       	ror	r24
 b4e:	77 95       	ror	r23
 b50:	67 95       	ror	r22
 b52:	b7 95       	ror	r27
 b54:	f1 11       	cpse	r31, r1
 b56:	f8 cf       	rjmp	.-16     	; 0xb48 <__floatsisf+0x1c>
 b58:	fa f4       	brpl	.+62     	; 0xb98 <__floatsisf+0x6c>
 b5a:	bb 0f       	add	r27, r27
 b5c:	11 f4       	brne	.+4      	; 0xb62 <__floatsisf+0x36>
 b5e:	60 ff       	sbrs	r22, 0
 b60:	1b c0       	rjmp	.+54     	; 0xb98 <__floatsisf+0x6c>
 b62:	6f 5f       	subi	r22, 0xFF	; 255
 b64:	7f 4f       	sbci	r23, 0xFF	; 255
 b66:	8f 4f       	sbci	r24, 0xFF	; 255
 b68:	9f 4f       	sbci	r25, 0xFF	; 255
 b6a:	16 c0       	rjmp	.+44     	; 0xb98 <__floatsisf+0x6c>
 b6c:	88 23       	and	r24, r24
 b6e:	11 f0       	breq	.+4      	; 0xb74 <__floatsisf+0x48>
 b70:	96 e9       	ldi	r25, 0x96	; 150
 b72:	11 c0       	rjmp	.+34     	; 0xb96 <__floatsisf+0x6a>
 b74:	77 23       	and	r23, r23
 b76:	21 f0       	breq	.+8      	; 0xb80 <__floatsisf+0x54>
 b78:	9e e8       	ldi	r25, 0x8E	; 142
 b7a:	87 2f       	mov	r24, r23
 b7c:	76 2f       	mov	r23, r22
 b7e:	05 c0       	rjmp	.+10     	; 0xb8a <__floatsisf+0x5e>
 b80:	66 23       	and	r22, r22
 b82:	71 f0       	breq	.+28     	; 0xba0 <__floatsisf+0x74>
 b84:	96 e8       	ldi	r25, 0x86	; 134
 b86:	86 2f       	mov	r24, r22
 b88:	70 e0       	ldi	r23, 0x00	; 0
 b8a:	60 e0       	ldi	r22, 0x00	; 0
 b8c:	2a f0       	brmi	.+10     	; 0xb98 <__floatsisf+0x6c>
 b8e:	9a 95       	dec	r25
 b90:	66 0f       	add	r22, r22
 b92:	77 1f       	adc	r23, r23
 b94:	88 1f       	adc	r24, r24
 b96:	da f7       	brpl	.-10     	; 0xb8e <__floatsisf+0x62>
 b98:	88 0f       	add	r24, r24
 b9a:	96 95       	lsr	r25
 b9c:	87 95       	ror	r24
 b9e:	97 f9       	bld	r25, 7
 ba0:	08 95       	ret

00000ba2 <__fp_cmp>:
 ba2:	99 0f       	add	r25, r25
 ba4:	00 08       	sbc	r0, r0
 ba6:	55 0f       	add	r21, r21
 ba8:	aa 0b       	sbc	r26, r26
 baa:	e0 e8       	ldi	r30, 0x80	; 128
 bac:	fe ef       	ldi	r31, 0xFE	; 254
 bae:	16 16       	cp	r1, r22
 bb0:	17 06       	cpc	r1, r23
 bb2:	e8 07       	cpc	r30, r24
 bb4:	f9 07       	cpc	r31, r25
 bb6:	c0 f0       	brcs	.+48     	; 0xbe8 <__fp_cmp+0x46>
 bb8:	12 16       	cp	r1, r18
 bba:	13 06       	cpc	r1, r19
 bbc:	e4 07       	cpc	r30, r20
 bbe:	f5 07       	cpc	r31, r21
 bc0:	98 f0       	brcs	.+38     	; 0xbe8 <__fp_cmp+0x46>
 bc2:	62 1b       	sub	r22, r18
 bc4:	73 0b       	sbc	r23, r19
 bc6:	84 0b       	sbc	r24, r20
 bc8:	95 0b       	sbc	r25, r21
 bca:	39 f4       	brne	.+14     	; 0xbda <__fp_cmp+0x38>
 bcc:	0a 26       	eor	r0, r26
 bce:	61 f0       	breq	.+24     	; 0xbe8 <__fp_cmp+0x46>
 bd0:	23 2b       	or	r18, r19
 bd2:	24 2b       	or	r18, r20
 bd4:	25 2b       	or	r18, r21
 bd6:	21 f4       	brne	.+8      	; 0xbe0 <__fp_cmp+0x3e>
 bd8:	08 95       	ret
 bda:	0a 26       	eor	r0, r26
 bdc:	09 f4       	brne	.+2      	; 0xbe0 <__fp_cmp+0x3e>
 bde:	a1 40       	sbci	r26, 0x01	; 1
 be0:	a6 95       	lsr	r26
 be2:	8f ef       	ldi	r24, 0xFF	; 255
 be4:	81 1d       	adc	r24, r1
 be6:	81 1d       	adc	r24, r1
 be8:	08 95       	ret

00000bea <__fp_split3>:
 bea:	57 fd       	sbrc	r21, 7
 bec:	90 58       	subi	r25, 0x80	; 128
 bee:	44 0f       	add	r20, r20
 bf0:	55 1f       	adc	r21, r21
 bf2:	59 f0       	breq	.+22     	; 0xc0a <__fp_splitA+0x10>
 bf4:	5f 3f       	cpi	r21, 0xFF	; 255
 bf6:	71 f0       	breq	.+28     	; 0xc14 <__fp_splitA+0x1a>
 bf8:	47 95       	ror	r20

00000bfa <__fp_splitA>:
 bfa:	88 0f       	add	r24, r24
 bfc:	97 fb       	bst	r25, 7
 bfe:	99 1f       	adc	r25, r25
 c00:	61 f0       	breq	.+24     	; 0xc1a <__fp_splitA+0x20>
 c02:	9f 3f       	cpi	r25, 0xFF	; 255
 c04:	79 f0       	breq	.+30     	; 0xc24 <__fp_splitA+0x2a>
 c06:	87 95       	ror	r24
 c08:	08 95       	ret
 c0a:	12 16       	cp	r1, r18
 c0c:	13 06       	cpc	r1, r19
 c0e:	14 06       	cpc	r1, r20
 c10:	55 1f       	adc	r21, r21
 c12:	f2 cf       	rjmp	.-28     	; 0xbf8 <__fp_split3+0xe>
 c14:	46 95       	lsr	r20
 c16:	f1 df       	rcall	.-30     	; 0xbfa <__fp_splitA>
 c18:	08 c0       	rjmp	.+16     	; 0xc2a <__fp_splitA+0x30>
 c1a:	16 16       	cp	r1, r22
 c1c:	17 06       	cpc	r1, r23
 c1e:	18 06       	cpc	r1, r24
 c20:	99 1f       	adc	r25, r25
 c22:	f1 cf       	rjmp	.-30     	; 0xc06 <__fp_splitA+0xc>
 c24:	86 95       	lsr	r24
 c26:	71 05       	cpc	r23, r1
 c28:	61 05       	cpc	r22, r1
 c2a:	08 94       	sec
 c2c:	08 95       	ret

00000c2e <__fp_zero>:
 c2e:	e8 94       	clt

00000c30 <__fp_szero>:
 c30:	bb 27       	eor	r27, r27
 c32:	66 27       	eor	r22, r22
 c34:	77 27       	eor	r23, r23
 c36:	cb 01       	movw	r24, r22
 c38:	97 f9       	bld	r25, 7
 c3a:	08 95       	ret

00000c3c <__gesf2>:
 c3c:	b2 df       	rcall	.-156    	; 0xba2 <__fp_cmp>
 c3e:	08 f4       	brcc	.+2      	; 0xc42 <__gesf2+0x6>
 c40:	8f ef       	ldi	r24, 0xFF	; 255
 c42:	08 95       	ret

00000c44 <__mulsf3>:
 c44:	0b d0       	rcall	.+22     	; 0xc5c <__mulsf3x>
 c46:	78 c0       	rjmp	.+240    	; 0xd38 <__fp_round>
 c48:	69 d0       	rcall	.+210    	; 0xd1c <__fp_pscA>
 c4a:	28 f0       	brcs	.+10     	; 0xc56 <__mulsf3+0x12>
 c4c:	6e d0       	rcall	.+220    	; 0xd2a <__fp_pscB>
 c4e:	18 f0       	brcs	.+6      	; 0xc56 <__mulsf3+0x12>
 c50:	95 23       	and	r25, r21
 c52:	09 f0       	breq	.+2      	; 0xc56 <__mulsf3+0x12>
 c54:	5a c0       	rjmp	.+180    	; 0xd0a <__fp_inf>
 c56:	5f c0       	rjmp	.+190    	; 0xd16 <__fp_nan>
 c58:	11 24       	eor	r1, r1
 c5a:	ea cf       	rjmp	.-44     	; 0xc30 <__fp_szero>

00000c5c <__mulsf3x>:
 c5c:	c6 df       	rcall	.-116    	; 0xbea <__fp_split3>
 c5e:	a0 f3       	brcs	.-24     	; 0xc48 <__mulsf3+0x4>

00000c60 <__mulsf3_pse>:
 c60:	95 9f       	mul	r25, r21
 c62:	d1 f3       	breq	.-12     	; 0xc58 <__mulsf3+0x14>
 c64:	95 0f       	add	r25, r21
 c66:	50 e0       	ldi	r21, 0x00	; 0
 c68:	55 1f       	adc	r21, r21
 c6a:	62 9f       	mul	r22, r18
 c6c:	f0 01       	movw	r30, r0
 c6e:	72 9f       	mul	r23, r18
 c70:	bb 27       	eor	r27, r27
 c72:	f0 0d       	add	r31, r0
 c74:	b1 1d       	adc	r27, r1
 c76:	63 9f       	mul	r22, r19
 c78:	aa 27       	eor	r26, r26
 c7a:	f0 0d       	add	r31, r0
 c7c:	b1 1d       	adc	r27, r1
 c7e:	aa 1f       	adc	r26, r26
 c80:	64 9f       	mul	r22, r20
 c82:	66 27       	eor	r22, r22
 c84:	b0 0d       	add	r27, r0
 c86:	a1 1d       	adc	r26, r1
 c88:	66 1f       	adc	r22, r22
 c8a:	82 9f       	mul	r24, r18
 c8c:	22 27       	eor	r18, r18
 c8e:	b0 0d       	add	r27, r0
 c90:	a1 1d       	adc	r26, r1
 c92:	62 1f       	adc	r22, r18
 c94:	73 9f       	mul	r23, r19
 c96:	b0 0d       	add	r27, r0
 c98:	a1 1d       	adc	r26, r1
 c9a:	62 1f       	adc	r22, r18
 c9c:	83 9f       	mul	r24, r19
 c9e:	a0 0d       	add	r26, r0
 ca0:	61 1d       	adc	r22, r1
 ca2:	22 1f       	adc	r18, r18
 ca4:	74 9f       	mul	r23, r20
 ca6:	33 27       	eor	r19, r19
 ca8:	a0 0d       	add	r26, r0
 caa:	61 1d       	adc	r22, r1
 cac:	23 1f       	adc	r18, r19
 cae:	84 9f       	mul	r24, r20
 cb0:	60 0d       	add	r22, r0
 cb2:	21 1d       	adc	r18, r1
 cb4:	82 2f       	mov	r24, r18
 cb6:	76 2f       	mov	r23, r22
 cb8:	6a 2f       	mov	r22, r26
 cba:	11 24       	eor	r1, r1
 cbc:	9f 57       	subi	r25, 0x7F	; 127
 cbe:	50 40       	sbci	r21, 0x00	; 0
 cc0:	8a f0       	brmi	.+34     	; 0xce4 <__mulsf3_pse+0x84>
 cc2:	e1 f0       	breq	.+56     	; 0xcfc <__mulsf3_pse+0x9c>
 cc4:	88 23       	and	r24, r24
 cc6:	4a f0       	brmi	.+18     	; 0xcda <__mulsf3_pse+0x7a>
 cc8:	ee 0f       	add	r30, r30
 cca:	ff 1f       	adc	r31, r31
 ccc:	bb 1f       	adc	r27, r27
 cce:	66 1f       	adc	r22, r22
 cd0:	77 1f       	adc	r23, r23
 cd2:	88 1f       	adc	r24, r24
 cd4:	91 50       	subi	r25, 0x01	; 1
 cd6:	50 40       	sbci	r21, 0x00	; 0
 cd8:	a9 f7       	brne	.-22     	; 0xcc4 <__mulsf3_pse+0x64>
 cda:	9e 3f       	cpi	r25, 0xFE	; 254
 cdc:	51 05       	cpc	r21, r1
 cde:	70 f0       	brcs	.+28     	; 0xcfc <__mulsf3_pse+0x9c>
 ce0:	14 c0       	rjmp	.+40     	; 0xd0a <__fp_inf>
 ce2:	a6 cf       	rjmp	.-180    	; 0xc30 <__fp_szero>
 ce4:	5f 3f       	cpi	r21, 0xFF	; 255
 ce6:	ec f3       	brlt	.-6      	; 0xce2 <__mulsf3_pse+0x82>
 ce8:	98 3e       	cpi	r25, 0xE8	; 232
 cea:	dc f3       	brlt	.-10     	; 0xce2 <__mulsf3_pse+0x82>
 cec:	86 95       	lsr	r24
 cee:	77 95       	ror	r23
 cf0:	67 95       	ror	r22
 cf2:	b7 95       	ror	r27
 cf4:	f7 95       	ror	r31
 cf6:	e7 95       	ror	r30
 cf8:	9f 5f       	subi	r25, 0xFF	; 255
 cfa:	c1 f7       	brne	.-16     	; 0xcec <__mulsf3_pse+0x8c>
 cfc:	fe 2b       	or	r31, r30
 cfe:	88 0f       	add	r24, r24
 d00:	91 1d       	adc	r25, r1
 d02:	96 95       	lsr	r25
 d04:	87 95       	ror	r24
 d06:	97 f9       	bld	r25, 7
 d08:	08 95       	ret

00000d0a <__fp_inf>:
 d0a:	97 f9       	bld	r25, 7
 d0c:	9f 67       	ori	r25, 0x7F	; 127
 d0e:	80 e8       	ldi	r24, 0x80	; 128
 d10:	70 e0       	ldi	r23, 0x00	; 0
 d12:	60 e0       	ldi	r22, 0x00	; 0
 d14:	08 95       	ret

00000d16 <__fp_nan>:
 d16:	9f ef       	ldi	r25, 0xFF	; 255
 d18:	80 ec       	ldi	r24, 0xC0	; 192
 d1a:	08 95       	ret

00000d1c <__fp_pscA>:
 d1c:	00 24       	eor	r0, r0
 d1e:	0a 94       	dec	r0
 d20:	16 16       	cp	r1, r22
 d22:	17 06       	cpc	r1, r23
 d24:	18 06       	cpc	r1, r24
 d26:	09 06       	cpc	r0, r25
 d28:	08 95       	ret

00000d2a <__fp_pscB>:
 d2a:	00 24       	eor	r0, r0
 d2c:	0a 94       	dec	r0
 d2e:	12 16       	cp	r1, r18
 d30:	13 06       	cpc	r1, r19
 d32:	14 06       	cpc	r1, r20
 d34:	05 06       	cpc	r0, r21
 d36:	08 95       	ret

00000d38 <__fp_round>:
 d38:	09 2e       	mov	r0, r25
 d3a:	03 94       	inc	r0
 d3c:	00 0c       	add	r0, r0
 d3e:	11 f4       	brne	.+4      	; 0xd44 <__fp_round+0xc>
 d40:	88 23       	and	r24, r24
 d42:	52 f0       	brmi	.+20     	; 0xd58 <__fp_round+0x20>
 d44:	bb 0f       	add	r27, r27
 d46:	40 f4       	brcc	.+16     	; 0xd58 <__fp_round+0x20>
 d48:	bf 2b       	or	r27, r31
 d4a:	11 f4       	brne	.+4      	; 0xd50 <__fp_round+0x18>
 d4c:	60 ff       	sbrs	r22, 0
 d4e:	04 c0       	rjmp	.+8      	; 0xd58 <__fp_round+0x20>
 d50:	6f 5f       	subi	r22, 0xFF	; 255
 d52:	7f 4f       	sbci	r23, 0xFF	; 255
 d54:	8f 4f       	sbci	r24, 0xFF	; 255
 d56:	9f 4f       	sbci	r25, 0xFF	; 255
 d58:	08 95       	ret

00000d5a <__udivmodqi4>:
 d5a:	99 1b       	sub	r25, r25
 d5c:	79 e0       	ldi	r23, 0x09	; 9
 d5e:	04 c0       	rjmp	.+8      	; 0xd68 <__udivmodqi4_ep>

00000d60 <__udivmodqi4_loop>:
 d60:	99 1f       	adc	r25, r25
 d62:	96 17       	cp	r25, r22
 d64:	08 f0       	brcs	.+2      	; 0xd68 <__udivmodqi4_ep>
 d66:	96 1b       	sub	r25, r22

00000d68 <__udivmodqi4_ep>:
 d68:	88 1f       	adc	r24, r24
 d6a:	7a 95       	dec	r23
 d6c:	c9 f7       	brne	.-14     	; 0xd60 <__udivmodqi4_loop>
 d6e:	80 95       	com	r24
 d70:	08 95       	ret

00000d72 <__divmodhi4>:
 d72:	97 fb       	bst	r25, 7
 d74:	09 2e       	mov	r0, r25
 d76:	07 26       	eor	r0, r23
 d78:	0a d0       	rcall	.+20     	; 0xd8e <__divmodhi4_neg1>
 d7a:	77 fd       	sbrc	r23, 7
 d7c:	04 d0       	rcall	.+8      	; 0xd86 <__divmodhi4_neg2>
 d7e:	0c d0       	rcall	.+24     	; 0xd98 <__udivmodhi4>
 d80:	06 d0       	rcall	.+12     	; 0xd8e <__divmodhi4_neg1>
 d82:	00 20       	and	r0, r0
 d84:	1a f4       	brpl	.+6      	; 0xd8c <__divmodhi4_exit>

00000d86 <__divmodhi4_neg2>:
 d86:	70 95       	com	r23
 d88:	61 95       	neg	r22
 d8a:	7f 4f       	sbci	r23, 0xFF	; 255

00000d8c <__divmodhi4_exit>:
 d8c:	08 95       	ret

00000d8e <__divmodhi4_neg1>:
 d8e:	f6 f7       	brtc	.-4      	; 0xd8c <__divmodhi4_exit>
 d90:	90 95       	com	r25
 d92:	81 95       	neg	r24
 d94:	9f 4f       	sbci	r25, 0xFF	; 255
 d96:	08 95       	ret

00000d98 <__udivmodhi4>:
 d98:	aa 1b       	sub	r26, r26
 d9a:	bb 1b       	sub	r27, r27
 d9c:	51 e1       	ldi	r21, 0x11	; 17
 d9e:	07 c0       	rjmp	.+14     	; 0xdae <__udivmodhi4_ep>

00000da0 <__udivmodhi4_loop>:
 da0:	aa 1f       	adc	r26, r26
 da2:	bb 1f       	adc	r27, r27
 da4:	a6 17       	cp	r26, r22
 da6:	b7 07       	cpc	r27, r23
 da8:	10 f0       	brcs	.+4      	; 0xdae <__udivmodhi4_ep>
 daa:	a6 1b       	sub	r26, r22
 dac:	b7 0b       	sbc	r27, r23

00000dae <__udivmodhi4_ep>:
 dae:	88 1f       	adc	r24, r24
 db0:	99 1f       	adc	r25, r25
 db2:	5a 95       	dec	r21
 db4:	a9 f7       	brne	.-22     	; 0xda0 <__udivmodhi4_loop>
 db6:	80 95       	com	r24
 db8:	90 95       	com	r25
 dba:	bc 01       	movw	r22, r24
 dbc:	cd 01       	movw	r24, r26
 dbe:	08 95       	ret

00000dc0 <_exit>:
 dc0:	f8 94       	cli

00000dc2 <__stop_program>:
 dc2:	ff cf       	rjmp	.-2      	; 0xdc2 <__stop_program>
