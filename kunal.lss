
kunal.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000008ae  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000004  00800060  000008ae  00000942  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000081  00800064  00800064  00000946  2**0
                  ALLOC
  3 .debug_aranges 00000020  00000000  00000000  00000946  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000000e6  00000000  00000000  00000966  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000004aa  00000000  00000000  00000a4c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000022c  00000000  00000000  00000ef6  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000454  00000000  00000000  00001122  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000c0  00000000  00000000  00001578  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000173  00000000  00000000  00001638  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000c9  00000000  00000000  000017ab  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000060  00000000  00000000  00001874  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 03 01 	jmp	0x206	; 0x206 <__vector_11>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee ea       	ldi	r30, 0xAE	; 174
  68:	f8 e0       	ldi	r31, 0x08	; 8
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a4 36       	cpi	r26, 0x64	; 100
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a4 e6       	ldi	r26, 0x64	; 100
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a5 3e       	cpi	r26, 0xE5	; 229
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 12 01 	call	0x224	; 0x224 <main>
  8a:	0c 94 55 04 	jmp	0x8aa	; 0x8aa <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <uart_init>:
unsigned int i=0,j=0,temp[10];
unsigned int rec_num,p;

void uart_init()
{
UBRRL=25;
  92:	89 e1       	ldi	r24, 0x19	; 25
  94:	89 b9       	out	0x09, r24	; 9
UCSRB|=(1<<3)|(1<<4)|(1<<7);
  96:	8a b1       	in	r24, 0x0a	; 10
  98:	88 69       	ori	r24, 0x98	; 152
  9a:	8a b9       	out	0x0a, r24	; 10
UCSRC|=(1<<7)|(1<<1)|(1<<2);
  9c:	80 b5       	in	r24, 0x20	; 32
  9e:	86 68       	ori	r24, 0x86	; 134
  a0:	80 bd       	out	0x20, r24	; 32
}
  a2:	08 95       	ret

000000a4 <uart_tx>:

void uart_tx(unsigned char data)
{
while(!(UCSRA&(1<<UDRE)));
  a4:	5d 9b       	sbis	0x0b, 5	; 11
  a6:	fe cf       	rjmp	.-4      	; 0xa4 <uart_tx>
UDR=data;
  a8:	8c b9       	out	0x0c, r24	; 12
//while(!(UCSRA&(1<<TXC)));
//UCSRA|=(1<<TXC);
}
  aa:	08 95       	ret

000000ac <uart_tx_string>:
void uart_tx_string(unsigned char *data)
{
  ac:	fc 01       	movw	r30, r24
  ae:	04 c0       	rjmp	.+8      	; 0xb8 <uart_tx_string+0xc>
UCSRC|=(1<<7)|(1<<1)|(1<<2);
}

void uart_tx(unsigned char data)
{
while(!(UCSRA&(1<<UDRE)));
  b0:	5d 9b       	sbis	0x0b, 5	; 11
  b2:	fe cf       	rjmp	.-4      	; 0xb0 <uart_tx_string+0x4>
}
void uart_tx_string(unsigned char *data)
{
while(*data)
{
uart_tx(*(data++));
  b4:	31 96       	adiw	r30, 0x01	; 1
}

void uart_tx(unsigned char data)
{
while(!(UCSRA&(1<<UDRE)));
UDR=data;
  b6:	8c b9       	out	0x0c, r24	; 12
//while(!(UCSRA&(1<<TXC)));
//UCSRA|=(1<<TXC);
}
void uart_tx_string(unsigned char *data)
{
while(*data)
  b8:	80 81       	ld	r24, Z
  ba:	88 23       	and	r24, r24
  bc:	c9 f7       	brne	.-14     	; 0xb0 <uart_tx_string+0x4>
{
uart_tx(*(data++));
}


}
  be:	08 95       	ret

000000c0 <uart_rx>:
uart_tx_string(data);
}

unsigned char uart_rx()
{
while(!(UCSRA&(1<<RXC)));
  c0:	5f 9b       	sbis	0x0b, 7	; 11
  c2:	fe cf       	rjmp	.-4      	; 0xc0 <uart_rx>
return UDR;
  c4:	8c b1       	in	r24, 0x0c	; 12
}
  c6:	08 95       	ret

000000c8 <uart_rx_string>:


void uart_rx_string()

{
  c8:	80 91 64 00 	lds	r24, 0x0064
  cc:	90 91 65 00 	lds	r25, 0x0065
  d0:	fc 01       	movw	r30, r24
  d2:	31 96       	adiw	r30, 0x01	; 1
  d4:	dc 01       	movw	r26, r24
  d6:	a8 59       	subi	r26, 0x98	; 152
  d8:	bf 4f       	sbci	r27, 0xFF	; 255
uart_tx_string(data);
}

unsigned char uart_rx()
{
while(!(UCSRA&(1<<RXC)));
  da:	5f 9b       	sbis	0x0b, 7	; 11
  dc:	fe cf       	rjmp	.-4      	; 0xda <uart_rx_string+0x12>
return UDR;
  de:	8c b1       	in	r24, 0x0c	; 12

{
do
{
 
b[i]=uart_rx();
  e0:	8d 93       	st	X+, r24
  e2:	9f 01       	movw	r18, r30
  e4:	2f 5f       	subi	r18, 0xFF	; 255
  e6:	3f 4f       	sbci	r19, 0xFF	; 255
i++;

}
while(b[i-1]!='\r');
  e8:	8d 30       	cpi	r24, 0x0D	; 13
  ea:	11 f0       	breq	.+4      	; 0xf0 <uart_rx_string+0x28>
  ec:	f9 01       	movw	r30, r18
  ee:	f5 cf       	rjmp	.-22     	; 0xda <uart_rx_string+0x12>
b[i]='\0';
  f0:	e8 59       	subi	r30, 0x98	; 152
  f2:	ff 4f       	sbci	r31, 0xFF	; 255
  f4:	10 82       	st	Z, r1
  f6:	e8 e6       	ldi	r30, 0x68	; 104
  f8:	f0 e0       	ldi	r31, 0x00	; 0
  fa:	80 e0       	ldi	r24, 0x00	; 0
  fc:	90 e0       	ldi	r25, 0x00	; 0
  fe:	06 c0       	rjmp	.+12     	; 0x10c <uart_rx_string+0x44>


for(i=0;i<=100;i++)
{
uart_tx(b[i]);
 100:	20 81       	ld	r18, Z
UCSRC|=(1<<7)|(1<<1)|(1<<2);
}

void uart_tx(unsigned char data)
{
while(!(UCSRA&(1<<UDRE)));
 102:	5d 9b       	sbis	0x0b, 5	; 11
 104:	fe cf       	rjmp	.-4      	; 0x102 <uart_rx_string+0x3a>
UDR=data;
 106:	2c b9       	out	0x0c, r18	; 12
 108:	01 96       	adiw	r24, 0x01	; 1
 10a:	31 96       	adiw	r30, 0x01	; 1
}
while(b[i-1]!='\r');
b[i]='\0';


for(i=0;i<=100;i++)
 10c:	85 36       	cpi	r24, 0x65	; 101
 10e:	91 05       	cpc	r25, r1
 110:	b8 f3       	brcs	.-18     	; 0x100 <uart_rx_string+0x38>
{
uart_tx(b[i]);
}
i=0;
 112:	10 92 65 00 	sts	0x0065, r1
 116:	10 92 64 00 	sts	0x0064, r1
}
 11a:	08 95       	ret

0000011c <UART_rx_num>:
unsigned int UART_rx_num()
{
 11c:	df 93       	push	r29
 11e:	cf 93       	push	r28
 120:	cd b7       	in	r28, 0x3d	; 61
 122:	de b7       	in	r29, 0x3e	; 62
 124:	2a 97       	sbiw	r28, 0x0a	; 10
 126:	0f b6       	in	r0, 0x3f	; 63
 128:	f8 94       	cli
 12a:	de bf       	out	0x3e, r29	; 62
 12c:	0f be       	out	0x3f, r0	; 63
 12e:	cd bf       	out	0x3d, r28	; 61
 130:	90 e0       	ldi	r25, 0x00	; 0
    unsigned char num[10],rxcount=0,rxnum;
    

    while((rxnum = uart_rx())!= '\r')
    {
            num[rxcount] = rxnum - 0x30;
 132:	9e 01       	movw	r18, r28
 134:	2f 5f       	subi	r18, 0xFF	; 255
 136:	3f 4f       	sbci	r19, 0xFF	; 255
 138:	06 c0       	rjmp	.+12     	; 0x146 <UART_rx_num+0x2a>
 13a:	f9 01       	movw	r30, r18
 13c:	e9 0f       	add	r30, r25
 13e:	f1 1d       	adc	r31, r1
 140:	80 53       	subi	r24, 0x30	; 48
 142:	80 83       	st	Z, r24
            rxcount++;
 144:	9f 5f       	subi	r25, 0xFF	; 255
uart_tx_string(data);
}

unsigned char uart_rx()
{
while(!(UCSRA&(1<<RXC)));
 146:	5f 9b       	sbis	0x0b, 7	; 11
 148:	fe cf       	rjmp	.-4      	; 0x146 <UART_rx_num+0x2a>
return UDR;
 14a:	8c b1       	in	r24, 0x0c	; 12
unsigned int UART_rx_num()
{
    unsigned char num[10],rxcount=0,rxnum;
    

    while((rxnum = uart_rx())!= '\r')
 14c:	8d 30       	cpi	r24, 0x0D	; 13
 14e:	a9 f7       	brne	.-22     	; 0x13a <UART_rx_num+0x1e>
    {
            num[rxcount] = rxnum - 0x30;
            rxcount++;
    }
    if(rxcount == 1)
 150:	91 30       	cpi	r25, 0x01	; 1
 152:	21 f4       	brne	.+8      	; 0x15c <UART_rx_num+0x40>
    {
        num[2] = num[0];
 154:	89 81       	ldd	r24, Y+1	; 0x01
 156:	8b 83       	std	Y+3, r24	; 0x03
        num[1] = 0 ;
 158:	1a 82       	std	Y+2, r1	; 0x02
 15a:	06 c0       	rjmp	.+12     	; 0x168 <UART_rx_num+0x4c>
        num[0] = 0;
    }
    if(rxcount == 2)
 15c:	92 30       	cpi	r25, 0x02	; 2
 15e:	29 f4       	brne	.+10     	; 0x16a <UART_rx_num+0x4e>
    {
        num[2] = num[1];
 160:	8a 81       	ldd	r24, Y+2	; 0x02
 162:	8b 83       	std	Y+3, r24	; 0x03
        num[1] = num[0];
 164:	89 81       	ldd	r24, Y+1	; 0x01
 166:	8a 83       	std	Y+2, r24	; 0x02
        num[0] = 0;
 168:	19 82       	std	Y+1, r1	; 0x01
    }
    rec_num = (num[0]*100 )+(num[1]*10)+num[2];
 16a:	29 81       	ldd	r18, Y+1	; 0x01
 16c:	84 e6       	ldi	r24, 0x64	; 100
 16e:	28 9f       	mul	r18, r24
 170:	90 01       	movw	r18, r0
 172:	11 24       	eor	r1, r1
 174:	8a 81       	ldd	r24, Y+2	; 0x02
 176:	4a e0       	ldi	r20, 0x0A	; 10
 178:	84 9f       	mul	r24, r20
 17a:	c0 01       	movw	r24, r0
 17c:	11 24       	eor	r1, r1
 17e:	28 0f       	add	r18, r24
 180:	39 1f       	adc	r19, r25
 182:	8b 81       	ldd	r24, Y+3	; 0x03
 184:	28 0f       	add	r18, r24
 186:	31 1d       	adc	r19, r1
 188:	30 93 e4 00 	sts	0x00E4, r19
 18c:	20 93 e3 00 	sts	0x00E3, r18
    return rec_num;
    
}
 190:	c9 01       	movw	r24, r18
 192:	2a 96       	adiw	r28, 0x0a	; 10
 194:	0f b6       	in	r0, 0x3f	; 63
 196:	f8 94       	cli
 198:	de bf       	out	0x3e, r29	; 62
 19a:	0f be       	out	0x3f, r0	; 63
 19c:	cd bf       	out	0x3d, r28	; 61
 19e:	cf 91       	pop	r28
 1a0:	df 91       	pop	r29
 1a2:	08 95       	ret

000001a4 <cc2500_init>:
UCSRC|=(1<<7)|(1<<1)|(1<<2);
}

void uart_tx(unsigned char data)
{
while(!(UCSRA&(1<<UDRE)));
 1a4:	5d 9b       	sbis	0x0b, 5	; 11
 1a6:	fe cf       	rjmp	.-4      	; 0x1a4 <cc2500_init>
UDR=data;
 1a8:	80 e3       	ldi	r24, 0x30	; 48
 1aa:	8c b9       	out	0x0c, r24	; 12
 1ac:	80 e1       	ldi	r24, 0x10	; 16
 1ae:	97 e2       	ldi	r25, 0x27	; 39
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 1b0:	20 e9       	ldi	r18, 0x90	; 144
 1b2:	31 e0       	ldi	r19, 0x01	; 1
 1b4:	f9 01       	movw	r30, r18
 1b6:	31 97       	sbiw	r30, 0x01	; 1
 1b8:	f1 f7       	brne	.-4      	; 0x1b6 <cc2500_init+0x12>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 1ba:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 1bc:	d9 f7       	brne	.-10     	; 0x1b4 <cc2500_init+0x10>
UCSRC|=(1<<7)|(1<<1)|(1<<2);
}

void uart_tx(unsigned char data)
{
while(!(UCSRA&(1<<UDRE)));
 1be:	5d 9b       	sbis	0x0b, 5	; 11
 1c0:	fe cf       	rjmp	.-4      	; 0x1be <cc2500_init+0x1a>
UDR=data;
 1c2:	80 e3       	ldi	r24, 0x30	; 48
 1c4:	8c b9       	out	0x0c, r24	; 12
 1c6:	80 e1       	ldi	r24, 0x10	; 16
 1c8:	97 e2       	ldi	r25, 0x27	; 39
 1ca:	20 e9       	ldi	r18, 0x90	; 144
 1cc:	31 e0       	ldi	r19, 0x01	; 1
 1ce:	f9 01       	movw	r30, r18
 1d0:	31 97       	sbiw	r30, 0x01	; 1
 1d2:	f1 f7       	brne	.-4      	; 0x1d0 <cc2500_init+0x2c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 1d4:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 1d6:	d9 f7       	brne	.-10     	; 0x1ce <cc2500_init+0x2a>
UCSRC|=(1<<7)|(1<<1)|(1<<2);
}

void uart_tx(unsigned char data)
{
while(!(UCSRA&(1<<UDRE)));
 1d8:	5d 9b       	sbis	0x0b, 5	; 11
 1da:	fe cf       	rjmp	.-4      	; 0x1d8 <cc2500_init+0x34>
UDR=data;
 1dc:	80 e3       	ldi	r24, 0x30	; 48
 1de:	8c b9       	out	0x0c, r24	; 12
 1e0:	80 e1       	ldi	r24, 0x10	; 16
 1e2:	97 e2       	ldi	r25, 0x27	; 39
 1e4:	20 e9       	ldi	r18, 0x90	; 144
 1e6:	31 e0       	ldi	r19, 0x01	; 1
 1e8:	f9 01       	movw	r30, r18
 1ea:	31 97       	sbiw	r30, 0x01	; 1
 1ec:	f1 f7       	brne	.-4      	; 0x1ea <cc2500_init+0x46>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 1ee:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 1f0:	d9 f7       	brne	.-10     	; 0x1e8 <cc2500_init+0x44>
_delay_ms(1000);
uart_tx(self_adress);
_delay_ms(1000);
uart_tx(self_adress);
_delay_ms(1000);
}
 1f2:	08 95       	ret

000001f4 <sw_init>:
void sw_init(void)
{


DDRD&=~((1<<2)|(1<<3));
 1f4:	81 b3       	in	r24, 0x11	; 17
 1f6:	83 7f       	andi	r24, 0xF3	; 243
 1f8:	81 bb       	out	0x11, r24	; 17
PORTD|=(1<<2)|(1<<3);
 1fa:	82 b3       	in	r24, 0x12	; 18
 1fc:	8c 60       	ori	r24, 0x0C	; 12
 1fe:	82 bb       	out	0x12, r24	; 18

DDRB&=~(1<<5);
 200:	bd 98       	cbi	0x17, 5	; 23
PORTB|=(1<<5);
 202:	c5 9a       	sbi	0x18, 5	; 24


}
 204:	08 95       	ret

00000206 <__vector_11>:



ISR(USART_RXC_vect)

{
 206:	1f 92       	push	r1
 208:	0f 92       	push	r0
 20a:	0f b6       	in	r0, 0x3f	; 63
 20c:	0f 92       	push	r0
 20e:	11 24       	eor	r1, r1
 210:	8f 93       	push	r24


k=UDR;
 212:	8c b1       	in	r24, 0x0c	; 12
 214:	80 93 ce 00 	sts	0x00CE, r24
//UDR=k;

}
 218:	8f 91       	pop	r24
 21a:	0f 90       	pop	r0
 21c:	0f be       	out	0x3f, r0	; 63
 21e:	0f 90       	pop	r0
 220:	1f 90       	pop	r1
 222:	18 95       	reti

00000224 <main>:
int main()
{

sw_init();
 224:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <sw_init>
buzzer_init ;
 228:	a3 9a       	sbi	0x14, 3	; 20
unsigned int i=0,j=0,temp[10];
unsigned int rec_num,p;

void uart_init()
{
UBRRL=25;
 22a:	89 e1       	ldi	r24, 0x19	; 25
 22c:	89 b9       	out	0x09, r24	; 9
UCSRB|=(1<<3)|(1<<4)|(1<<7);
 22e:	8a b1       	in	r24, 0x0a	; 10
 230:	88 69       	ori	r24, 0x98	; 152
 232:	8a b9       	out	0x0a, r24	; 10
UCSRC|=(1<<7)|(1<<1)|(1<<2);
 234:	80 b5       	in	r24, 0x20	; 32
 236:	86 68       	ori	r24, 0x86	; 134
 238:	80 bd       	out	0x20, r24	; 32

uart_init();
cc2500_init();
 23a:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <cc2500_init>
sei();
 23e:	78 94       	sei
}

void uart_tx(unsigned char data)
{
while(!(UCSRA&(1<<UDRE)));
UDR=data;
 240:	31 e6       	ldi	r19, 0x61	; 97
while(1)
{

//uart_tx('k');
if(!status_sw1)
 242:	22 e6       	ldi	r18, 0x62	; 98
 244:	93 e6       	ldi	r25, 0x63	; 99
 246:	82 99       	sbic	0x10, 2	; 16
 248:	04 c0       	rjmp	.+8      	; 0x252 <main+0x2e>
UCSRC|=(1<<7)|(1<<1)|(1<<2);
}

void uart_tx(unsigned char data)
{
while(!(UCSRA&(1<<UDRE)));
 24a:	5d 9b       	sbis	0x0b, 5	; 11
 24c:	fe cf       	rjmp	.-4      	; 0x24a <main+0x26>
UDR=data;
 24e:	3c b9       	out	0x0c, r19	; 12
 250:	0b c0       	rjmp	.+22     	; 0x268 <main+0x44>


}


else if(!status_sw2)
 252:	83 99       	sbic	0x10, 3	; 16
 254:	04 c0       	rjmp	.+8      	; 0x25e <main+0x3a>
UCSRC|=(1<<7)|(1<<1)|(1<<2);
}

void uart_tx(unsigned char data)
{
while(!(UCSRA&(1<<UDRE)));
 256:	5d 9b       	sbis	0x0b, 5	; 11
 258:	fe cf       	rjmp	.-4      	; 0x256 <main+0x32>
UDR=data;
 25a:	2c b9       	out	0x0c, r18	; 12
 25c:	05 c0       	rjmp	.+10     	; 0x268 <main+0x44>



}

else if(!status_sw3)
 25e:	b5 99       	sbic	0x16, 5	; 22
 260:	03 c0       	rjmp	.+6      	; 0x268 <main+0x44>
UCSRC|=(1<<7)|(1<<1)|(1<<2);
}

void uart_tx(unsigned char data)
{
while(!(UCSRA&(1<<UDRE)));
 262:	5d 9b       	sbis	0x0b, 5	; 11
 264:	fe cf       	rjmp	.-4      	; 0x262 <main+0x3e>
UDR=data;
 266:	9c b9       	out	0x0c, r25	; 12



}

if(k=='a')
 268:	80 91 ce 00 	lds	r24, 0x00CE
 26c:	81 36       	cpi	r24, 0x61	; 97
 26e:	11 f4       	brne	.+4      	; 0x274 <main+0x50>
{
buzzer_on ;
 270:	ab 9a       	sbi	0x15, 3	; 21
 272:	e9 cf       	rjmp	.-46     	; 0x246 <main+0x22>
}



else if(k=='b')
 274:	80 91 ce 00 	lds	r24, 0x00CE
 278:	82 36       	cpi	r24, 0x62	; 98
 27a:	21 f0       	breq	.+8      	; 0x284 <main+0x60>
{
buzzer_off ;
}
else if(k=='c')
 27c:	80 91 ce 00 	lds	r24, 0x00CE
 280:	83 36       	cpi	r24, 0x63	; 99
 282:	09 f7       	brne	.-62     	; 0x246 <main+0x22>
{
buzzer_off ;
 284:	ab 98       	cbi	0x15, 3	; 21
 286:	df cf       	rjmp	.-66     	; 0x246 <main+0x22>

00000288 <uart_tx_num>:
}


}
void uart_tx_num(int num)
{
 288:	0f 93       	push	r16
 28a:	1f 93       	push	r17
 28c:	df 93       	push	r29
 28e:	cf 93       	push	r28
 290:	cd b7       	in	r28, 0x3d	; 61
 292:	de b7       	in	r29, 0x3e	; 62
 294:	2a 97       	sbiw	r28, 0x0a	; 10
 296:	0f b6       	in	r0, 0x3f	; 63
 298:	f8 94       	cli
 29a:	de bf       	out	0x3e, r29	; 62
 29c:	0f be       	out	0x3f, r0	; 63
 29e:	cd bf       	out	0x3d, r28	; 61
unsigned char data[10];
sprintf(data,"%d",num);
 2a0:	00 d0       	rcall	.+0      	; 0x2a2 <uart_tx_num+0x1a>
 2a2:	00 d0       	rcall	.+0      	; 0x2a4 <uart_tx_num+0x1c>
 2a4:	00 d0       	rcall	.+0      	; 0x2a6 <uart_tx_num+0x1e>
 2a6:	ed b7       	in	r30, 0x3d	; 61
 2a8:	fe b7       	in	r31, 0x3e	; 62
 2aa:	31 96       	adiw	r30, 0x01	; 1
 2ac:	8e 01       	movw	r16, r28
 2ae:	0f 5f       	subi	r16, 0xFF	; 255
 2b0:	1f 4f       	sbci	r17, 0xFF	; 255
 2b2:	ad b7       	in	r26, 0x3d	; 61
 2b4:	be b7       	in	r27, 0x3e	; 62
 2b6:	12 96       	adiw	r26, 0x02	; 2
 2b8:	1c 93       	st	X, r17
 2ba:	0e 93       	st	-X, r16
 2bc:	11 97       	sbiw	r26, 0x01	; 1
 2be:	20 e6       	ldi	r18, 0x60	; 96
 2c0:	30 e0       	ldi	r19, 0x00	; 0
 2c2:	33 83       	std	Z+3, r19	; 0x03
 2c4:	22 83       	std	Z+2, r18	; 0x02
 2c6:	95 83       	std	Z+5, r25	; 0x05
 2c8:	84 83       	std	Z+4, r24	; 0x04
 2ca:	0e 94 7d 01 	call	0x2fa	; 0x2fa <sprintf>

uart_tx_string(data);
 2ce:	8d b7       	in	r24, 0x3d	; 61
 2d0:	9e b7       	in	r25, 0x3e	; 62
 2d2:	06 96       	adiw	r24, 0x06	; 6
 2d4:	0f b6       	in	r0, 0x3f	; 63
 2d6:	f8 94       	cli
 2d8:	9e bf       	out	0x3e, r25	; 62
 2da:	0f be       	out	0x3f, r0	; 63
 2dc:	8d bf       	out	0x3d, r24	; 61
 2de:	c8 01       	movw	r24, r16
 2e0:	0e 94 56 00 	call	0xac	; 0xac <uart_tx_string>
}
 2e4:	2a 96       	adiw	r28, 0x0a	; 10
 2e6:	0f b6       	in	r0, 0x3f	; 63
 2e8:	f8 94       	cli
 2ea:	de bf       	out	0x3e, r29	; 62
 2ec:	0f be       	out	0x3f, r0	; 63
 2ee:	cd bf       	out	0x3d, r28	; 61
 2f0:	cf 91       	pop	r28
 2f2:	df 91       	pop	r29
 2f4:	1f 91       	pop	r17
 2f6:	0f 91       	pop	r16
 2f8:	08 95       	ret

000002fa <sprintf>:
 2fa:	ae e0       	ldi	r26, 0x0E	; 14
 2fc:	b0 e0       	ldi	r27, 0x00	; 0
 2fe:	e3 e8       	ldi	r30, 0x83	; 131
 300:	f1 e0       	ldi	r31, 0x01	; 1
 302:	0c 94 2c 04 	jmp	0x858	; 0x858 <__prologue_saves__+0x1c>
 306:	0d 89       	ldd	r16, Y+21	; 0x15
 308:	1e 89       	ldd	r17, Y+22	; 0x16
 30a:	86 e0       	ldi	r24, 0x06	; 6
 30c:	8c 83       	std	Y+4, r24	; 0x04
 30e:	1a 83       	std	Y+2, r17	; 0x02
 310:	09 83       	std	Y+1, r16	; 0x01
 312:	8f ef       	ldi	r24, 0xFF	; 255
 314:	9f e7       	ldi	r25, 0x7F	; 127
 316:	9e 83       	std	Y+6, r25	; 0x06
 318:	8d 83       	std	Y+5, r24	; 0x05
 31a:	9e 01       	movw	r18, r28
 31c:	27 5e       	subi	r18, 0xE7	; 231
 31e:	3f 4f       	sbci	r19, 0xFF	; 255
 320:	ce 01       	movw	r24, r28
 322:	01 96       	adiw	r24, 0x01	; 1
 324:	6f 89       	ldd	r22, Y+23	; 0x17
 326:	78 8d       	ldd	r23, Y+24	; 0x18
 328:	a9 01       	movw	r20, r18
 32a:	0e 94 a1 01 	call	0x342	; 0x342 <vfprintf>
 32e:	2f 81       	ldd	r18, Y+7	; 0x07
 330:	38 85       	ldd	r19, Y+8	; 0x08
 332:	02 0f       	add	r16, r18
 334:	13 1f       	adc	r17, r19
 336:	f8 01       	movw	r30, r16
 338:	10 82       	st	Z, r1
 33a:	2e 96       	adiw	r28, 0x0e	; 14
 33c:	e4 e0       	ldi	r30, 0x04	; 4
 33e:	0c 94 48 04 	jmp	0x890	; 0x890 <__epilogue_restores__+0x1c>

00000342 <vfprintf>:
 342:	ab e0       	ldi	r26, 0x0B	; 11
 344:	b0 e0       	ldi	r27, 0x00	; 0
 346:	e7 ea       	ldi	r30, 0xA7	; 167
 348:	f1 e0       	ldi	r31, 0x01	; 1
 34a:	0c 94 1e 04 	jmp	0x83c	; 0x83c <__prologue_saves__>
 34e:	3c 01       	movw	r6, r24
 350:	2b 01       	movw	r4, r22
 352:	5a 01       	movw	r10, r20
 354:	fc 01       	movw	r30, r24
 356:	17 82       	std	Z+7, r1	; 0x07
 358:	16 82       	std	Z+6, r1	; 0x06
 35a:	83 81       	ldd	r24, Z+3	; 0x03
 35c:	81 fd       	sbrc	r24, 1
 35e:	03 c0       	rjmp	.+6      	; 0x366 <vfprintf+0x24>
 360:	6f ef       	ldi	r22, 0xFF	; 255
 362:	7f ef       	ldi	r23, 0xFF	; 255
 364:	c6 c1       	rjmp	.+908    	; 0x6f2 <__stack+0x293>
 366:	9a e0       	ldi	r25, 0x0A	; 10
 368:	89 2e       	mov	r8, r25
 36a:	1e 01       	movw	r2, r28
 36c:	08 94       	sec
 36e:	21 1c       	adc	r2, r1
 370:	31 1c       	adc	r3, r1
 372:	f3 01       	movw	r30, r6
 374:	23 81       	ldd	r18, Z+3	; 0x03
 376:	f2 01       	movw	r30, r4
 378:	23 fd       	sbrc	r18, 3
 37a:	85 91       	lpm	r24, Z+
 37c:	23 ff       	sbrs	r18, 3
 37e:	81 91       	ld	r24, Z+
 380:	2f 01       	movw	r4, r30
 382:	88 23       	and	r24, r24
 384:	09 f4       	brne	.+2      	; 0x388 <vfprintf+0x46>
 386:	b2 c1       	rjmp	.+868    	; 0x6ec <__stack+0x28d>
 388:	85 32       	cpi	r24, 0x25	; 37
 38a:	39 f4       	brne	.+14     	; 0x39a <vfprintf+0x58>
 38c:	23 fd       	sbrc	r18, 3
 38e:	85 91       	lpm	r24, Z+
 390:	23 ff       	sbrs	r18, 3
 392:	81 91       	ld	r24, Z+
 394:	2f 01       	movw	r4, r30
 396:	85 32       	cpi	r24, 0x25	; 37
 398:	29 f4       	brne	.+10     	; 0x3a4 <vfprintf+0x62>
 39a:	90 e0       	ldi	r25, 0x00	; 0
 39c:	b3 01       	movw	r22, r6
 39e:	0e 94 94 03 	call	0x728	; 0x728 <fputc>
 3a2:	e7 cf       	rjmp	.-50     	; 0x372 <vfprintf+0x30>
 3a4:	98 2f       	mov	r25, r24
 3a6:	ff 24       	eor	r15, r15
 3a8:	ee 24       	eor	r14, r14
 3aa:	99 24       	eor	r9, r9
 3ac:	ff e1       	ldi	r31, 0x1F	; 31
 3ae:	ff 15       	cp	r31, r15
 3b0:	d0 f0       	brcs	.+52     	; 0x3e6 <vfprintf+0xa4>
 3b2:	9b 32       	cpi	r25, 0x2B	; 43
 3b4:	69 f0       	breq	.+26     	; 0x3d0 <vfprintf+0x8e>
 3b6:	9c 32       	cpi	r25, 0x2C	; 44
 3b8:	28 f4       	brcc	.+10     	; 0x3c4 <vfprintf+0x82>
 3ba:	90 32       	cpi	r25, 0x20	; 32
 3bc:	59 f0       	breq	.+22     	; 0x3d4 <vfprintf+0x92>
 3be:	93 32       	cpi	r25, 0x23	; 35
 3c0:	91 f4       	brne	.+36     	; 0x3e6 <vfprintf+0xa4>
 3c2:	0e c0       	rjmp	.+28     	; 0x3e0 <vfprintf+0x9e>
 3c4:	9d 32       	cpi	r25, 0x2D	; 45
 3c6:	49 f0       	breq	.+18     	; 0x3da <vfprintf+0x98>
 3c8:	90 33       	cpi	r25, 0x30	; 48
 3ca:	69 f4       	brne	.+26     	; 0x3e6 <vfprintf+0xa4>
 3cc:	41 e0       	ldi	r20, 0x01	; 1
 3ce:	24 c0       	rjmp	.+72     	; 0x418 <vfprintf+0xd6>
 3d0:	52 e0       	ldi	r21, 0x02	; 2
 3d2:	f5 2a       	or	r15, r21
 3d4:	84 e0       	ldi	r24, 0x04	; 4
 3d6:	f8 2a       	or	r15, r24
 3d8:	28 c0       	rjmp	.+80     	; 0x42a <vfprintf+0xe8>
 3da:	98 e0       	ldi	r25, 0x08	; 8
 3dc:	f9 2a       	or	r15, r25
 3de:	25 c0       	rjmp	.+74     	; 0x42a <vfprintf+0xe8>
 3e0:	e0 e1       	ldi	r30, 0x10	; 16
 3e2:	fe 2a       	or	r15, r30
 3e4:	22 c0       	rjmp	.+68     	; 0x42a <vfprintf+0xe8>
 3e6:	f7 fc       	sbrc	r15, 7
 3e8:	29 c0       	rjmp	.+82     	; 0x43c <vfprintf+0xfa>
 3ea:	89 2f       	mov	r24, r25
 3ec:	80 53       	subi	r24, 0x30	; 48
 3ee:	8a 30       	cpi	r24, 0x0A	; 10
 3f0:	70 f4       	brcc	.+28     	; 0x40e <vfprintf+0xcc>
 3f2:	f6 fe       	sbrs	r15, 6
 3f4:	05 c0       	rjmp	.+10     	; 0x400 <vfprintf+0xbe>
 3f6:	98 9c       	mul	r9, r8
 3f8:	90 2c       	mov	r9, r0
 3fa:	11 24       	eor	r1, r1
 3fc:	98 0e       	add	r9, r24
 3fe:	15 c0       	rjmp	.+42     	; 0x42a <vfprintf+0xe8>
 400:	e8 9c       	mul	r14, r8
 402:	e0 2c       	mov	r14, r0
 404:	11 24       	eor	r1, r1
 406:	e8 0e       	add	r14, r24
 408:	f0 e2       	ldi	r31, 0x20	; 32
 40a:	ff 2a       	or	r15, r31
 40c:	0e c0       	rjmp	.+28     	; 0x42a <vfprintf+0xe8>
 40e:	9e 32       	cpi	r25, 0x2E	; 46
 410:	29 f4       	brne	.+10     	; 0x41c <vfprintf+0xda>
 412:	f6 fc       	sbrc	r15, 6
 414:	6b c1       	rjmp	.+726    	; 0x6ec <__stack+0x28d>
 416:	40 e4       	ldi	r20, 0x40	; 64
 418:	f4 2a       	or	r15, r20
 41a:	07 c0       	rjmp	.+14     	; 0x42a <vfprintf+0xe8>
 41c:	9c 36       	cpi	r25, 0x6C	; 108
 41e:	19 f4       	brne	.+6      	; 0x426 <vfprintf+0xe4>
 420:	50 e8       	ldi	r21, 0x80	; 128
 422:	f5 2a       	or	r15, r21
 424:	02 c0       	rjmp	.+4      	; 0x42a <vfprintf+0xe8>
 426:	98 36       	cpi	r25, 0x68	; 104
 428:	49 f4       	brne	.+18     	; 0x43c <vfprintf+0xfa>
 42a:	f2 01       	movw	r30, r4
 42c:	23 fd       	sbrc	r18, 3
 42e:	95 91       	lpm	r25, Z+
 430:	23 ff       	sbrs	r18, 3
 432:	91 91       	ld	r25, Z+
 434:	2f 01       	movw	r4, r30
 436:	99 23       	and	r25, r25
 438:	09 f0       	breq	.+2      	; 0x43c <vfprintf+0xfa>
 43a:	b8 cf       	rjmp	.-144    	; 0x3ac <vfprintf+0x6a>
 43c:	89 2f       	mov	r24, r25
 43e:	85 54       	subi	r24, 0x45	; 69
 440:	83 30       	cpi	r24, 0x03	; 3
 442:	18 f0       	brcs	.+6      	; 0x44a <vfprintf+0x108>
 444:	80 52       	subi	r24, 0x20	; 32
 446:	83 30       	cpi	r24, 0x03	; 3
 448:	38 f4       	brcc	.+14     	; 0x458 <vfprintf+0x116>
 44a:	44 e0       	ldi	r20, 0x04	; 4
 44c:	50 e0       	ldi	r21, 0x00	; 0
 44e:	a4 0e       	add	r10, r20
 450:	b5 1e       	adc	r11, r21
 452:	5f e3       	ldi	r21, 0x3F	; 63
 454:	59 83       	std	Y+1, r21	; 0x01
 456:	0f c0       	rjmp	.+30     	; 0x476 <__stack+0x17>
 458:	93 36       	cpi	r25, 0x63	; 99
 45a:	31 f0       	breq	.+12     	; 0x468 <__stack+0x9>
 45c:	93 37       	cpi	r25, 0x73	; 115
 45e:	79 f0       	breq	.+30     	; 0x47e <__stack+0x1f>
 460:	93 35       	cpi	r25, 0x53	; 83
 462:	09 f0       	breq	.+2      	; 0x466 <__stack+0x7>
 464:	56 c0       	rjmp	.+172    	; 0x512 <__stack+0xb3>
 466:	20 c0       	rjmp	.+64     	; 0x4a8 <__stack+0x49>
 468:	f5 01       	movw	r30, r10
 46a:	80 81       	ld	r24, Z
 46c:	89 83       	std	Y+1, r24	; 0x01
 46e:	42 e0       	ldi	r20, 0x02	; 2
 470:	50 e0       	ldi	r21, 0x00	; 0
 472:	a4 0e       	add	r10, r20
 474:	b5 1e       	adc	r11, r21
 476:	61 01       	movw	r12, r2
 478:	01 e0       	ldi	r16, 0x01	; 1
 47a:	10 e0       	ldi	r17, 0x00	; 0
 47c:	12 c0       	rjmp	.+36     	; 0x4a2 <__stack+0x43>
 47e:	f5 01       	movw	r30, r10
 480:	c0 80       	ld	r12, Z
 482:	d1 80       	ldd	r13, Z+1	; 0x01
 484:	f6 fc       	sbrc	r15, 6
 486:	03 c0       	rjmp	.+6      	; 0x48e <__stack+0x2f>
 488:	6f ef       	ldi	r22, 0xFF	; 255
 48a:	7f ef       	ldi	r23, 0xFF	; 255
 48c:	02 c0       	rjmp	.+4      	; 0x492 <__stack+0x33>
 48e:	69 2d       	mov	r22, r9
 490:	70 e0       	ldi	r23, 0x00	; 0
 492:	42 e0       	ldi	r20, 0x02	; 2
 494:	50 e0       	ldi	r21, 0x00	; 0
 496:	a4 0e       	add	r10, r20
 498:	b5 1e       	adc	r11, r21
 49a:	c6 01       	movw	r24, r12
 49c:	0e 94 89 03 	call	0x712	; 0x712 <strnlen>
 4a0:	8c 01       	movw	r16, r24
 4a2:	5f e7       	ldi	r21, 0x7F	; 127
 4a4:	f5 22       	and	r15, r21
 4a6:	14 c0       	rjmp	.+40     	; 0x4d0 <__stack+0x71>
 4a8:	f5 01       	movw	r30, r10
 4aa:	c0 80       	ld	r12, Z
 4ac:	d1 80       	ldd	r13, Z+1	; 0x01
 4ae:	f6 fc       	sbrc	r15, 6
 4b0:	03 c0       	rjmp	.+6      	; 0x4b8 <__stack+0x59>
 4b2:	6f ef       	ldi	r22, 0xFF	; 255
 4b4:	7f ef       	ldi	r23, 0xFF	; 255
 4b6:	02 c0       	rjmp	.+4      	; 0x4bc <__stack+0x5d>
 4b8:	69 2d       	mov	r22, r9
 4ba:	70 e0       	ldi	r23, 0x00	; 0
 4bc:	42 e0       	ldi	r20, 0x02	; 2
 4be:	50 e0       	ldi	r21, 0x00	; 0
 4c0:	a4 0e       	add	r10, r20
 4c2:	b5 1e       	adc	r11, r21
 4c4:	c6 01       	movw	r24, r12
 4c6:	0e 94 7e 03 	call	0x6fc	; 0x6fc <strnlen_P>
 4ca:	8c 01       	movw	r16, r24
 4cc:	50 e8       	ldi	r21, 0x80	; 128
 4ce:	f5 2a       	or	r15, r21
 4d0:	f3 fe       	sbrs	r15, 3
 4d2:	07 c0       	rjmp	.+14     	; 0x4e2 <__stack+0x83>
 4d4:	1a c0       	rjmp	.+52     	; 0x50a <__stack+0xab>
 4d6:	80 e2       	ldi	r24, 0x20	; 32
 4d8:	90 e0       	ldi	r25, 0x00	; 0
 4da:	b3 01       	movw	r22, r6
 4dc:	0e 94 94 03 	call	0x728	; 0x728 <fputc>
 4e0:	ea 94       	dec	r14
 4e2:	8e 2d       	mov	r24, r14
 4e4:	90 e0       	ldi	r25, 0x00	; 0
 4e6:	08 17       	cp	r16, r24
 4e8:	19 07       	cpc	r17, r25
 4ea:	a8 f3       	brcs	.-22     	; 0x4d6 <__stack+0x77>
 4ec:	0e c0       	rjmp	.+28     	; 0x50a <__stack+0xab>
 4ee:	f6 01       	movw	r30, r12
 4f0:	f7 fc       	sbrc	r15, 7
 4f2:	85 91       	lpm	r24, Z+
 4f4:	f7 fe       	sbrs	r15, 7
 4f6:	81 91       	ld	r24, Z+
 4f8:	6f 01       	movw	r12, r30
 4fa:	90 e0       	ldi	r25, 0x00	; 0
 4fc:	b3 01       	movw	r22, r6
 4fe:	0e 94 94 03 	call	0x728	; 0x728 <fputc>
 502:	e1 10       	cpse	r14, r1
 504:	ea 94       	dec	r14
 506:	01 50       	subi	r16, 0x01	; 1
 508:	10 40       	sbci	r17, 0x00	; 0
 50a:	01 15       	cp	r16, r1
 50c:	11 05       	cpc	r17, r1
 50e:	79 f7       	brne	.-34     	; 0x4ee <__stack+0x8f>
 510:	ea c0       	rjmp	.+468    	; 0x6e6 <__stack+0x287>
 512:	94 36       	cpi	r25, 0x64	; 100
 514:	11 f0       	breq	.+4      	; 0x51a <__stack+0xbb>
 516:	99 36       	cpi	r25, 0x69	; 105
 518:	69 f5       	brne	.+90     	; 0x574 <__stack+0x115>
 51a:	f7 fe       	sbrs	r15, 7
 51c:	08 c0       	rjmp	.+16     	; 0x52e <__stack+0xcf>
 51e:	f5 01       	movw	r30, r10
 520:	20 81       	ld	r18, Z
 522:	31 81       	ldd	r19, Z+1	; 0x01
 524:	42 81       	ldd	r20, Z+2	; 0x02
 526:	53 81       	ldd	r21, Z+3	; 0x03
 528:	84 e0       	ldi	r24, 0x04	; 4
 52a:	90 e0       	ldi	r25, 0x00	; 0
 52c:	0a c0       	rjmp	.+20     	; 0x542 <__stack+0xe3>
 52e:	f5 01       	movw	r30, r10
 530:	80 81       	ld	r24, Z
 532:	91 81       	ldd	r25, Z+1	; 0x01
 534:	9c 01       	movw	r18, r24
 536:	44 27       	eor	r20, r20
 538:	37 fd       	sbrc	r19, 7
 53a:	40 95       	com	r20
 53c:	54 2f       	mov	r21, r20
 53e:	82 e0       	ldi	r24, 0x02	; 2
 540:	90 e0       	ldi	r25, 0x00	; 0
 542:	a8 0e       	add	r10, r24
 544:	b9 1e       	adc	r11, r25
 546:	9f e6       	ldi	r25, 0x6F	; 111
 548:	f9 22       	and	r15, r25
 54a:	57 ff       	sbrs	r21, 7
 54c:	09 c0       	rjmp	.+18     	; 0x560 <__stack+0x101>
 54e:	50 95       	com	r21
 550:	40 95       	com	r20
 552:	30 95       	com	r19
 554:	21 95       	neg	r18
 556:	3f 4f       	sbci	r19, 0xFF	; 255
 558:	4f 4f       	sbci	r20, 0xFF	; 255
 55a:	5f 4f       	sbci	r21, 0xFF	; 255
 55c:	e0 e8       	ldi	r30, 0x80	; 128
 55e:	fe 2a       	or	r15, r30
 560:	ca 01       	movw	r24, r20
 562:	b9 01       	movw	r22, r18
 564:	a1 01       	movw	r20, r2
 566:	2a e0       	ldi	r18, 0x0A	; 10
 568:	30 e0       	ldi	r19, 0x00	; 0
 56a:	0e 94 c0 03 	call	0x780	; 0x780 <__ultoa_invert>
 56e:	d8 2e       	mov	r13, r24
 570:	d2 18       	sub	r13, r2
 572:	40 c0       	rjmp	.+128    	; 0x5f4 <__stack+0x195>
 574:	95 37       	cpi	r25, 0x75	; 117
 576:	29 f4       	brne	.+10     	; 0x582 <__stack+0x123>
 578:	1f 2d       	mov	r17, r15
 57a:	1f 7e       	andi	r17, 0xEF	; 239
 57c:	2a e0       	ldi	r18, 0x0A	; 10
 57e:	30 e0       	ldi	r19, 0x00	; 0
 580:	1d c0       	rjmp	.+58     	; 0x5bc <__stack+0x15d>
 582:	1f 2d       	mov	r17, r15
 584:	19 7f       	andi	r17, 0xF9	; 249
 586:	9f 36       	cpi	r25, 0x6F	; 111
 588:	61 f0       	breq	.+24     	; 0x5a2 <__stack+0x143>
 58a:	90 37       	cpi	r25, 0x70	; 112
 58c:	20 f4       	brcc	.+8      	; 0x596 <__stack+0x137>
 58e:	98 35       	cpi	r25, 0x58	; 88
 590:	09 f0       	breq	.+2      	; 0x594 <__stack+0x135>
 592:	ac c0       	rjmp	.+344    	; 0x6ec <__stack+0x28d>
 594:	0f c0       	rjmp	.+30     	; 0x5b4 <__stack+0x155>
 596:	90 37       	cpi	r25, 0x70	; 112
 598:	39 f0       	breq	.+14     	; 0x5a8 <__stack+0x149>
 59a:	98 37       	cpi	r25, 0x78	; 120
 59c:	09 f0       	breq	.+2      	; 0x5a0 <__stack+0x141>
 59e:	a6 c0       	rjmp	.+332    	; 0x6ec <__stack+0x28d>
 5a0:	04 c0       	rjmp	.+8      	; 0x5aa <__stack+0x14b>
 5a2:	28 e0       	ldi	r18, 0x08	; 8
 5a4:	30 e0       	ldi	r19, 0x00	; 0
 5a6:	0a c0       	rjmp	.+20     	; 0x5bc <__stack+0x15d>
 5a8:	10 61       	ori	r17, 0x10	; 16
 5aa:	14 fd       	sbrc	r17, 4
 5ac:	14 60       	ori	r17, 0x04	; 4
 5ae:	20 e1       	ldi	r18, 0x10	; 16
 5b0:	30 e0       	ldi	r19, 0x00	; 0
 5b2:	04 c0       	rjmp	.+8      	; 0x5bc <__stack+0x15d>
 5b4:	14 fd       	sbrc	r17, 4
 5b6:	16 60       	ori	r17, 0x06	; 6
 5b8:	20 e1       	ldi	r18, 0x10	; 16
 5ba:	32 e0       	ldi	r19, 0x02	; 2
 5bc:	17 ff       	sbrs	r17, 7
 5be:	08 c0       	rjmp	.+16     	; 0x5d0 <__stack+0x171>
 5c0:	f5 01       	movw	r30, r10
 5c2:	60 81       	ld	r22, Z
 5c4:	71 81       	ldd	r23, Z+1	; 0x01
 5c6:	82 81       	ldd	r24, Z+2	; 0x02
 5c8:	93 81       	ldd	r25, Z+3	; 0x03
 5ca:	44 e0       	ldi	r20, 0x04	; 4
 5cc:	50 e0       	ldi	r21, 0x00	; 0
 5ce:	08 c0       	rjmp	.+16     	; 0x5e0 <__stack+0x181>
 5d0:	f5 01       	movw	r30, r10
 5d2:	80 81       	ld	r24, Z
 5d4:	91 81       	ldd	r25, Z+1	; 0x01
 5d6:	bc 01       	movw	r22, r24
 5d8:	80 e0       	ldi	r24, 0x00	; 0
 5da:	90 e0       	ldi	r25, 0x00	; 0
 5dc:	42 e0       	ldi	r20, 0x02	; 2
 5de:	50 e0       	ldi	r21, 0x00	; 0
 5e0:	a4 0e       	add	r10, r20
 5e2:	b5 1e       	adc	r11, r21
 5e4:	a1 01       	movw	r20, r2
 5e6:	0e 94 c0 03 	call	0x780	; 0x780 <__ultoa_invert>
 5ea:	d8 2e       	mov	r13, r24
 5ec:	d2 18       	sub	r13, r2
 5ee:	8f e7       	ldi	r24, 0x7F	; 127
 5f0:	f8 2e       	mov	r15, r24
 5f2:	f1 22       	and	r15, r17
 5f4:	f6 fe       	sbrs	r15, 6
 5f6:	0b c0       	rjmp	.+22     	; 0x60e <__stack+0x1af>
 5f8:	5e ef       	ldi	r21, 0xFE	; 254
 5fa:	f5 22       	and	r15, r21
 5fc:	d9 14       	cp	r13, r9
 5fe:	38 f4       	brcc	.+14     	; 0x60e <__stack+0x1af>
 600:	f4 fe       	sbrs	r15, 4
 602:	07 c0       	rjmp	.+14     	; 0x612 <__stack+0x1b3>
 604:	f2 fc       	sbrc	r15, 2
 606:	05 c0       	rjmp	.+10     	; 0x612 <__stack+0x1b3>
 608:	8f ee       	ldi	r24, 0xEF	; 239
 60a:	f8 22       	and	r15, r24
 60c:	02 c0       	rjmp	.+4      	; 0x612 <__stack+0x1b3>
 60e:	1d 2d       	mov	r17, r13
 610:	01 c0       	rjmp	.+2      	; 0x614 <__stack+0x1b5>
 612:	19 2d       	mov	r17, r9
 614:	f4 fe       	sbrs	r15, 4
 616:	0d c0       	rjmp	.+26     	; 0x632 <__stack+0x1d3>
 618:	fe 01       	movw	r30, r28
 61a:	ed 0d       	add	r30, r13
 61c:	f1 1d       	adc	r31, r1
 61e:	80 81       	ld	r24, Z
 620:	80 33       	cpi	r24, 0x30	; 48
 622:	19 f4       	brne	.+6      	; 0x62a <__stack+0x1cb>
 624:	99 ee       	ldi	r25, 0xE9	; 233
 626:	f9 22       	and	r15, r25
 628:	08 c0       	rjmp	.+16     	; 0x63a <__stack+0x1db>
 62a:	1f 5f       	subi	r17, 0xFF	; 255
 62c:	f2 fe       	sbrs	r15, 2
 62e:	05 c0       	rjmp	.+10     	; 0x63a <__stack+0x1db>
 630:	03 c0       	rjmp	.+6      	; 0x638 <__stack+0x1d9>
 632:	8f 2d       	mov	r24, r15
 634:	86 78       	andi	r24, 0x86	; 134
 636:	09 f0       	breq	.+2      	; 0x63a <__stack+0x1db>
 638:	1f 5f       	subi	r17, 0xFF	; 255
 63a:	0f 2d       	mov	r16, r15
 63c:	f3 fc       	sbrc	r15, 3
 63e:	14 c0       	rjmp	.+40     	; 0x668 <__stack+0x209>
 640:	f0 fe       	sbrs	r15, 0
 642:	0f c0       	rjmp	.+30     	; 0x662 <__stack+0x203>
 644:	1e 15       	cp	r17, r14
 646:	10 f0       	brcs	.+4      	; 0x64c <__stack+0x1ed>
 648:	9d 2c       	mov	r9, r13
 64a:	0b c0       	rjmp	.+22     	; 0x662 <__stack+0x203>
 64c:	9d 2c       	mov	r9, r13
 64e:	9e 0c       	add	r9, r14
 650:	91 1a       	sub	r9, r17
 652:	1e 2d       	mov	r17, r14
 654:	06 c0       	rjmp	.+12     	; 0x662 <__stack+0x203>
 656:	80 e2       	ldi	r24, 0x20	; 32
 658:	90 e0       	ldi	r25, 0x00	; 0
 65a:	b3 01       	movw	r22, r6
 65c:	0e 94 94 03 	call	0x728	; 0x728 <fputc>
 660:	1f 5f       	subi	r17, 0xFF	; 255
 662:	1e 15       	cp	r17, r14
 664:	c0 f3       	brcs	.-16     	; 0x656 <__stack+0x1f7>
 666:	04 c0       	rjmp	.+8      	; 0x670 <__stack+0x211>
 668:	1e 15       	cp	r17, r14
 66a:	10 f4       	brcc	.+4      	; 0x670 <__stack+0x211>
 66c:	e1 1a       	sub	r14, r17
 66e:	01 c0       	rjmp	.+2      	; 0x672 <__stack+0x213>
 670:	ee 24       	eor	r14, r14
 672:	04 ff       	sbrs	r16, 4
 674:	0f c0       	rjmp	.+30     	; 0x694 <__stack+0x235>
 676:	80 e3       	ldi	r24, 0x30	; 48
 678:	90 e0       	ldi	r25, 0x00	; 0
 67a:	b3 01       	movw	r22, r6
 67c:	0e 94 94 03 	call	0x728	; 0x728 <fputc>
 680:	02 ff       	sbrs	r16, 2
 682:	1d c0       	rjmp	.+58     	; 0x6be <__stack+0x25f>
 684:	01 fd       	sbrc	r16, 1
 686:	03 c0       	rjmp	.+6      	; 0x68e <__stack+0x22f>
 688:	88 e7       	ldi	r24, 0x78	; 120
 68a:	90 e0       	ldi	r25, 0x00	; 0
 68c:	0e c0       	rjmp	.+28     	; 0x6aa <__stack+0x24b>
 68e:	88 e5       	ldi	r24, 0x58	; 88
 690:	90 e0       	ldi	r25, 0x00	; 0
 692:	0b c0       	rjmp	.+22     	; 0x6aa <__stack+0x24b>
 694:	80 2f       	mov	r24, r16
 696:	86 78       	andi	r24, 0x86	; 134
 698:	91 f0       	breq	.+36     	; 0x6be <__stack+0x25f>
 69a:	01 ff       	sbrs	r16, 1
 69c:	02 c0       	rjmp	.+4      	; 0x6a2 <__stack+0x243>
 69e:	8b e2       	ldi	r24, 0x2B	; 43
 6a0:	01 c0       	rjmp	.+2      	; 0x6a4 <__stack+0x245>
 6a2:	80 e2       	ldi	r24, 0x20	; 32
 6a4:	f7 fc       	sbrc	r15, 7
 6a6:	8d e2       	ldi	r24, 0x2D	; 45
 6a8:	90 e0       	ldi	r25, 0x00	; 0
 6aa:	b3 01       	movw	r22, r6
 6ac:	0e 94 94 03 	call	0x728	; 0x728 <fputc>
 6b0:	06 c0       	rjmp	.+12     	; 0x6be <__stack+0x25f>
 6b2:	80 e3       	ldi	r24, 0x30	; 48
 6b4:	90 e0       	ldi	r25, 0x00	; 0
 6b6:	b3 01       	movw	r22, r6
 6b8:	0e 94 94 03 	call	0x728	; 0x728 <fputc>
 6bc:	9a 94       	dec	r9
 6be:	d9 14       	cp	r13, r9
 6c0:	c0 f3       	brcs	.-16     	; 0x6b2 <__stack+0x253>
 6c2:	da 94       	dec	r13
 6c4:	f1 01       	movw	r30, r2
 6c6:	ed 0d       	add	r30, r13
 6c8:	f1 1d       	adc	r31, r1
 6ca:	80 81       	ld	r24, Z
 6cc:	90 e0       	ldi	r25, 0x00	; 0
 6ce:	b3 01       	movw	r22, r6
 6d0:	0e 94 94 03 	call	0x728	; 0x728 <fputc>
 6d4:	dd 20       	and	r13, r13
 6d6:	a9 f7       	brne	.-22     	; 0x6c2 <__stack+0x263>
 6d8:	06 c0       	rjmp	.+12     	; 0x6e6 <__stack+0x287>
 6da:	80 e2       	ldi	r24, 0x20	; 32
 6dc:	90 e0       	ldi	r25, 0x00	; 0
 6de:	b3 01       	movw	r22, r6
 6e0:	0e 94 94 03 	call	0x728	; 0x728 <fputc>
 6e4:	ea 94       	dec	r14
 6e6:	ee 20       	and	r14, r14
 6e8:	c1 f7       	brne	.-16     	; 0x6da <__stack+0x27b>
 6ea:	43 ce       	rjmp	.-890    	; 0x372 <vfprintf+0x30>
 6ec:	f3 01       	movw	r30, r6
 6ee:	66 81       	ldd	r22, Z+6	; 0x06
 6f0:	77 81       	ldd	r23, Z+7	; 0x07
 6f2:	cb 01       	movw	r24, r22
 6f4:	2b 96       	adiw	r28, 0x0b	; 11
 6f6:	e2 e1       	ldi	r30, 0x12	; 18
 6f8:	0c 94 3a 04 	jmp	0x874	; 0x874 <__epilogue_restores__>

000006fc <strnlen_P>:
 6fc:	fc 01       	movw	r30, r24
 6fe:	05 90       	lpm	r0, Z+
 700:	61 50       	subi	r22, 0x01	; 1
 702:	70 40       	sbci	r23, 0x00	; 0
 704:	01 10       	cpse	r0, r1
 706:	d8 f7       	brcc	.-10     	; 0x6fe <strnlen_P+0x2>
 708:	80 95       	com	r24
 70a:	90 95       	com	r25
 70c:	8e 0f       	add	r24, r30
 70e:	9f 1f       	adc	r25, r31
 710:	08 95       	ret

00000712 <strnlen>:
 712:	fc 01       	movw	r30, r24
 714:	61 50       	subi	r22, 0x01	; 1
 716:	70 40       	sbci	r23, 0x00	; 0
 718:	01 90       	ld	r0, Z+
 71a:	01 10       	cpse	r0, r1
 71c:	d8 f7       	brcc	.-10     	; 0x714 <strnlen+0x2>
 71e:	80 95       	com	r24
 720:	90 95       	com	r25
 722:	8e 0f       	add	r24, r30
 724:	9f 1f       	adc	r25, r31
 726:	08 95       	ret

00000728 <fputc>:
 728:	0f 93       	push	r16
 72a:	1f 93       	push	r17
 72c:	cf 93       	push	r28
 72e:	df 93       	push	r29
 730:	8c 01       	movw	r16, r24
 732:	eb 01       	movw	r28, r22
 734:	8b 81       	ldd	r24, Y+3	; 0x03
 736:	81 ff       	sbrs	r24, 1
 738:	1b c0       	rjmp	.+54     	; 0x770 <fputc+0x48>
 73a:	82 ff       	sbrs	r24, 2
 73c:	0d c0       	rjmp	.+26     	; 0x758 <fputc+0x30>
 73e:	2e 81       	ldd	r18, Y+6	; 0x06
 740:	3f 81       	ldd	r19, Y+7	; 0x07
 742:	8c 81       	ldd	r24, Y+4	; 0x04
 744:	9d 81       	ldd	r25, Y+5	; 0x05
 746:	28 17       	cp	r18, r24
 748:	39 07       	cpc	r19, r25
 74a:	64 f4       	brge	.+24     	; 0x764 <fputc+0x3c>
 74c:	e8 81       	ld	r30, Y
 74e:	f9 81       	ldd	r31, Y+1	; 0x01
 750:	01 93       	st	Z+, r16
 752:	f9 83       	std	Y+1, r31	; 0x01
 754:	e8 83       	st	Y, r30
 756:	06 c0       	rjmp	.+12     	; 0x764 <fputc+0x3c>
 758:	e8 85       	ldd	r30, Y+8	; 0x08
 75a:	f9 85       	ldd	r31, Y+9	; 0x09
 75c:	80 2f       	mov	r24, r16
 75e:	09 95       	icall
 760:	89 2b       	or	r24, r25
 762:	31 f4       	brne	.+12     	; 0x770 <fputc+0x48>
 764:	8e 81       	ldd	r24, Y+6	; 0x06
 766:	9f 81       	ldd	r25, Y+7	; 0x07
 768:	01 96       	adiw	r24, 0x01	; 1
 76a:	9f 83       	std	Y+7, r25	; 0x07
 76c:	8e 83       	std	Y+6, r24	; 0x06
 76e:	02 c0       	rjmp	.+4      	; 0x774 <fputc+0x4c>
 770:	0f ef       	ldi	r16, 0xFF	; 255
 772:	1f ef       	ldi	r17, 0xFF	; 255
 774:	c8 01       	movw	r24, r16
 776:	df 91       	pop	r29
 778:	cf 91       	pop	r28
 77a:	1f 91       	pop	r17
 77c:	0f 91       	pop	r16
 77e:	08 95       	ret

00000780 <__ultoa_invert>:
 780:	fa 01       	movw	r30, r20
 782:	aa 27       	eor	r26, r26
 784:	28 30       	cpi	r18, 0x08	; 8
 786:	51 f1       	breq	.+84     	; 0x7dc <__ultoa_invert+0x5c>
 788:	20 31       	cpi	r18, 0x10	; 16
 78a:	81 f1       	breq	.+96     	; 0x7ec <__ultoa_invert+0x6c>
 78c:	e8 94       	clt
 78e:	6f 93       	push	r22
 790:	6e 7f       	andi	r22, 0xFE	; 254
 792:	6e 5f       	subi	r22, 0xFE	; 254
 794:	7f 4f       	sbci	r23, 0xFF	; 255
 796:	8f 4f       	sbci	r24, 0xFF	; 255
 798:	9f 4f       	sbci	r25, 0xFF	; 255
 79a:	af 4f       	sbci	r26, 0xFF	; 255
 79c:	b1 e0       	ldi	r27, 0x01	; 1
 79e:	3e d0       	rcall	.+124    	; 0x81c <__ultoa_invert+0x9c>
 7a0:	b4 e0       	ldi	r27, 0x04	; 4
 7a2:	3c d0       	rcall	.+120    	; 0x81c <__ultoa_invert+0x9c>
 7a4:	67 0f       	add	r22, r23
 7a6:	78 1f       	adc	r23, r24
 7a8:	89 1f       	adc	r24, r25
 7aa:	9a 1f       	adc	r25, r26
 7ac:	a1 1d       	adc	r26, r1
 7ae:	68 0f       	add	r22, r24
 7b0:	79 1f       	adc	r23, r25
 7b2:	8a 1f       	adc	r24, r26
 7b4:	91 1d       	adc	r25, r1
 7b6:	a1 1d       	adc	r26, r1
 7b8:	6a 0f       	add	r22, r26
 7ba:	71 1d       	adc	r23, r1
 7bc:	81 1d       	adc	r24, r1
 7be:	91 1d       	adc	r25, r1
 7c0:	a1 1d       	adc	r26, r1
 7c2:	20 d0       	rcall	.+64     	; 0x804 <__ultoa_invert+0x84>
 7c4:	09 f4       	brne	.+2      	; 0x7c8 <__ultoa_invert+0x48>
 7c6:	68 94       	set
 7c8:	3f 91       	pop	r19
 7ca:	2a e0       	ldi	r18, 0x0A	; 10
 7cc:	26 9f       	mul	r18, r22
 7ce:	11 24       	eor	r1, r1
 7d0:	30 19       	sub	r19, r0
 7d2:	30 5d       	subi	r19, 0xD0	; 208
 7d4:	31 93       	st	Z+, r19
 7d6:	de f6       	brtc	.-74     	; 0x78e <__ultoa_invert+0xe>
 7d8:	cf 01       	movw	r24, r30
 7da:	08 95       	ret
 7dc:	46 2f       	mov	r20, r22
 7de:	47 70       	andi	r20, 0x07	; 7
 7e0:	40 5d       	subi	r20, 0xD0	; 208
 7e2:	41 93       	st	Z+, r20
 7e4:	b3 e0       	ldi	r27, 0x03	; 3
 7e6:	0f d0       	rcall	.+30     	; 0x806 <__ultoa_invert+0x86>
 7e8:	c9 f7       	brne	.-14     	; 0x7dc <__ultoa_invert+0x5c>
 7ea:	f6 cf       	rjmp	.-20     	; 0x7d8 <__ultoa_invert+0x58>
 7ec:	46 2f       	mov	r20, r22
 7ee:	4f 70       	andi	r20, 0x0F	; 15
 7f0:	40 5d       	subi	r20, 0xD0	; 208
 7f2:	4a 33       	cpi	r20, 0x3A	; 58
 7f4:	18 f0       	brcs	.+6      	; 0x7fc <__ultoa_invert+0x7c>
 7f6:	49 5d       	subi	r20, 0xD9	; 217
 7f8:	31 fd       	sbrc	r19, 1
 7fa:	40 52       	subi	r20, 0x20	; 32
 7fc:	41 93       	st	Z+, r20
 7fe:	02 d0       	rcall	.+4      	; 0x804 <__ultoa_invert+0x84>
 800:	a9 f7       	brne	.-22     	; 0x7ec <__ultoa_invert+0x6c>
 802:	ea cf       	rjmp	.-44     	; 0x7d8 <__ultoa_invert+0x58>
 804:	b4 e0       	ldi	r27, 0x04	; 4
 806:	a6 95       	lsr	r26
 808:	97 95       	ror	r25
 80a:	87 95       	ror	r24
 80c:	77 95       	ror	r23
 80e:	67 95       	ror	r22
 810:	ba 95       	dec	r27
 812:	c9 f7       	brne	.-14     	; 0x806 <__ultoa_invert+0x86>
 814:	00 97       	sbiw	r24, 0x00	; 0
 816:	61 05       	cpc	r22, r1
 818:	71 05       	cpc	r23, r1
 81a:	08 95       	ret
 81c:	9b 01       	movw	r18, r22
 81e:	ac 01       	movw	r20, r24
 820:	0a 2e       	mov	r0, r26
 822:	06 94       	lsr	r0
 824:	57 95       	ror	r21
 826:	47 95       	ror	r20
 828:	37 95       	ror	r19
 82a:	27 95       	ror	r18
 82c:	ba 95       	dec	r27
 82e:	c9 f7       	brne	.-14     	; 0x822 <__ultoa_invert+0xa2>
 830:	62 0f       	add	r22, r18
 832:	73 1f       	adc	r23, r19
 834:	84 1f       	adc	r24, r20
 836:	95 1f       	adc	r25, r21
 838:	a0 1d       	adc	r26, r0
 83a:	08 95       	ret

0000083c <__prologue_saves__>:
 83c:	2f 92       	push	r2
 83e:	3f 92       	push	r3
 840:	4f 92       	push	r4
 842:	5f 92       	push	r5
 844:	6f 92       	push	r6
 846:	7f 92       	push	r7
 848:	8f 92       	push	r8
 84a:	9f 92       	push	r9
 84c:	af 92       	push	r10
 84e:	bf 92       	push	r11
 850:	cf 92       	push	r12
 852:	df 92       	push	r13
 854:	ef 92       	push	r14
 856:	ff 92       	push	r15
 858:	0f 93       	push	r16
 85a:	1f 93       	push	r17
 85c:	cf 93       	push	r28
 85e:	df 93       	push	r29
 860:	cd b7       	in	r28, 0x3d	; 61
 862:	de b7       	in	r29, 0x3e	; 62
 864:	ca 1b       	sub	r28, r26
 866:	db 0b       	sbc	r29, r27
 868:	0f b6       	in	r0, 0x3f	; 63
 86a:	f8 94       	cli
 86c:	de bf       	out	0x3e, r29	; 62
 86e:	0f be       	out	0x3f, r0	; 63
 870:	cd bf       	out	0x3d, r28	; 61
 872:	09 94       	ijmp

00000874 <__epilogue_restores__>:
 874:	2a 88       	ldd	r2, Y+18	; 0x12
 876:	39 88       	ldd	r3, Y+17	; 0x11
 878:	48 88       	ldd	r4, Y+16	; 0x10
 87a:	5f 84       	ldd	r5, Y+15	; 0x0f
 87c:	6e 84       	ldd	r6, Y+14	; 0x0e
 87e:	7d 84       	ldd	r7, Y+13	; 0x0d
 880:	8c 84       	ldd	r8, Y+12	; 0x0c
 882:	9b 84       	ldd	r9, Y+11	; 0x0b
 884:	aa 84       	ldd	r10, Y+10	; 0x0a
 886:	b9 84       	ldd	r11, Y+9	; 0x09
 888:	c8 84       	ldd	r12, Y+8	; 0x08
 88a:	df 80       	ldd	r13, Y+7	; 0x07
 88c:	ee 80       	ldd	r14, Y+6	; 0x06
 88e:	fd 80       	ldd	r15, Y+5	; 0x05
 890:	0c 81       	ldd	r16, Y+4	; 0x04
 892:	1b 81       	ldd	r17, Y+3	; 0x03
 894:	aa 81       	ldd	r26, Y+2	; 0x02
 896:	b9 81       	ldd	r27, Y+1	; 0x01
 898:	ce 0f       	add	r28, r30
 89a:	d1 1d       	adc	r29, r1
 89c:	0f b6       	in	r0, 0x3f	; 63
 89e:	f8 94       	cli
 8a0:	de bf       	out	0x3e, r29	; 62
 8a2:	0f be       	out	0x3f, r0	; 63
 8a4:	cd bf       	out	0x3d, r28	; 61
 8a6:	ed 01       	movw	r28, r26
 8a8:	08 95       	ret

000008aa <_exit>:
 8aa:	f8 94       	cli

000008ac <__stop_program>:
 8ac:	ff cf       	rjmp	.-2      	; 0x8ac <__stop_program>
