
led1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000084c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000012  00800060  0000084c  000008e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800072  00800072  000008f2  2**0
                  ALLOC
  3 .debug_aranges 00000020  00000000  00000000  000008f2  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000000d5  00000000  00000000  00000912  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000518  00000000  00000000  000009e7  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000190  00000000  00000000  00000eff  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000004f7  00000000  00000000  0000108f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000e0  00000000  00000000  00001588  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000197  00000000  00000000  00001668  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000002db  00000000  00000000  000017ff  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000048  00000000  00000000  00001ada  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec e4       	ldi	r30, 0x4C	; 76
  68:	f8 e0       	ldi	r31, 0x08	; 8
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a2 37       	cpi	r26, 0x72	; 114
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a2 e7       	ldi	r26, 0x72	; 114
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a4 37       	cpi	r26, 0x74	; 116
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 d7 01 	call	0x3ae	; 0x3ae <main>
  8a:	0c 94 24 04 	jmp	0x848	; 0x848 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <delay_us>:
void lcd_gotoxy1(unsigned char pos);
void lcd_gotoxy2(unsigned char pos);
void WaitMs(unsigned int ms);

void delay_us(unsigned int time)
{
  92:	ac 01       	movw	r20, r24
  94:	30 91 72 00 	lds	r19, 0x0072
  98:	20 e0       	ldi	r18, 0x00	; 0
  9a:	02 c0       	rjmp	.+4      	; 0xa0 <delay_us+0xe>
	for(j=0;j<time;j++)
  9c:	2f 5f       	subi	r18, 0xFF	; 255
  9e:	3a e0       	ldi	r19, 0x0A	; 10
  a0:	82 2f       	mov	r24, r18
  a2:	90 e0       	ldi	r25, 0x00	; 0
  a4:	84 17       	cp	r24, r20
  a6:	95 07       	cpc	r25, r21
  a8:	c8 f3       	brcs	.-14     	; 0x9c <delay_us+0xa>
  aa:	30 93 72 00 	sts	0x0072, r19
  ae:	20 93 73 00 	sts	0x0073, r18
	{
		for(k=0;k<10;k++)
		{};
	}
}
  b2:	08 95       	ret

000000b4 <toggleE>:

void toggleE(void)
{
delay_us(100);
  b4:	84 e6       	ldi	r24, 0x64	; 100
  b6:	90 e0       	ldi	r25, 0x00	; 0
  b8:	0e 94 49 00 	call	0x92	; 0x92 <delay_us>
SETBIT(PORTC,2);
  bc:	aa 9a       	sbi	0x15, 2	; 21
delay_us(100);
  be:	84 e6       	ldi	r24, 0x64	; 100
  c0:	90 e0       	ldi	r25, 0x00	; 0
  c2:	0e 94 49 00 	call	0x92	; 0x92 <delay_us>
CLEARBIT(PORTC,2);
  c6:	aa 98       	cbi	0x15, 2	; 21
}
  c8:	08 95       	ret

000000ca <lcd_cmd>:

void lcd_cmd(unsigned char cmd)
{
  ca:	1f 93       	push	r17
  cc:	18 2f       	mov	r17, r24
	CLEARBIT(PORTC,0+2);    // RS to 0 means select COmmand register, E to 0 ..
  ce:	aa 98       	cbi	0x15, 2	; 21
	PORTC=(cmd&0xF0)|(PORTC&(1<<3))|(PORTC&(1<<1));			
  d0:	95 b3       	in	r25, 0x15	; 21
  d2:	85 b3       	in	r24, 0x15	; 21
  d4:	82 70       	andi	r24, 0x02	; 2
  d6:	98 70       	andi	r25, 0x08	; 8
  d8:	89 2b       	or	r24, r25
  da:	91 2f       	mov	r25, r17
  dc:	90 7f       	andi	r25, 0xF0	; 240
  de:	89 2b       	or	r24, r25
  e0:	85 bb       	out	0x15, r24	; 21
	toggleE();
  e2:	0e 94 5a 00 	call	0xb4	; 0xb4 <toggleE>
	PORTC=((cmd&(0x0F))*16)|(PORTC&(1<<3))|(PORTC&(1<<1));	
  e6:	95 b3       	in	r25, 0x15	; 21
  e8:	85 b3       	in	r24, 0x15	; 21
  ea:	82 70       	andi	r24, 0x02	; 2
  ec:	98 70       	andi	r25, 0x08	; 8
  ee:	89 2b       	or	r24, r25
  f0:	12 95       	swap	r17
  f2:	10 7f       	andi	r17, 0xF0	; 240
  f4:	81 2b       	or	r24, r17
  f6:	85 bb       	out	0x15, r24	; 21
	toggleE();
  f8:	0e 94 5a 00 	call	0xb4	; 0xb4 <toggleE>
}
  fc:	1f 91       	pop	r17
  fe:	08 95       	ret

00000100 <lcd_putchar>:
	lcd_cmd(LINE1);
	WaitMs(15);
}

void lcd_putchar(unsigned char sig)
{
 100:	1f 93       	push	r17
 102:	18 2f       	mov	r17, r24
	PORTC=(sig&0xF0)|(PORTC&(1<<3))|(PORTC&(1<<1));						
 104:	95 b3       	in	r25, 0x15	; 21
 106:	85 b3       	in	r24, 0x15	; 21
 108:	82 70       	andi	r24, 0x02	; 2
 10a:	98 70       	andi	r25, 0x08	; 8
 10c:	89 2b       	or	r24, r25
 10e:	91 2f       	mov	r25, r17
 110:	90 7f       	andi	r25, 0xF0	; 240
 112:	89 2b       	or	r24, r25
 114:	85 bb       	out	0x15, r24	; 21
	SETBIT(PORTC,0);		// selects data register RS=1
 116:	a8 9a       	sbi	0x15, 0	; 21
	toggleE();
 118:	0e 94 5a 00 	call	0xb4	; 0xb4 <toggleE>
	PORTC=((sig&(0x0F))*16)|(PORTC&(1<<3))|(PORTC&(1<<1));
 11c:	95 b3       	in	r25, 0x15	; 21
 11e:	85 b3       	in	r24, 0x15	; 21
 120:	82 70       	andi	r24, 0x02	; 2
 122:	98 70       	andi	r25, 0x08	; 8
 124:	89 2b       	or	r24, r25
 126:	12 95       	swap	r17
 128:	10 7f       	andi	r17, 0xF0	; 240
 12a:	81 2b       	or	r24, r17
 12c:	85 bb       	out	0x15, r24	; 21
	SETBIT(PORTC,0);		// selects data register RS=1
 12e:	a8 9a       	sbi	0x15, 0	; 21
	toggleE();
 130:	0e 94 5a 00 	call	0xb4	; 0xb4 <toggleE>
}
 134:	1f 91       	pop	r17
 136:	08 95       	ret

00000138 <lcd_string>:
		lcd_putchar(single);
	}
}

void lcd_string(unsigned char str[32])
{
 138:	ef 92       	push	r14
 13a:	ff 92       	push	r15
 13c:	1f 93       	push	r17
 13e:	cf 93       	push	r28
 140:	df 93       	push	r29
 142:	7c 01       	movw	r14, r24
	unsigned char k=0;
	CLEARBIT(PORTC,2);      // Disable the LCD
 144:	aa 98       	cbi	0x15, 2	; 21
 146:	10 e0       	ldi	r17, 0x00	; 0
 148:	1f c0       	rjmp	.+62     	; 0x188 <lcd_string+0x50>
	while(str[k]!='\0')	//Till null character is encountered
		{
			if(k==16)
 14a:	10 31       	cpi	r17, 0x10	; 16
 14c:	19 f4       	brne	.+6      	; 0x154 <lcd_string+0x1c>
			{
			lcd_cmd(LINE2);
 14e:	80 ec       	ldi	r24, 0xC0	; 192
 150:	0e 94 65 00 	call	0xca	; 0xca <lcd_cmd>
			}
			PORTC=((str[k])&0xF0)|(PORTC&(1<<3))|(PORTC&(1<<1));
 154:	85 b3       	in	r24, 0x15	; 21
 156:	95 b3       	in	r25, 0x15	; 21
 158:	92 70       	andi	r25, 0x02	; 2
 15a:	88 70       	andi	r24, 0x08	; 8
 15c:	98 2b       	or	r25, r24
 15e:	88 81       	ld	r24, Y
 160:	80 7f       	andi	r24, 0xF0	; 240
 162:	98 2b       	or	r25, r24
 164:	95 bb       	out	0x15, r25	; 21
			SETBIT(PORTC,0);			// selects data register RS=1
 166:	a8 9a       	sbi	0x15, 0	; 21
			toggleE();
 168:	0e 94 5a 00 	call	0xb4	; 0xb4 <toggleE>
			PORTC=((str[k]&(0x0F))*16)|(PORTC&(1<<3))|(PORTC&(1<<1));
 16c:	85 b3       	in	r24, 0x15	; 21
 16e:	95 b3       	in	r25, 0x15	; 21
 170:	92 70       	andi	r25, 0x02	; 2
 172:	88 70       	andi	r24, 0x08	; 8
 174:	98 2b       	or	r25, r24
 176:	88 81       	ld	r24, Y
 178:	82 95       	swap	r24
 17a:	80 7f       	andi	r24, 0xF0	; 240
 17c:	89 2b       	or	r24, r25
 17e:	85 bb       	out	0x15, r24	; 21
			SETBIT(PORTC,0);			// selects data register RS=1
 180:	a8 9a       	sbi	0x15, 0	; 21
			toggleE();
 182:	0e 94 5a 00 	call	0xb4	; 0xb4 <toggleE>
			k++;
 186:	1f 5f       	subi	r17, 0xFF	; 255

void lcd_string(unsigned char str[32])
{
	unsigned char k=0;
	CLEARBIT(PORTC,2);      // Disable the LCD
	while(str[k]!='\0')	//Till null character is encountered
 188:	e7 01       	movw	r28, r14
 18a:	c1 0f       	add	r28, r17
 18c:	d1 1d       	adc	r29, r1
 18e:	88 81       	ld	r24, Y
 190:	88 23       	and	r24, r24
 192:	d9 f6       	brne	.-74     	; 0x14a <lcd_string+0x12>
			PORTC=((str[k]&(0x0F))*16)|(PORTC&(1<<3))|(PORTC&(1<<1));
			SETBIT(PORTC,0);			// selects data register RS=1
			toggleE();
			k++;
		}
}
 194:	df 91       	pop	r29
 196:	cf 91       	pop	r28
 198:	1f 91       	pop	r17
 19a:	ff 90       	pop	r15
 19c:	ef 90       	pop	r14
 19e:	08 95       	ret

000001a0 <lcd_gotoxy1>:
	lcd_char(O+0x30);
}

void lcd_gotoxy1(unsigned char pos)
{
	lcd_cmd(LINE1+pos);     // write pos=0 if u want to select 1st location
 1a0:	80 58       	subi	r24, 0x80	; 128
 1a2:	0e 94 65 00 	call	0xca	; 0xca <lcd_cmd>
}
 1a6:	08 95       	ret

000001a8 <lcd_gotoxy2>:

void lcd_gotoxy2(unsigned char pos)
{
	lcd_cmd(LINE2+pos);		 // write pos=0 if u want to select 1st location
 1a8:	80 54       	subi	r24, 0x40	; 64
 1aa:	0e 94 65 00 	call	0xca	; 0xca <lcd_cmd>
}
 1ae:	08 95       	ret

000001b0 <lcd_char>:
}

void lcd_char(unsigned char single)
{
	int i;
	if(single =='\t')
 1b0:	89 30       	cpi	r24, 0x09	; 9
 1b2:	29 f4       	brne	.+10     	; 0x1be <lcd_char+0xe>
	{
		for(i =0 ; i<2 ; i++)
		{	
		lcd_putchar(' ');
 1b4:	80 e2       	ldi	r24, 0x20	; 32
 1b6:	0e 94 80 00 	call	0x100	; 0x100 <lcd_putchar>
 1ba:	80 e2       	ldi	r24, 0x20	; 32
 1bc:	06 c0       	rjmp	.+12     	; 0x1ca <lcd_char+0x1a>
		}
	}
	else if(single=='\n')
 1be:	8a 30       	cpi	r24, 0x0A	; 10
 1c0:	21 f4       	brne	.+8      	; 0x1ca <lcd_char+0x1a>
	{
		lcd_gotoxy2(0);	
 1c2:	80 e0       	ldi	r24, 0x00	; 0
 1c4:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <lcd_gotoxy2>
 1c8:	08 95       	ret
	}
	else 
	{
		lcd_putchar(single);
 1ca:	0e 94 80 00 	call	0x100	; 0x100 <lcd_putchar>
 1ce:	08 95       	ret

000001d0 <lcd_showvalue>:
			k++;
		}
}

void lcd_showvalue(unsigned char num)	//prints the decimal 3digit value of num
{
 1d0:	ef 92       	push	r14
 1d2:	ff 92       	push	r15
 1d4:	0f 93       	push	r16
 1d6:	1f 93       	push	r17
 1d8:	18 2f       	mov	r17, r24
	unsigned char H=0,T=0,O=0;
	H=num/100;
 1da:	64 e6       	ldi	r22, 0x64	; 100
 1dc:	0e 94 f1 03 	call	0x7e2	; 0x7e2 <__udivmodqi4>
 1e0:	48 2f       	mov	r20, r24
	T=(num - (H*100))/10;
 1e2:	28 2f       	mov	r18, r24
 1e4:	30 e0       	ldi	r19, 0x00	; 0
 1e6:	8c e9       	ldi	r24, 0x9C	; 156
 1e8:	9f ef       	ldi	r25, 0xFF	; 255
 1ea:	28 9f       	mul	r18, r24
 1ec:	70 01       	movw	r14, r0
 1ee:	29 9f       	mul	r18, r25
 1f0:	f0 0c       	add	r15, r0
 1f2:	38 9f       	mul	r19, r24
 1f4:	f0 0c       	add	r15, r0
 1f6:	11 24       	eor	r1, r1
 1f8:	c7 01       	movw	r24, r14
 1fa:	81 0f       	add	r24, r17
 1fc:	91 1d       	adc	r25, r1
 1fe:	6a e0       	ldi	r22, 0x0A	; 10
 200:	70 e0       	ldi	r23, 0x00	; 0
 202:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__divmodhi4>
 206:	06 2f       	mov	r16, r22
	O=(num - (H*100) - (T*10));
	
	lcd_char(H+0x30);
 208:	84 2f       	mov	r24, r20
 20a:	80 5d       	subi	r24, 0xD0	; 208
 20c:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <lcd_char>
	lcd_char(T+0x30);
 210:	80 2f       	mov	r24, r16
 212:	80 5d       	subi	r24, 0xD0	; 208
 214:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <lcd_char>
	lcd_char(O+0x30);
 218:	10 5d       	subi	r17, 0xD0	; 208
 21a:	1e 0d       	add	r17, r14
 21c:	86 ef       	ldi	r24, 0xF6	; 246
 21e:	9f ef       	ldi	r25, 0xFF	; 255
 220:	08 9f       	mul	r16, r24
 222:	00 2d       	mov	r16, r0
 224:	11 24       	eor	r1, r1
 226:	80 2f       	mov	r24, r16
 228:	81 0f       	add	r24, r17
 22a:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <lcd_char>
}
 22e:	1f 91       	pop	r17
 230:	0f 91       	pop	r16
 232:	ff 90       	pop	r15
 234:	ef 90       	pop	r14
 236:	08 95       	ret

00000238 <WaitMs>:
	lcd_cmd(LINE2+pos);		 // write pos=0 if u want to select 1st location
}

/* waits (pauses) for ms milliseconds (assumes clock at 16MHz) */
void WaitMs(unsigned int ms)
{
 238:	0a c0       	rjmp	.+20     	; 0x24e <WaitMs+0x16>
	int i;

	while (ms-- > 0)
 23a:	20 e0       	ldi	r18, 0x00	; 0
 23c:	30 e0       	ldi	r19, 0x00	; 0
	{
		/* 16384 (16k) clock cycles for 1ms; each time through loop
		   is 5 cycles (for loop control + nop) */
		for (i = 0; i < 3276; ++i)
			asm("nop");
 23e:	00 00       	nop

	while (ms-- > 0)
	{
		/* 16384 (16k) clock cycles for 1ms; each time through loop
		   is 5 cycles (for loop control + nop) */
		for (i = 0; i < 3276; ++i)
 240:	2f 5f       	subi	r18, 0xFF	; 255
 242:	3f 4f       	sbci	r19, 0xFF	; 255
 244:	4c e0       	ldi	r20, 0x0C	; 12
 246:	2c 3c       	cpi	r18, 0xCC	; 204
 248:	34 07       	cpc	r19, r20
 24a:	c9 f7       	brne	.-14     	; 0x23e <WaitMs+0x6>
 24c:	01 97       	sbiw	r24, 0x01	; 1
/* waits (pauses) for ms milliseconds (assumes clock at 16MHz) */
void WaitMs(unsigned int ms)
{
	int i;

	while (ms-- > 0)
 24e:	00 97       	sbiw	r24, 0x00	; 0
 250:	a1 f7       	brne	.-24     	; 0x23a <WaitMs+0x2>
		/* 16384 (16k) clock cycles for 1ms; each time through loop
		   is 5 cycles (for loop control + nop) */
		for (i = 0; i < 3276; ++i)
			asm("nop");
	}
}
 252:	08 95       	ret

00000254 <lcd_init>:
	toggleE();
}

void lcd_init(void)	//init the lcd 
{	
	DDRC=0xFF;		// declare it as an o/p port
 254:	8f ef       	ldi	r24, 0xFF	; 255
 256:	84 bb       	out	0x14, r24	; 20
	WaitMs(15);		// Given in datasheet ( Cmd for selecting 4 bit mode )
 258:	8f e0       	ldi	r24, 0x0F	; 15
 25a:	90 e0       	ldi	r25, 0x00	; 0
 25c:	0e 94 1c 01 	call	0x238	; 0x238 <WaitMs>
	lcd_cmd(0x03);
 260:	83 e0       	ldi	r24, 0x03	; 3
 262:	0e 94 65 00 	call	0xca	; 0xca <lcd_cmd>
	WaitMs(45);
 266:	8d e2       	ldi	r24, 0x2D	; 45
 268:	90 e0       	ldi	r25, 0x00	; 0
 26a:	0e 94 1c 01 	call	0x238	; 0x238 <WaitMs>
	lcd_cmd(0x02);
 26e:	82 e0       	ldi	r24, 0x02	; 2
 270:	0e 94 65 00 	call	0xca	; 0xca <lcd_cmd>
	WaitMs(15);
 274:	8f e0       	ldi	r24, 0x0F	; 15
 276:	90 e0       	ldi	r25, 0x00	; 0
 278:	0e 94 1c 01 	call	0x238	; 0x238 <WaitMs>
	CLEARBIT(PORTC,0+2);   // RS to 0 means select COmmand register, E to 0 ..
 27c:	aa 98       	cbi	0x15, 2	; 21
	lcd_cmd(0x01);     // Cmd for clear display
 27e:	81 e0       	ldi	r24, 0x01	; 1
 280:	0e 94 65 00 	call	0xca	; 0xca <lcd_cmd>
	lcd_cmd(0x0F);		// Cmd for display ON and cursor blinking
 284:	8f e0       	ldi	r24, 0x0F	; 15
 286:	0e 94 65 00 	call	0xca	; 0xca <lcd_cmd>
	lcd_cmd(0x02);		// Cmd for returning home
 28a:	82 e0       	ldi	r24, 0x02	; 2
 28c:	0e 94 65 00 	call	0xca	; 0xca <lcd_cmd>
	lcd_cmd(LINE1);
 290:	80 e8       	ldi	r24, 0x80	; 128
 292:	0e 94 65 00 	call	0xca	; 0xca <lcd_cmd>
	WaitMs(15);
 296:	8f e0       	ldi	r24, 0x0F	; 15
 298:	90 e0       	ldi	r25, 0x00	; 0
 29a:	0e 94 1c 01 	call	0x238	; 0x238 <WaitMs>
}
 29e:	08 95       	ret

000002a0 <led_brightness>:
#include<util/delay.h>
#include<LCD_mega16.h>

void led_brightness(unsigned int brightness);
void led_brightness(unsigned int brightness)
{
 2a0:	af 92       	push	r10
 2a2:	bf 92       	push	r11
 2a4:	cf 92       	push	r12
 2a6:	df 92       	push	r13
 2a8:	ef 92       	push	r14
 2aa:	ff 92       	push	r15
 2ac:	0f 93       	push	r16
 2ae:	1f 93       	push	r17
PORTB|=(1<<4);
 2b0:	c4 9a       	sbi	0x18, 4	; 24
_delay_us(brightness);
 2b2:	a0 e0       	ldi	r26, 0x00	; 0
 2b4:	b0 e0       	ldi	r27, 0x00	; 0
 2b6:	bc 01       	movw	r22, r24
 2b8:	cd 01       	movw	r24, r26
 2ba:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <__floatunsisf>
 2be:	5b 01       	movw	r10, r22
 2c0:	6c 01       	movw	r12, r24
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
 2c2:	2b ea       	ldi	r18, 0xAB	; 171
 2c4:	3a ea       	ldi	r19, 0xAA	; 170
 2c6:	4a ea       	ldi	r20, 0xAA	; 170
 2c8:	50 e4       	ldi	r21, 0x40	; 64
 2ca:	0e 94 8e 03 	call	0x71c	; 0x71c <__mulsf3>
 2ce:	7b 01       	movw	r14, r22
 2d0:	8c 01       	movw	r16, r24
	if (__tmp < 1.0)
 2d2:	20 e0       	ldi	r18, 0x00	; 0
 2d4:	30 e0       	ldi	r19, 0x00	; 0
 2d6:	40 e8       	ldi	r20, 0x80	; 128
 2d8:	5f e3       	ldi	r21, 0x3F	; 63
 2da:	0e 94 40 02 	call	0x480	; 0x480 <__cmpsf2>
 2de:	88 23       	and	r24, r24
 2e0:	14 f4       	brge	.+4      	; 0x2e6 <led_brightness+0x46>
 2e2:	61 e0       	ldi	r22, 0x01	; 1
 2e4:	54 c0       	rjmp	.+168    	; 0x38e <led_brightness+0xee>
		__ticks = 1;
	else if (__tmp > 255)
 2e6:	c8 01       	movw	r24, r16
 2e8:	b7 01       	movw	r22, r14
 2ea:	20 e0       	ldi	r18, 0x00	; 0
 2ec:	30 e0       	ldi	r19, 0x00	; 0
 2ee:	4f e7       	ldi	r20, 0x7F	; 127
 2f0:	53 e4       	ldi	r21, 0x43	; 67
 2f2:	0e 94 8a 03 	call	0x714	; 0x714 <__gesf2>
 2f6:	18 16       	cp	r1, r24
 2f8:	0c f0       	brlt	.+2      	; 0x2fc <led_brightness+0x5c>
 2fa:	45 c0       	rjmp	.+138    	; 0x386 <led_brightness+0xe6>
	{
		_delay_ms(__us / 1000.0);
 2fc:	c6 01       	movw	r24, r12
 2fe:	b5 01       	movw	r22, r10
 300:	20 e0       	ldi	r18, 0x00	; 0
 302:	30 e0       	ldi	r19, 0x00	; 0
 304:	4a e7       	ldi	r20, 0x7A	; 122
 306:	54 e4       	ldi	r21, 0x44	; 68
 308:	0e 94 44 02 	call	0x488	; 0x488 <__divsf3>
 30c:	5b 01       	movw	r10, r22
 30e:	6c 01       	movw	r12, r24
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
 310:	20 e0       	ldi	r18, 0x00	; 0
 312:	30 e0       	ldi	r19, 0x00	; 0
 314:	4a e7       	ldi	r20, 0x7A	; 122
 316:	55 e4       	ldi	r21, 0x45	; 69
 318:	0e 94 8e 03 	call	0x71c	; 0x71c <__mulsf3>
 31c:	7b 01       	movw	r14, r22
 31e:	8c 01       	movw	r16, r24
	if (__tmp < 1.0)
 320:	20 e0       	ldi	r18, 0x00	; 0
 322:	30 e0       	ldi	r19, 0x00	; 0
 324:	40 e8       	ldi	r20, 0x80	; 128
 326:	5f e3       	ldi	r21, 0x3F	; 63
 328:	0e 94 40 02 	call	0x480	; 0x480 <__cmpsf2>
 32c:	88 23       	and	r24, r24
 32e:	1c f4       	brge	.+6      	; 0x336 <led_brightness+0x96>
 330:	61 e0       	ldi	r22, 0x01	; 1
 332:	70 e0       	ldi	r23, 0x00	; 0
 334:	24 c0       	rjmp	.+72     	; 0x37e <led_brightness+0xde>
		__ticks = 1;
	else if (__tmp > 65535)
 336:	c8 01       	movw	r24, r16
 338:	b7 01       	movw	r22, r14
 33a:	20 e0       	ldi	r18, 0x00	; 0
 33c:	3f ef       	ldi	r19, 0xFF	; 255
 33e:	4f e7       	ldi	r20, 0x7F	; 127
 340:	57 e4       	ldi	r21, 0x47	; 71
 342:	0e 94 8a 03 	call	0x714	; 0x714 <__gesf2>
 346:	18 16       	cp	r1, r24
 348:	b4 f4       	brge	.+44     	; 0x376 <led_brightness+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 34a:	c6 01       	movw	r24, r12
 34c:	b5 01       	movw	r22, r10
 34e:	20 e0       	ldi	r18, 0x00	; 0
 350:	30 e0       	ldi	r19, 0x00	; 0
 352:	40 e2       	ldi	r20, 0x20	; 32
 354:	51 e4       	ldi	r21, 0x41	; 65
 356:	0e 94 8e 03 	call	0x71c	; 0x71c <__mulsf3>
 35a:	0e 94 ac 02 	call	0x558	; 0x558 <__fixunssfsi>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 35e:	80 e9       	ldi	r24, 0x90	; 144
 360:	91 e0       	ldi	r25, 0x01	; 1
 362:	05 c0       	rjmp	.+10     	; 0x36e <led_brightness+0xce>
 364:	fc 01       	movw	r30, r24
 366:	31 97       	sbiw	r30, 0x01	; 1
 368:	f1 f7       	brne	.-4      	; 0x366 <led_brightness+0xc6>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 36a:	61 50       	subi	r22, 0x01	; 1
 36c:	70 40       	sbci	r23, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 36e:	61 15       	cp	r22, r1
 370:	71 05       	cpc	r23, r1
 372:	c1 f7       	brne	.-16     	; 0x364 <led_brightness+0xc4>
 374:	0e c0       	rjmp	.+28     	; 0x392 <led_brightness+0xf2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 376:	c8 01       	movw	r24, r16
 378:	b7 01       	movw	r22, r14
 37a:	0e 94 ac 02 	call	0x558	; 0x558 <__fixunssfsi>
 37e:	cb 01       	movw	r24, r22
 380:	01 97       	sbiw	r24, 0x01	; 1
 382:	f1 f7       	brne	.-4      	; 0x380 <led_brightness+0xe0>
 384:	06 c0       	rjmp	.+12     	; 0x392 <led_brightness+0xf2>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
 386:	c8 01       	movw	r24, r16
 388:	b7 01       	movw	r22, r14
 38a:	0e 94 ac 02 	call	0x558	; 0x558 <__fixunssfsi>
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 38e:	6a 95       	dec	r22
 390:	f1 f7       	brne	.-4      	; 0x38e <led_brightness+0xee>
PORTB&=~(1<<4);
 392:	c4 98       	cbi	0x18, 4	; 24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 394:	80 e4       	ldi	r24, 0x40	; 64
 396:	9c e9       	ldi	r25, 0x9C	; 156
 398:	01 97       	sbiw	r24, 0x01	; 1
 39a:	f1 f7       	brne	.-4      	; 0x398 <led_brightness+0xf8>
_delay_ms(10);
}
 39c:	1f 91       	pop	r17
 39e:	0f 91       	pop	r16
 3a0:	ff 90       	pop	r15
 3a2:	ef 90       	pop	r14
 3a4:	df 90       	pop	r13
 3a6:	cf 90       	pop	r12
 3a8:	bf 90       	pop	r11
 3aa:	af 90       	pop	r10
 3ac:	08 95       	ret

000003ae <main>:

int main()
{
 3ae:	8f 92       	push	r8
 3b0:	9f 92       	push	r9
 3b2:	af 92       	push	r10
 3b4:	bf 92       	push	r11
 3b6:	cf 92       	push	r12
 3b8:	df 92       	push	r13
 3ba:	ef 92       	push	r14
 3bc:	ff 92       	push	r15
 3be:	0f 93       	push	r16
 3c0:	1f 93       	push	r17
 3c2:	cf 93       	push	r28
 3c4:	df 93       	push	r29
 unsigned int ton,t=0,start_time,end_time;
DDRB|=(1<<PB4);
 3c6:	bc 9a       	sbi	0x17, 4	; 23
lcd_init();
 3c8:	0e 94 2a 01 	call	0x254	; 0x254 <lcd_init>
PORTC|=(1<<1);
 3cc:	a9 9a       	sbi	0x15, 1	; 21
lcd_string(" sexy shalin!!!!");
 3ce:	80 e6       	ldi	r24, 0x60	; 96
 3d0:	90 e0       	ldi	r25, 0x00	; 0
 3d2:	0e 94 9c 00 	call	0x138	; 0x138 <lcd_string>
 3d6:	c4 e6       	ldi	r28, 0x64	; 100
 3d8:	d0 e0       	ldi	r29, 0x00	; 0
 3da:	80 e9       	ldi	r24, 0x90	; 144
 3dc:	88 2e       	mov	r8, r24
 3de:	81 e0       	ldi	r24, 0x01	; 1
 3e0:	98 2e       	mov	r9, r24
{

for(t;t<=100;t++)
{

PORTB|=(1<<4);
 3e2:	c4 9a       	sbi	0x18, 4	; 24
_delay_ms(100-t);
 3e4:	be 01       	movw	r22, r28
 3e6:	80 e0       	ldi	r24, 0x00	; 0
 3e8:	90 e0       	ldi	r25, 0x00	; 0
 3ea:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <__floatunsisf>
 3ee:	5b 01       	movw	r10, r22
 3f0:	6c 01       	movw	r12, r24
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
 3f2:	20 e0       	ldi	r18, 0x00	; 0
 3f4:	30 e0       	ldi	r19, 0x00	; 0
 3f6:	4a e7       	ldi	r20, 0x7A	; 122
 3f8:	55 e4       	ldi	r21, 0x45	; 69
 3fa:	0e 94 8e 03 	call	0x71c	; 0x71c <__mulsf3>
 3fe:	7b 01       	movw	r14, r22
 400:	8c 01       	movw	r16, r24
	if (__tmp < 1.0)
 402:	20 e0       	ldi	r18, 0x00	; 0
 404:	30 e0       	ldi	r19, 0x00	; 0
 406:	40 e8       	ldi	r20, 0x80	; 128
 408:	5f e3       	ldi	r21, 0x3F	; 63
 40a:	0e 94 40 02 	call	0x480	; 0x480 <__cmpsf2>
 40e:	88 23       	and	r24, r24
 410:	1c f4       	brge	.+6      	; 0x418 <main+0x6a>
 412:	61 e0       	ldi	r22, 0x01	; 1
 414:	70 e0       	ldi	r23, 0x00	; 0
 416:	22 c0       	rjmp	.+68     	; 0x45c <main+0xae>
		__ticks = 1;
	else if (__tmp > 65535)
 418:	c8 01       	movw	r24, r16
 41a:	b7 01       	movw	r22, r14
 41c:	20 e0       	ldi	r18, 0x00	; 0
 41e:	3f ef       	ldi	r19, 0xFF	; 255
 420:	4f e7       	ldi	r20, 0x7F	; 127
 422:	57 e4       	ldi	r21, 0x47	; 71
 424:	0e 94 8a 03 	call	0x714	; 0x714 <__gesf2>
 428:	18 16       	cp	r1, r24
 42a:	a4 f4       	brge	.+40     	; 0x454 <main+0xa6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 42c:	c6 01       	movw	r24, r12
 42e:	b5 01       	movw	r22, r10
 430:	20 e0       	ldi	r18, 0x00	; 0
 432:	30 e0       	ldi	r19, 0x00	; 0
 434:	40 e2       	ldi	r20, 0x20	; 32
 436:	51 e4       	ldi	r21, 0x41	; 65
 438:	0e 94 8e 03 	call	0x71c	; 0x71c <__mulsf3>
 43c:	0e 94 ac 02 	call	0x558	; 0x558 <__fixunssfsi>
 440:	05 c0       	rjmp	.+10     	; 0x44c <main+0x9e>
 442:	c4 01       	movw	r24, r8
 444:	01 97       	sbiw	r24, 0x01	; 1
 446:	f1 f7       	brne	.-4      	; 0x444 <main+0x96>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 448:	61 50       	subi	r22, 0x01	; 1
 44a:	70 40       	sbci	r23, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 44c:	61 15       	cp	r22, r1
 44e:	71 05       	cpc	r23, r1
 450:	c1 f7       	brne	.-16     	; 0x442 <main+0x94>
 452:	07 c0       	rjmp	.+14     	; 0x462 <__stack+0x3>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 454:	c8 01       	movw	r24, r16
 456:	b7 01       	movw	r22, r14
 458:	0e 94 ac 02 	call	0x558	; 0x558 <__fixunssfsi>
 45c:	cb 01       	movw	r24, r22
 45e:	01 97       	sbiw	r24, 0x01	; 1
 460:	f1 f7       	brne	.-4      	; 0x45e <main+0xb0>
PORTB&=~(1<<4);
 462:	c4 98       	cbi	0x18, 4	; 24
 464:	88 ee       	ldi	r24, 0xE8	; 232
 466:	93 e0       	ldi	r25, 0x03	; 3
 468:	f4 01       	movw	r30, r8
 46a:	31 97       	sbiw	r30, 0x01	; 1
 46c:	f1 f7       	brne	.-4      	; 0x46a <__stack+0xb>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 46e:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 470:	d9 f7       	brne	.-10     	; 0x468 <__stack+0x9>
 472:	21 97       	sbiw	r28, 0x01	; 1
PORTC|=(1<<1);
lcd_string(" sexy shalin!!!!");
while(1)
{

for(t;t<=100;t++)
 474:	8f ef       	ldi	r24, 0xFF	; 255
 476:	cf 3f       	cpi	r28, 0xFF	; 255
 478:	d8 07       	cpc	r29, r24
 47a:	09 f0       	breq	.+2      	; 0x47e <__stack+0x1f>
 47c:	b2 cf       	rjmp	.-156    	; 0x3e2 <main+0x34>
 47e:	ff cf       	rjmp	.-2      	; 0x47e <__stack+0x1f>

00000480 <__cmpsf2>:
 480:	d4 d0       	rcall	.+424    	; 0x62a <__fp_cmp>
 482:	08 f4       	brcc	.+2      	; 0x486 <__cmpsf2+0x6>
 484:	81 e0       	ldi	r24, 0x01	; 1
 486:	08 95       	ret

00000488 <__divsf3>:
 488:	0c d0       	rcall	.+24     	; 0x4a2 <__divsf3x>
 48a:	0a c1       	rjmp	.+532    	; 0x6a0 <__fp_round>
 48c:	02 d1       	rcall	.+516    	; 0x692 <__fp_pscB>
 48e:	40 f0       	brcs	.+16     	; 0x4a0 <__divsf3+0x18>
 490:	f9 d0       	rcall	.+498    	; 0x684 <__fp_pscA>
 492:	30 f0       	brcs	.+12     	; 0x4a0 <__divsf3+0x18>
 494:	21 f4       	brne	.+8      	; 0x49e <__divsf3+0x16>
 496:	5f 3f       	cpi	r21, 0xFF	; 255
 498:	19 f0       	breq	.+6      	; 0x4a0 <__divsf3+0x18>
 49a:	eb c0       	rjmp	.+470    	; 0x672 <__fp_inf>
 49c:	51 11       	cpse	r21, r1
 49e:	34 c1       	rjmp	.+616    	; 0x708 <__fp_szero>
 4a0:	ee c0       	rjmp	.+476    	; 0x67e <__fp_nan>

000004a2 <__divsf3x>:
 4a2:	0f d1       	rcall	.+542    	; 0x6c2 <__fp_split3>
 4a4:	98 f3       	brcs	.-26     	; 0x48c <__divsf3+0x4>

000004a6 <__divsf3_pse>:
 4a6:	99 23       	and	r25, r25
 4a8:	c9 f3       	breq	.-14     	; 0x49c <__divsf3+0x14>
 4aa:	55 23       	and	r21, r21
 4ac:	b1 f3       	breq	.-20     	; 0x49a <__divsf3+0x12>
 4ae:	95 1b       	sub	r25, r21
 4b0:	55 0b       	sbc	r21, r21
 4b2:	bb 27       	eor	r27, r27
 4b4:	aa 27       	eor	r26, r26
 4b6:	62 17       	cp	r22, r18
 4b8:	73 07       	cpc	r23, r19
 4ba:	84 07       	cpc	r24, r20
 4bc:	38 f0       	brcs	.+14     	; 0x4cc <__divsf3_pse+0x26>
 4be:	9f 5f       	subi	r25, 0xFF	; 255
 4c0:	5f 4f       	sbci	r21, 0xFF	; 255
 4c2:	22 0f       	add	r18, r18
 4c4:	33 1f       	adc	r19, r19
 4c6:	44 1f       	adc	r20, r20
 4c8:	aa 1f       	adc	r26, r26
 4ca:	a9 f3       	breq	.-22     	; 0x4b6 <__divsf3_pse+0x10>
 4cc:	33 d0       	rcall	.+102    	; 0x534 <__divsf3_pse+0x8e>
 4ce:	0e 2e       	mov	r0, r30
 4d0:	3a f0       	brmi	.+14     	; 0x4e0 <__divsf3_pse+0x3a>
 4d2:	e0 e8       	ldi	r30, 0x80	; 128
 4d4:	30 d0       	rcall	.+96     	; 0x536 <__divsf3_pse+0x90>
 4d6:	91 50       	subi	r25, 0x01	; 1
 4d8:	50 40       	sbci	r21, 0x00	; 0
 4da:	e6 95       	lsr	r30
 4dc:	00 1c       	adc	r0, r0
 4de:	ca f7       	brpl	.-14     	; 0x4d2 <__divsf3_pse+0x2c>
 4e0:	29 d0       	rcall	.+82     	; 0x534 <__divsf3_pse+0x8e>
 4e2:	fe 2f       	mov	r31, r30
 4e4:	27 d0       	rcall	.+78     	; 0x534 <__divsf3_pse+0x8e>
 4e6:	66 0f       	add	r22, r22
 4e8:	77 1f       	adc	r23, r23
 4ea:	88 1f       	adc	r24, r24
 4ec:	bb 1f       	adc	r27, r27
 4ee:	26 17       	cp	r18, r22
 4f0:	37 07       	cpc	r19, r23
 4f2:	48 07       	cpc	r20, r24
 4f4:	ab 07       	cpc	r26, r27
 4f6:	b0 e8       	ldi	r27, 0x80	; 128
 4f8:	09 f0       	breq	.+2      	; 0x4fc <__divsf3_pse+0x56>
 4fa:	bb 0b       	sbc	r27, r27
 4fc:	80 2d       	mov	r24, r0
 4fe:	bf 01       	movw	r22, r30
 500:	ff 27       	eor	r31, r31
 502:	93 58       	subi	r25, 0x83	; 131
 504:	5f 4f       	sbci	r21, 0xFF	; 255
 506:	2a f0       	brmi	.+10     	; 0x512 <__divsf3_pse+0x6c>
 508:	9e 3f       	cpi	r25, 0xFE	; 254
 50a:	51 05       	cpc	r21, r1
 50c:	68 f0       	brcs	.+26     	; 0x528 <__divsf3_pse+0x82>
 50e:	b1 c0       	rjmp	.+354    	; 0x672 <__fp_inf>
 510:	fb c0       	rjmp	.+502    	; 0x708 <__fp_szero>
 512:	5f 3f       	cpi	r21, 0xFF	; 255
 514:	ec f3       	brlt	.-6      	; 0x510 <__divsf3_pse+0x6a>
 516:	98 3e       	cpi	r25, 0xE8	; 232
 518:	dc f3       	brlt	.-10     	; 0x510 <__divsf3_pse+0x6a>
 51a:	86 95       	lsr	r24
 51c:	77 95       	ror	r23
 51e:	67 95       	ror	r22
 520:	b7 95       	ror	r27
 522:	f7 95       	ror	r31
 524:	9f 5f       	subi	r25, 0xFF	; 255
 526:	c9 f7       	brne	.-14     	; 0x51a <__divsf3_pse+0x74>
 528:	88 0f       	add	r24, r24
 52a:	91 1d       	adc	r25, r1
 52c:	96 95       	lsr	r25
 52e:	87 95       	ror	r24
 530:	97 f9       	bld	r25, 7
 532:	08 95       	ret
 534:	e1 e0       	ldi	r30, 0x01	; 1
 536:	66 0f       	add	r22, r22
 538:	77 1f       	adc	r23, r23
 53a:	88 1f       	adc	r24, r24
 53c:	bb 1f       	adc	r27, r27
 53e:	62 17       	cp	r22, r18
 540:	73 07       	cpc	r23, r19
 542:	84 07       	cpc	r24, r20
 544:	ba 07       	cpc	r27, r26
 546:	20 f0       	brcs	.+8      	; 0x550 <__divsf3_pse+0xaa>
 548:	62 1b       	sub	r22, r18
 54a:	73 0b       	sbc	r23, r19
 54c:	84 0b       	sbc	r24, r20
 54e:	ba 0b       	sbc	r27, r26
 550:	ee 1f       	adc	r30, r30
 552:	88 f7       	brcc	.-30     	; 0x536 <__divsf3_pse+0x90>
 554:	e0 95       	com	r30
 556:	08 95       	ret

00000558 <__fixunssfsi>:
 558:	bc d0       	rcall	.+376    	; 0x6d2 <__fp_splitA>
 55a:	88 f0       	brcs	.+34     	; 0x57e <__fixunssfsi+0x26>
 55c:	9f 57       	subi	r25, 0x7F	; 127
 55e:	90 f0       	brcs	.+36     	; 0x584 <__fixunssfsi+0x2c>
 560:	b9 2f       	mov	r27, r25
 562:	99 27       	eor	r25, r25
 564:	b7 51       	subi	r27, 0x17	; 23
 566:	a0 f0       	brcs	.+40     	; 0x590 <__fixunssfsi+0x38>
 568:	d1 f0       	breq	.+52     	; 0x59e <__fixunssfsi+0x46>
 56a:	66 0f       	add	r22, r22
 56c:	77 1f       	adc	r23, r23
 56e:	88 1f       	adc	r24, r24
 570:	99 1f       	adc	r25, r25
 572:	1a f0       	brmi	.+6      	; 0x57a <__fixunssfsi+0x22>
 574:	ba 95       	dec	r27
 576:	c9 f7       	brne	.-14     	; 0x56a <__fixunssfsi+0x12>
 578:	12 c0       	rjmp	.+36     	; 0x59e <__fixunssfsi+0x46>
 57a:	b1 30       	cpi	r27, 0x01	; 1
 57c:	81 f0       	breq	.+32     	; 0x59e <__fixunssfsi+0x46>
 57e:	c3 d0       	rcall	.+390    	; 0x706 <__fp_zero>
 580:	b1 e0       	ldi	r27, 0x01	; 1
 582:	08 95       	ret
 584:	c0 c0       	rjmp	.+384    	; 0x706 <__fp_zero>
 586:	67 2f       	mov	r22, r23
 588:	78 2f       	mov	r23, r24
 58a:	88 27       	eor	r24, r24
 58c:	b8 5f       	subi	r27, 0xF8	; 248
 58e:	39 f0       	breq	.+14     	; 0x59e <__fixunssfsi+0x46>
 590:	b9 3f       	cpi	r27, 0xF9	; 249
 592:	cc f3       	brlt	.-14     	; 0x586 <__fixunssfsi+0x2e>
 594:	86 95       	lsr	r24
 596:	77 95       	ror	r23
 598:	67 95       	ror	r22
 59a:	b3 95       	inc	r27
 59c:	d9 f7       	brne	.-10     	; 0x594 <__fixunssfsi+0x3c>
 59e:	3e f4       	brtc	.+14     	; 0x5ae <__fixunssfsi+0x56>
 5a0:	90 95       	com	r25
 5a2:	80 95       	com	r24
 5a4:	70 95       	com	r23
 5a6:	61 95       	neg	r22
 5a8:	7f 4f       	sbci	r23, 0xFF	; 255
 5aa:	8f 4f       	sbci	r24, 0xFF	; 255
 5ac:	9f 4f       	sbci	r25, 0xFF	; 255
 5ae:	08 95       	ret

000005b0 <__floatunsisf>:
 5b0:	e8 94       	clt
 5b2:	09 c0       	rjmp	.+18     	; 0x5c6 <__floatsisf+0x12>

000005b4 <__floatsisf>:
 5b4:	97 fb       	bst	r25, 7
 5b6:	3e f4       	brtc	.+14     	; 0x5c6 <__floatsisf+0x12>
 5b8:	90 95       	com	r25
 5ba:	80 95       	com	r24
 5bc:	70 95       	com	r23
 5be:	61 95       	neg	r22
 5c0:	7f 4f       	sbci	r23, 0xFF	; 255
 5c2:	8f 4f       	sbci	r24, 0xFF	; 255
 5c4:	9f 4f       	sbci	r25, 0xFF	; 255
 5c6:	99 23       	and	r25, r25
 5c8:	a9 f0       	breq	.+42     	; 0x5f4 <__floatsisf+0x40>
 5ca:	f9 2f       	mov	r31, r25
 5cc:	96 e9       	ldi	r25, 0x96	; 150
 5ce:	bb 27       	eor	r27, r27
 5d0:	93 95       	inc	r25
 5d2:	f6 95       	lsr	r31
 5d4:	87 95       	ror	r24
 5d6:	77 95       	ror	r23
 5d8:	67 95       	ror	r22
 5da:	b7 95       	ror	r27
 5dc:	f1 11       	cpse	r31, r1
 5de:	f8 cf       	rjmp	.-16     	; 0x5d0 <__floatsisf+0x1c>
 5e0:	fa f4       	brpl	.+62     	; 0x620 <__floatsisf+0x6c>
 5e2:	bb 0f       	add	r27, r27
 5e4:	11 f4       	brne	.+4      	; 0x5ea <__floatsisf+0x36>
 5e6:	60 ff       	sbrs	r22, 0
 5e8:	1b c0       	rjmp	.+54     	; 0x620 <__floatsisf+0x6c>
 5ea:	6f 5f       	subi	r22, 0xFF	; 255
 5ec:	7f 4f       	sbci	r23, 0xFF	; 255
 5ee:	8f 4f       	sbci	r24, 0xFF	; 255
 5f0:	9f 4f       	sbci	r25, 0xFF	; 255
 5f2:	16 c0       	rjmp	.+44     	; 0x620 <__floatsisf+0x6c>
 5f4:	88 23       	and	r24, r24
 5f6:	11 f0       	breq	.+4      	; 0x5fc <__floatsisf+0x48>
 5f8:	96 e9       	ldi	r25, 0x96	; 150
 5fa:	11 c0       	rjmp	.+34     	; 0x61e <__floatsisf+0x6a>
 5fc:	77 23       	and	r23, r23
 5fe:	21 f0       	breq	.+8      	; 0x608 <__floatsisf+0x54>
 600:	9e e8       	ldi	r25, 0x8E	; 142
 602:	87 2f       	mov	r24, r23
 604:	76 2f       	mov	r23, r22
 606:	05 c0       	rjmp	.+10     	; 0x612 <__floatsisf+0x5e>
 608:	66 23       	and	r22, r22
 60a:	71 f0       	breq	.+28     	; 0x628 <__floatsisf+0x74>
 60c:	96 e8       	ldi	r25, 0x86	; 134
 60e:	86 2f       	mov	r24, r22
 610:	70 e0       	ldi	r23, 0x00	; 0
 612:	60 e0       	ldi	r22, 0x00	; 0
 614:	2a f0       	brmi	.+10     	; 0x620 <__floatsisf+0x6c>
 616:	9a 95       	dec	r25
 618:	66 0f       	add	r22, r22
 61a:	77 1f       	adc	r23, r23
 61c:	88 1f       	adc	r24, r24
 61e:	da f7       	brpl	.-10     	; 0x616 <__floatsisf+0x62>
 620:	88 0f       	add	r24, r24
 622:	96 95       	lsr	r25
 624:	87 95       	ror	r24
 626:	97 f9       	bld	r25, 7
 628:	08 95       	ret

0000062a <__fp_cmp>:
 62a:	99 0f       	add	r25, r25
 62c:	00 08       	sbc	r0, r0
 62e:	55 0f       	add	r21, r21
 630:	aa 0b       	sbc	r26, r26
 632:	e0 e8       	ldi	r30, 0x80	; 128
 634:	fe ef       	ldi	r31, 0xFE	; 254
 636:	16 16       	cp	r1, r22
 638:	17 06       	cpc	r1, r23
 63a:	e8 07       	cpc	r30, r24
 63c:	f9 07       	cpc	r31, r25
 63e:	c0 f0       	brcs	.+48     	; 0x670 <__fp_cmp+0x46>
 640:	12 16       	cp	r1, r18
 642:	13 06       	cpc	r1, r19
 644:	e4 07       	cpc	r30, r20
 646:	f5 07       	cpc	r31, r21
 648:	98 f0       	brcs	.+38     	; 0x670 <__fp_cmp+0x46>
 64a:	62 1b       	sub	r22, r18
 64c:	73 0b       	sbc	r23, r19
 64e:	84 0b       	sbc	r24, r20
 650:	95 0b       	sbc	r25, r21
 652:	39 f4       	brne	.+14     	; 0x662 <__fp_cmp+0x38>
 654:	0a 26       	eor	r0, r26
 656:	61 f0       	breq	.+24     	; 0x670 <__fp_cmp+0x46>
 658:	23 2b       	or	r18, r19
 65a:	24 2b       	or	r18, r20
 65c:	25 2b       	or	r18, r21
 65e:	21 f4       	brne	.+8      	; 0x668 <__fp_cmp+0x3e>
 660:	08 95       	ret
 662:	0a 26       	eor	r0, r26
 664:	09 f4       	brne	.+2      	; 0x668 <__fp_cmp+0x3e>
 666:	a1 40       	sbci	r26, 0x01	; 1
 668:	a6 95       	lsr	r26
 66a:	8f ef       	ldi	r24, 0xFF	; 255
 66c:	81 1d       	adc	r24, r1
 66e:	81 1d       	adc	r24, r1
 670:	08 95       	ret

00000672 <__fp_inf>:
 672:	97 f9       	bld	r25, 7
 674:	9f 67       	ori	r25, 0x7F	; 127
 676:	80 e8       	ldi	r24, 0x80	; 128
 678:	70 e0       	ldi	r23, 0x00	; 0
 67a:	60 e0       	ldi	r22, 0x00	; 0
 67c:	08 95       	ret

0000067e <__fp_nan>:
 67e:	9f ef       	ldi	r25, 0xFF	; 255
 680:	80 ec       	ldi	r24, 0xC0	; 192
 682:	08 95       	ret

00000684 <__fp_pscA>:
 684:	00 24       	eor	r0, r0
 686:	0a 94       	dec	r0
 688:	16 16       	cp	r1, r22
 68a:	17 06       	cpc	r1, r23
 68c:	18 06       	cpc	r1, r24
 68e:	09 06       	cpc	r0, r25
 690:	08 95       	ret

00000692 <__fp_pscB>:
 692:	00 24       	eor	r0, r0
 694:	0a 94       	dec	r0
 696:	12 16       	cp	r1, r18
 698:	13 06       	cpc	r1, r19
 69a:	14 06       	cpc	r1, r20
 69c:	05 06       	cpc	r0, r21
 69e:	08 95       	ret

000006a0 <__fp_round>:
 6a0:	09 2e       	mov	r0, r25
 6a2:	03 94       	inc	r0
 6a4:	00 0c       	add	r0, r0
 6a6:	11 f4       	brne	.+4      	; 0x6ac <__fp_round+0xc>
 6a8:	88 23       	and	r24, r24
 6aa:	52 f0       	brmi	.+20     	; 0x6c0 <__fp_round+0x20>
 6ac:	bb 0f       	add	r27, r27
 6ae:	40 f4       	brcc	.+16     	; 0x6c0 <__fp_round+0x20>
 6b0:	bf 2b       	or	r27, r31
 6b2:	11 f4       	brne	.+4      	; 0x6b8 <__fp_round+0x18>
 6b4:	60 ff       	sbrs	r22, 0
 6b6:	04 c0       	rjmp	.+8      	; 0x6c0 <__fp_round+0x20>
 6b8:	6f 5f       	subi	r22, 0xFF	; 255
 6ba:	7f 4f       	sbci	r23, 0xFF	; 255
 6bc:	8f 4f       	sbci	r24, 0xFF	; 255
 6be:	9f 4f       	sbci	r25, 0xFF	; 255
 6c0:	08 95       	ret

000006c2 <__fp_split3>:
 6c2:	57 fd       	sbrc	r21, 7
 6c4:	90 58       	subi	r25, 0x80	; 128
 6c6:	44 0f       	add	r20, r20
 6c8:	55 1f       	adc	r21, r21
 6ca:	59 f0       	breq	.+22     	; 0x6e2 <__fp_splitA+0x10>
 6cc:	5f 3f       	cpi	r21, 0xFF	; 255
 6ce:	71 f0       	breq	.+28     	; 0x6ec <__fp_splitA+0x1a>
 6d0:	47 95       	ror	r20

000006d2 <__fp_splitA>:
 6d2:	88 0f       	add	r24, r24
 6d4:	97 fb       	bst	r25, 7
 6d6:	99 1f       	adc	r25, r25
 6d8:	61 f0       	breq	.+24     	; 0x6f2 <__fp_splitA+0x20>
 6da:	9f 3f       	cpi	r25, 0xFF	; 255
 6dc:	79 f0       	breq	.+30     	; 0x6fc <__fp_splitA+0x2a>
 6de:	87 95       	ror	r24
 6e0:	08 95       	ret
 6e2:	12 16       	cp	r1, r18
 6e4:	13 06       	cpc	r1, r19
 6e6:	14 06       	cpc	r1, r20
 6e8:	55 1f       	adc	r21, r21
 6ea:	f2 cf       	rjmp	.-28     	; 0x6d0 <__fp_split3+0xe>
 6ec:	46 95       	lsr	r20
 6ee:	f1 df       	rcall	.-30     	; 0x6d2 <__fp_splitA>
 6f0:	08 c0       	rjmp	.+16     	; 0x702 <__fp_splitA+0x30>
 6f2:	16 16       	cp	r1, r22
 6f4:	17 06       	cpc	r1, r23
 6f6:	18 06       	cpc	r1, r24
 6f8:	99 1f       	adc	r25, r25
 6fa:	f1 cf       	rjmp	.-30     	; 0x6de <__fp_splitA+0xc>
 6fc:	86 95       	lsr	r24
 6fe:	71 05       	cpc	r23, r1
 700:	61 05       	cpc	r22, r1
 702:	08 94       	sec
 704:	08 95       	ret

00000706 <__fp_zero>:
 706:	e8 94       	clt

00000708 <__fp_szero>:
 708:	bb 27       	eor	r27, r27
 70a:	66 27       	eor	r22, r22
 70c:	77 27       	eor	r23, r23
 70e:	cb 01       	movw	r24, r22
 710:	97 f9       	bld	r25, 7
 712:	08 95       	ret

00000714 <__gesf2>:
 714:	8a df       	rcall	.-236    	; 0x62a <__fp_cmp>
 716:	08 f4       	brcc	.+2      	; 0x71a <__gesf2+0x6>
 718:	8f ef       	ldi	r24, 0xFF	; 255
 71a:	08 95       	ret

0000071c <__mulsf3>:
 71c:	0b d0       	rcall	.+22     	; 0x734 <__mulsf3x>
 71e:	c0 cf       	rjmp	.-128    	; 0x6a0 <__fp_round>
 720:	b1 df       	rcall	.-158    	; 0x684 <__fp_pscA>
 722:	28 f0       	brcs	.+10     	; 0x72e <__mulsf3+0x12>
 724:	b6 df       	rcall	.-148    	; 0x692 <__fp_pscB>
 726:	18 f0       	brcs	.+6      	; 0x72e <__mulsf3+0x12>
 728:	95 23       	and	r25, r21
 72a:	09 f0       	breq	.+2      	; 0x72e <__mulsf3+0x12>
 72c:	a2 cf       	rjmp	.-188    	; 0x672 <__fp_inf>
 72e:	a7 cf       	rjmp	.-178    	; 0x67e <__fp_nan>
 730:	11 24       	eor	r1, r1
 732:	ea cf       	rjmp	.-44     	; 0x708 <__fp_szero>

00000734 <__mulsf3x>:
 734:	c6 df       	rcall	.-116    	; 0x6c2 <__fp_split3>
 736:	a0 f3       	brcs	.-24     	; 0x720 <__mulsf3+0x4>

00000738 <__mulsf3_pse>:
 738:	95 9f       	mul	r25, r21
 73a:	d1 f3       	breq	.-12     	; 0x730 <__mulsf3+0x14>
 73c:	95 0f       	add	r25, r21
 73e:	50 e0       	ldi	r21, 0x00	; 0
 740:	55 1f       	adc	r21, r21
 742:	62 9f       	mul	r22, r18
 744:	f0 01       	movw	r30, r0
 746:	72 9f       	mul	r23, r18
 748:	bb 27       	eor	r27, r27
 74a:	f0 0d       	add	r31, r0
 74c:	b1 1d       	adc	r27, r1
 74e:	63 9f       	mul	r22, r19
 750:	aa 27       	eor	r26, r26
 752:	f0 0d       	add	r31, r0
 754:	b1 1d       	adc	r27, r1
 756:	aa 1f       	adc	r26, r26
 758:	64 9f       	mul	r22, r20
 75a:	66 27       	eor	r22, r22
 75c:	b0 0d       	add	r27, r0
 75e:	a1 1d       	adc	r26, r1
 760:	66 1f       	adc	r22, r22
 762:	82 9f       	mul	r24, r18
 764:	22 27       	eor	r18, r18
 766:	b0 0d       	add	r27, r0
 768:	a1 1d       	adc	r26, r1
 76a:	62 1f       	adc	r22, r18
 76c:	73 9f       	mul	r23, r19
 76e:	b0 0d       	add	r27, r0
 770:	a1 1d       	adc	r26, r1
 772:	62 1f       	adc	r22, r18
 774:	83 9f       	mul	r24, r19
 776:	a0 0d       	add	r26, r0
 778:	61 1d       	adc	r22, r1
 77a:	22 1f       	adc	r18, r18
 77c:	74 9f       	mul	r23, r20
 77e:	33 27       	eor	r19, r19
 780:	a0 0d       	add	r26, r0
 782:	61 1d       	adc	r22, r1
 784:	23 1f       	adc	r18, r19
 786:	84 9f       	mul	r24, r20
 788:	60 0d       	add	r22, r0
 78a:	21 1d       	adc	r18, r1
 78c:	82 2f       	mov	r24, r18
 78e:	76 2f       	mov	r23, r22
 790:	6a 2f       	mov	r22, r26
 792:	11 24       	eor	r1, r1
 794:	9f 57       	subi	r25, 0x7F	; 127
 796:	50 40       	sbci	r21, 0x00	; 0
 798:	8a f0       	brmi	.+34     	; 0x7bc <__mulsf3_pse+0x84>
 79a:	e1 f0       	breq	.+56     	; 0x7d4 <__mulsf3_pse+0x9c>
 79c:	88 23       	and	r24, r24
 79e:	4a f0       	brmi	.+18     	; 0x7b2 <__mulsf3_pse+0x7a>
 7a0:	ee 0f       	add	r30, r30
 7a2:	ff 1f       	adc	r31, r31
 7a4:	bb 1f       	adc	r27, r27
 7a6:	66 1f       	adc	r22, r22
 7a8:	77 1f       	adc	r23, r23
 7aa:	88 1f       	adc	r24, r24
 7ac:	91 50       	subi	r25, 0x01	; 1
 7ae:	50 40       	sbci	r21, 0x00	; 0
 7b0:	a9 f7       	brne	.-22     	; 0x79c <__mulsf3_pse+0x64>
 7b2:	9e 3f       	cpi	r25, 0xFE	; 254
 7b4:	51 05       	cpc	r21, r1
 7b6:	70 f0       	brcs	.+28     	; 0x7d4 <__mulsf3_pse+0x9c>
 7b8:	5c cf       	rjmp	.-328    	; 0x672 <__fp_inf>
 7ba:	a6 cf       	rjmp	.-180    	; 0x708 <__fp_szero>
 7bc:	5f 3f       	cpi	r21, 0xFF	; 255
 7be:	ec f3       	brlt	.-6      	; 0x7ba <__mulsf3_pse+0x82>
 7c0:	98 3e       	cpi	r25, 0xE8	; 232
 7c2:	dc f3       	brlt	.-10     	; 0x7ba <__mulsf3_pse+0x82>
 7c4:	86 95       	lsr	r24
 7c6:	77 95       	ror	r23
 7c8:	67 95       	ror	r22
 7ca:	b7 95       	ror	r27
 7cc:	f7 95       	ror	r31
 7ce:	e7 95       	ror	r30
 7d0:	9f 5f       	subi	r25, 0xFF	; 255
 7d2:	c1 f7       	brne	.-16     	; 0x7c4 <__mulsf3_pse+0x8c>
 7d4:	fe 2b       	or	r31, r30
 7d6:	88 0f       	add	r24, r24
 7d8:	91 1d       	adc	r25, r1
 7da:	96 95       	lsr	r25
 7dc:	87 95       	ror	r24
 7de:	97 f9       	bld	r25, 7
 7e0:	08 95       	ret

000007e2 <__udivmodqi4>:
 7e2:	99 1b       	sub	r25, r25
 7e4:	79 e0       	ldi	r23, 0x09	; 9
 7e6:	04 c0       	rjmp	.+8      	; 0x7f0 <__udivmodqi4_ep>

000007e8 <__udivmodqi4_loop>:
 7e8:	99 1f       	adc	r25, r25
 7ea:	96 17       	cp	r25, r22
 7ec:	08 f0       	brcs	.+2      	; 0x7f0 <__udivmodqi4_ep>
 7ee:	96 1b       	sub	r25, r22

000007f0 <__udivmodqi4_ep>:
 7f0:	88 1f       	adc	r24, r24
 7f2:	7a 95       	dec	r23
 7f4:	c9 f7       	brne	.-14     	; 0x7e8 <__udivmodqi4_loop>
 7f6:	80 95       	com	r24
 7f8:	08 95       	ret

000007fa <__divmodhi4>:
 7fa:	97 fb       	bst	r25, 7
 7fc:	09 2e       	mov	r0, r25
 7fe:	07 26       	eor	r0, r23
 800:	0a d0       	rcall	.+20     	; 0x816 <__divmodhi4_neg1>
 802:	77 fd       	sbrc	r23, 7
 804:	04 d0       	rcall	.+8      	; 0x80e <__divmodhi4_neg2>
 806:	0c d0       	rcall	.+24     	; 0x820 <__udivmodhi4>
 808:	06 d0       	rcall	.+12     	; 0x816 <__divmodhi4_neg1>
 80a:	00 20       	and	r0, r0
 80c:	1a f4       	brpl	.+6      	; 0x814 <__divmodhi4_exit>

0000080e <__divmodhi4_neg2>:
 80e:	70 95       	com	r23
 810:	61 95       	neg	r22
 812:	7f 4f       	sbci	r23, 0xFF	; 255

00000814 <__divmodhi4_exit>:
 814:	08 95       	ret

00000816 <__divmodhi4_neg1>:
 816:	f6 f7       	brtc	.-4      	; 0x814 <__divmodhi4_exit>
 818:	90 95       	com	r25
 81a:	81 95       	neg	r24
 81c:	9f 4f       	sbci	r25, 0xFF	; 255
 81e:	08 95       	ret

00000820 <__udivmodhi4>:
 820:	aa 1b       	sub	r26, r26
 822:	bb 1b       	sub	r27, r27
 824:	51 e1       	ldi	r21, 0x11	; 17
 826:	07 c0       	rjmp	.+14     	; 0x836 <__udivmodhi4_ep>

00000828 <__udivmodhi4_loop>:
 828:	aa 1f       	adc	r26, r26
 82a:	bb 1f       	adc	r27, r27
 82c:	a6 17       	cp	r26, r22
 82e:	b7 07       	cpc	r27, r23
 830:	10 f0       	brcs	.+4      	; 0x836 <__udivmodhi4_ep>
 832:	a6 1b       	sub	r26, r22
 834:	b7 0b       	sbc	r27, r23

00000836 <__udivmodhi4_ep>:
 836:	88 1f       	adc	r24, r24
 838:	99 1f       	adc	r25, r25
 83a:	5a 95       	dec	r21
 83c:	a9 f7       	brne	.-22     	; 0x828 <__udivmodhi4_loop>
 83e:	80 95       	com	r24
 840:	90 95       	com	r25
 842:	bc 01       	movw	r22, r24
 844:	cd 01       	movw	r24, r26
 846:	08 95       	ret

00000848 <_exit>:
 848:	f8 94       	cli

0000084a <__stop_program>:
 84a:	ff cf       	rjmp	.-2      	; 0x84a <__stop_program>
